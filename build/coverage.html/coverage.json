{"/home/travis/build/npmtest/node-npmtest-jira-connector/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":46}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_jira_connector */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireExampleJsFromReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-jira-connector/lib.npmtest_jira_connector.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/lib.npmtest_jira_connector.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":59}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":65}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_jira_connector */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_jira_connector = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_jira_connector = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-jira-connector/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":58}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":72},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-jira-connector && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_jira_connector */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_jira_connector","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_jira_connector.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_jira_connector.rollup.js'] =","            local.assetsDict['/assets.npmtest_jira_connector.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_jira_connector.__dirname + '/lib.npmtest_jira_connector.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/index.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/index.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":1,"128":1,"129":0,"130":0,"131":0,"132":0,"133":1,"134":0,"135":0,"136":0,"137":0,"138":1,"139":0,"140":0,"141":0,"142":0,"143":1,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":1,"183":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0]},"f":{"1":0,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},"fnMap":{"1":{"name":"(anonymous_1)","line":132,"loc":{"start":{"line":132,"column":34},"end":{"line":132,"column":52}}},"2":{"name":"(anonymous_2)","line":229,"loc":{"start":{"line":229,"column":1},"end":{"line":229,"column":13}}},"3":{"name":"(anonymous_3)","line":239,"loc":{"start":{"line":239,"column":20},"end":{"line":239,"column":36}}},"4":{"name":"(anonymous_4)","line":260,"loc":{"start":{"line":260,"column":25},"end":{"line":260,"column":41}}},"5":{"name":"(anonymous_5)","line":281,"loc":{"start":{"line":281,"column":27},"end":{"line":281,"column":43}}},"6":{"name":"(anonymous_6)","line":304,"loc":{"start":{"line":304,"column":23},"end":{"line":304,"column":67}}},"7":{"name":"(anonymous_7)","line":322,"loc":{"start":{"line":322,"column":29},"end":{"line":322,"column":60}}},"8":{"name":"(anonymous_8)","line":338,"loc":{"start":{"line":338,"column":36},"end":{"line":338,"column":63}}},"9":{"name":"(anonymous_9)","line":342,"loc":{"start":{"line":342,"column":35},"end":{"line":342,"column":54}}},"10":{"name":"(anonymous_10)","line":353,"loc":{"start":{"line":353,"column":39},"end":{"line":353,"column":51}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":25}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":33}},"3":{"start":{"line":10,"column":0},"end":{"line":10,"column":68}},"4":{"start":{"line":11,"column":0},"end":{"line":11,"column":45}},"5":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}},"6":{"start":{"line":13,"column":0},"end":{"line":13,"column":37}},"7":{"start":{"line":14,"column":0},"end":{"line":14,"column":35}},"8":{"start":{"line":15,"column":0},"end":{"line":15,"column":39}},"9":{"start":{"line":16,"column":0},"end":{"line":16,"column":43}},"10":{"start":{"line":17,"column":0},"end":{"line":17,"column":59}},"11":{"start":{"line":18,"column":0},"end":{"line":18,"column":43}},"12":{"start":{"line":19,"column":0},"end":{"line":19,"column":42}},"13":{"start":{"line":20,"column":0},"end":{"line":20,"column":35}},"14":{"start":{"line":21,"column":0},"end":{"line":21,"column":37}},"15":{"start":{"line":22,"column":0},"end":{"line":22,"column":35}},"16":{"start":{"line":23,"column":0},"end":{"line":23,"column":55}},"17":{"start":{"line":24,"column":0},"end":{"line":24,"column":37}},"18":{"start":{"line":25,"column":0},"end":{"line":25,"column":35}},"19":{"start":{"line":26,"column":0},"end":{"line":26,"column":43}},"20":{"start":{"line":27,"column":0},"end":{"line":27,"column":51}},"21":{"start":{"line":28,"column":0},"end":{"line":28,"column":43}},"22":{"start":{"line":29,"column":0},"end":{"line":29,"column":31}},"23":{"start":{"line":30,"column":0},"end":{"line":30,"column":47}},"24":{"start":{"line":31,"column":0},"end":{"line":31,"column":57}},"25":{"start":{"line":32,"column":0},"end":{"line":32,"column":51}},"26":{"start":{"line":33,"column":0},"end":{"line":33,"column":51}},"27":{"start":{"line":34,"column":0},"end":{"line":34,"column":37}},"28":{"start":{"line":35,"column":0},"end":{"line":35,"column":45}},"29":{"start":{"line":36,"column":0},"end":{"line":36,"column":41}},"30":{"start":{"line":37,"column":0},"end":{"line":37,"column":41}},"31":{"start":{"line":38,"column":0},"end":{"line":38,"column":39}},"32":{"start":{"line":39,"column":0},"end":{"line":39,"column":55}},"33":{"start":{"line":40,"column":0},"end":{"line":40,"column":55}},"34":{"start":{"line":41,"column":0},"end":{"line":41,"column":39}},"35":{"start":{"line":42,"column":0},"end":{"line":42,"column":45}},"36":{"start":{"line":43,"column":0},"end":{"line":43,"column":39}},"37":{"start":{"line":44,"column":0},"end":{"line":44,"column":37}},"38":{"start":{"line":45,"column":0},"end":{"line":45,"column":51}},"39":{"start":{"line":46,"column":0},"end":{"line":46,"column":45}},"40":{"start":{"line":47,"column":0},"end":{"line":47,"column":41}},"41":{"start":{"line":48,"column":0},"end":{"line":48,"column":37}},"42":{"start":{"line":49,"column":0},"end":{"line":49,"column":37}},"43":{"start":{"line":50,"column":0},"end":{"line":50,"column":53}},"44":{"start":{"line":51,"column":0},"end":{"line":51,"column":33}},"45":{"start":{"line":52,"column":0},"end":{"line":52,"column":39}},"46":{"start":{"line":53,"column":0},"end":{"line":53,"column":39}},"47":{"start":{"line":54,"column":0},"end":{"line":54,"column":41}},"48":{"start":{"line":55,"column":0},"end":{"line":55,"column":53}},"49":{"start":{"line":56,"column":0},"end":{"line":56,"column":39}},"50":{"start":{"line":132,"column":0},"end":{"line":227,"column":2}},"51":{"start":{"line":133,"column":4},"end":{"line":135,"column":5}},"52":{"start":{"line":134,"column":8},"end":{"line":134,"column":52}},"53":{"start":{"line":136,"column":4},"end":{"line":136,"column":28}},"54":{"start":{"line":137,"column":4},"end":{"line":137,"column":64}},"55":{"start":{"line":138,"column":4},"end":{"line":138,"column":69}},"56":{"start":{"line":139,"column":4},"end":{"line":139,"column":28}},"57":{"start":{"line":140,"column":4},"end":{"line":140,"column":24}},"58":{"start":{"line":141,"column":4},"end":{"line":141,"column":33}},"59":{"start":{"line":142,"column":4},"end":{"line":142,"column":35}},"60":{"start":{"line":143,"column":4},"end":{"line":143,"column":45}},"61":{"start":{"line":145,"column":4},"end":{"line":176,"column":5}},"62":{"start":{"line":146,"column":8},"end":{"line":154,"column":9}},"63":{"start":{"line":147,"column":12},"end":{"line":147,"column":64}},"64":{"start":{"line":148,"column":15},"end":{"line":154,"column":9}},"65":{"start":{"line":149,"column":12},"end":{"line":149,"column":63}},"66":{"start":{"line":150,"column":15},"end":{"line":154,"column":9}},"67":{"start":{"line":151,"column":12},"end":{"line":151,"column":63}},"68":{"start":{"line":152,"column":15},"end":{"line":154,"column":9}},"69":{"start":{"line":153,"column":12},"end":{"line":153,"column":70}},"70":{"start":{"line":156,"column":8},"end":{"line":156,"column":40}},"71":{"start":{"line":157,"column":8},"end":{"line":157,"column":55}},"72":{"start":{"line":159,"column":11},"end":{"line":176,"column":5}},"73":{"start":{"line":160,"column":8},"end":{"line":175,"column":9}},"74":{"start":{"line":161,"column":12},"end":{"line":163,"column":13}},"75":{"start":{"line":165,"column":12},"end":{"line":169,"column":13}},"76":{"start":{"line":166,"column":16},"end":{"line":166,"column":64}},"77":{"start":{"line":167,"column":19},"end":{"line":169,"column":13}},"78":{"start":{"line":168,"column":16},"end":{"line":168,"column":64}},"79":{"start":{"line":171,"column":12},"end":{"line":174,"column":14}},"80":{"start":{"line":178,"column":4},"end":{"line":180,"column":5}},"81":{"start":{"line":179,"column":8},"end":{"line":179,"column":44}},"82":{"start":{"line":182,"column":4},"end":{"line":182,"column":65}},"83":{"start":{"line":183,"column":4},"end":{"line":183,"column":43}},"84":{"start":{"line":184,"column":4},"end":{"line":184,"column":39}},"85":{"start":{"line":185,"column":4},"end":{"line":185,"column":35}},"86":{"start":{"line":186,"column":4},"end":{"line":186,"column":33}},"87":{"start":{"line":187,"column":4},"end":{"line":187,"column":37}},"88":{"start":{"line":188,"column":4},"end":{"line":188,"column":41}},"89":{"start":{"line":189,"column":4},"end":{"line":189,"column":57}},"90":{"start":{"line":190,"column":4},"end":{"line":190,"column":41}},"91":{"start":{"line":191,"column":4},"end":{"line":191,"column":33}},"92":{"start":{"line":192,"column":4},"end":{"line":192,"column":35}},"93":{"start":{"line":193,"column":4},"end":{"line":193,"column":33}},"94":{"start":{"line":194,"column":4},"end":{"line":194,"column":53}},"95":{"start":{"line":195,"column":4},"end":{"line":195,"column":35}},"96":{"start":{"line":196,"column":4},"end":{"line":196,"column":33}},"97":{"start":{"line":197,"column":4},"end":{"line":197,"column":41}},"98":{"start":{"line":198,"column":4},"end":{"line":198,"column":49}},"99":{"start":{"line":199,"column":4},"end":{"line":199,"column":41}},"100":{"start":{"line":200,"column":4},"end":{"line":200,"column":29}},"101":{"start":{"line":201,"column":4},"end":{"line":201,"column":45}},"102":{"start":{"line":202,"column":4},"end":{"line":202,"column":55}},"103":{"start":{"line":203,"column":4},"end":{"line":203,"column":49}},"104":{"start":{"line":204,"column":4},"end":{"line":204,"column":49}},"105":{"start":{"line":205,"column":4},"end":{"line":205,"column":35}},"106":{"start":{"line":206,"column":4},"end":{"line":206,"column":39}},"107":{"start":{"line":207,"column":4},"end":{"line":207,"column":39}},"108":{"start":{"line":208,"column":4},"end":{"line":208,"column":37}},"109":{"start":{"line":209,"column":4},"end":{"line":209,"column":53}},"110":{"start":{"line":210,"column":4},"end":{"line":210,"column":53}},"111":{"start":{"line":211,"column":4},"end":{"line":211,"column":37}},"112":{"start":{"line":212,"column":4},"end":{"line":212,"column":43}},"113":{"start":{"line":213,"column":4},"end":{"line":213,"column":37}},"114":{"start":{"line":214,"column":4},"end":{"line":214,"column":35}},"115":{"start":{"line":215,"column":4},"end":{"line":215,"column":49}},"116":{"start":{"line":216,"column":4},"end":{"line":216,"column":43}},"117":{"start":{"line":217,"column":4},"end":{"line":217,"column":39}},"118":{"start":{"line":218,"column":4},"end":{"line":218,"column":35}},"119":{"start":{"line":219,"column":4},"end":{"line":219,"column":35}},"120":{"start":{"line":220,"column":4},"end":{"line":220,"column":51}},"121":{"start":{"line":221,"column":4},"end":{"line":221,"column":31}},"122":{"start":{"line":222,"column":4},"end":{"line":222,"column":37}},"123":{"start":{"line":223,"column":4},"end":{"line":223,"column":37}},"124":{"start":{"line":224,"column":4},"end":{"line":224,"column":39}},"125":{"start":{"line":225,"column":4},"end":{"line":225,"column":51}},"126":{"start":{"line":226,"column":4},"end":{"line":226,"column":37}},"127":{"start":{"line":229,"column":0},"end":{"line":384,"column":30}},"128":{"start":{"line":239,"column":4},"end":{"line":250,"column":6}},"129":{"start":{"line":240,"column":8},"end":{"line":240,"column":57}},"130":{"start":{"line":241,"column":8},"end":{"line":241,"column":38}},"131":{"start":{"line":242,"column":8},"end":{"line":247,"column":11}},"132":{"start":{"line":249,"column":8},"end":{"line":249,"column":46}},"133":{"start":{"line":260,"column":4},"end":{"line":271,"column":6}},"134":{"start":{"line":261,"column":8},"end":{"line":261,"column":59}},"135":{"start":{"line":262,"column":8},"end":{"line":262,"column":43}},"136":{"start":{"line":263,"column":8},"end":{"line":268,"column":11}},"137":{"start":{"line":270,"column":8},"end":{"line":270,"column":46}},"138":{"start":{"line":281,"column":4},"end":{"line":292,"column":6}},"139":{"start":{"line":282,"column":8},"end":{"line":282,"column":62}},"140":{"start":{"line":283,"column":8},"end":{"line":283,"column":45}},"141":{"start":{"line":284,"column":8},"end":{"line":289,"column":11}},"142":{"start":{"line":291,"column":8},"end":{"line":291,"column":46}},"143":{"start":{"line":304,"column":4},"end":{"line":382,"column":6}},"144":{"start":{"line":305,"column":8},"end":{"line":316,"column":9}},"145":{"start":{"line":306,"column":12},"end":{"line":306,"column":45}},"146":{"start":{"line":307,"column":15},"end":{"line":316,"column":9}},"147":{"start":{"line":308,"column":12},"end":{"line":315,"column":13}},"148":{"start":{"line":309,"column":14},"end":{"line":311,"column":15}},"149":{"start":{"line":310,"column":16},"end":{"line":310,"column":36}},"150":{"start":{"line":312,"column":14},"end":{"line":312,"column":82}},"151":{"start":{"line":314,"column":14},"end":{"line":314,"column":45}},"152":{"start":{"line":317,"column":8},"end":{"line":319,"column":9}},"153":{"start":{"line":318,"column":12},"end":{"line":318,"column":42}},"154":{"start":{"line":321,"column":8},"end":{"line":380,"column":9}},"155":{"start":{"line":322,"column":12},"end":{"line":336,"column":15}},"156":{"start":{"line":323,"column":16},"end":{"line":325,"column":17}},"157":{"start":{"line":324,"column":20},"end":{"line":324,"column":70}},"158":{"start":{"line":327,"column":12},"end":{"line":333,"column":13}},"159":{"start":{"line":328,"column":16},"end":{"line":332,"column":17}},"160":{"start":{"line":329,"column":20},"end":{"line":329,"column":44}},"161":{"start":{"line":331,"column":20},"end":{"line":331,"column":61}},"162":{"start":{"line":335,"column":16},"end":{"line":335,"column":86}},"163":{"start":{"line":337,"column":15},"end":{"line":380,"column":9}},"164":{"start":{"line":338,"column":12},"end":{"line":379,"column":15}},"165":{"start":{"line":340,"column":16},"end":{"line":340,"column":43}},"166":{"start":{"line":342,"column":16},"end":{"line":375,"column":19}},"167":{"start":{"line":345,"column":20},"end":{"line":345,"column":74}},"168":{"start":{"line":348,"column":20},"end":{"line":348,"column":34}},"169":{"start":{"line":349,"column":20},"end":{"line":349,"column":52}},"170":{"start":{"line":350,"column":20},"end":{"line":350,"column":46}},"171":{"start":{"line":353,"column":20},"end":{"line":373,"column":23}},"172":{"start":{"line":355,"column":24},"end":{"line":355,"column":51}},"173":{"start":{"line":358,"column":24},"end":{"line":364,"column":25}},"174":{"start":{"line":359,"column":28},"end":{"line":363,"column":29}},"175":{"start":{"line":360,"column":32},"end":{"line":360,"column":60}},"176":{"start":{"line":366,"column":24},"end":{"line":370,"column":25}},"177":{"start":{"line":367,"column":28},"end":{"line":367,"column":51}},"178":{"start":{"line":368,"column":28},"end":{"line":368,"column":61}},"179":{"start":{"line":369,"column":28},"end":{"line":369,"column":35}},"180":{"start":{"line":372,"column":24},"end":{"line":372,"column":40}},"181":{"start":{"line":377,"column":16},"end":{"line":377,"column":40}},"182":{"start":{"line":386,"column":0},"end":{"line":386,"column":52}},"183":{"start":{"line":388,"column":0},"end":{"line":388,"column":32}}},"branchMap":{"1":{"line":133,"type":"if","locations":[{"start":{"line":133,"column":4},"end":{"line":133,"column":4}},{"start":{"line":133,"column":4},"end":{"line":133,"column":4}}]},"2":{"line":137,"type":"cond-expr","locations":[{"start":{"line":137,"column":38},"end":{"line":137,"column":53}},{"start":{"line":137,"column":56},"end":{"line":137,"column":63}}]},"3":{"line":138,"type":"cond-expr","locations":[{"start":{"line":138,"column":44},"end":{"line":138,"column":62}},{"start":{"line":138,"column":65},"end":{"line":138,"column":68}}]},"4":{"line":143,"type":"binary-expr","locations":[{"start":{"line":143,"column":19},"end":{"line":143,"column":33}},{"start":{"line":143,"column":37},"end":{"line":143,"column":44}}]},"5":{"line":145,"type":"if","locations":[{"start":{"line":145,"column":4},"end":{"line":145,"column":4}},{"start":{"line":145,"column":4},"end":{"line":145,"column":4}}]},"6":{"line":146,"type":"if","locations":[{"start":{"line":146,"column":8},"end":{"line":146,"column":8}},{"start":{"line":146,"column":8},"end":{"line":146,"column":8}}]},"7":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":15},"end":{"line":148,"column":15}},{"start":{"line":148,"column":15},"end":{"line":148,"column":15}}]},"8":{"line":150,"type":"if","locations":[{"start":{"line":150,"column":15},"end":{"line":150,"column":15}},{"start":{"line":150,"column":15},"end":{"line":150,"column":15}}]},"9":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":15},"end":{"line":152,"column":15}},{"start":{"line":152,"column":15},"end":{"line":152,"column":15}}]},"10":{"line":159,"type":"if","locations":[{"start":{"line":159,"column":11},"end":{"line":159,"column":11}},{"start":{"line":159,"column":11},"end":{"line":159,"column":11}}]},"11":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":8},"end":{"line":160,"column":8}},{"start":{"line":160,"column":8},"end":{"line":160,"column":8}}]},"12":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":12},"end":{"line":165,"column":12}},{"start":{"line":165,"column":12},"end":{"line":165,"column":12}}]},"13":{"line":167,"type":"if","locations":[{"start":{"line":167,"column":19},"end":{"line":167,"column":19}},{"start":{"line":167,"column":19},"end":{"line":167,"column":19}}]},"14":{"line":178,"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":178,"column":4}},{"start":{"line":178,"column":4},"end":{"line":178,"column":4}}]},"15":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":8},"end":{"line":305,"column":8}},{"start":{"line":305,"column":8},"end":{"line":305,"column":8}}]},"16":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":15},"end":{"line":307,"column":15}},{"start":{"line":307,"column":15},"end":{"line":307,"column":15}}]},"17":{"line":308,"type":"if","locations":[{"start":{"line":308,"column":12},"end":{"line":308,"column":12}},{"start":{"line":308,"column":12},"end":{"line":308,"column":12}}]},"18":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":14},"end":{"line":309,"column":14}},{"start":{"line":309,"column":14},"end":{"line":309,"column":14}}]},"19":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":8},"end":{"line":317,"column":8}},{"start":{"line":317,"column":8},"end":{"line":317,"column":8}}]},"20":{"line":321,"type":"if","locations":[{"start":{"line":321,"column":8},"end":{"line":321,"column":8}},{"start":{"line":321,"column":8},"end":{"line":321,"column":8}}]},"21":{"line":323,"type":"if","locations":[{"start":{"line":323,"column":16},"end":{"line":323,"column":16}},{"start":{"line":323,"column":16},"end":{"line":323,"column":16}}]},"22":{"line":323,"type":"binary-expr","locations":[{"start":{"line":323,"column":20},"end":{"line":323,"column":23}},{"start":{"line":323,"column":27},"end":{"line":323,"column":65}}]},"23":{"line":324,"type":"cond-expr","locations":[{"start":{"line":324,"column":42},"end":{"line":324,"column":45}},{"start":{"line":324,"column":48},"end":{"line":324,"column":52}}]},"24":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":12},"end":{"line":327,"column":12}},{"start":{"line":327,"column":12},"end":{"line":327,"column":12}}]},"25":{"line":335,"type":"cond-expr","locations":[{"start":{"line":335,"column":54},"end":{"line":335,"column":67}},{"start":{"line":335,"column":70},"end":{"line":335,"column":74}}]},"26":{"line":337,"type":"if","locations":[{"start":{"line":337,"column":15},"end":{"line":337,"column":15}},{"start":{"line":337,"column":15},"end":{"line":337,"column":15}}]},"27":{"line":358,"type":"if","locations":[{"start":{"line":358,"column":24},"end":{"line":358,"column":24}},{"start":{"line":358,"column":24},"end":{"line":358,"column":24}}]},"28":{"line":358,"type":"binary-expr","locations":[{"start":{"line":358,"column":28},"end":{"line":358,"column":45}},{"start":{"line":358,"column":49},"end":{"line":358,"column":66}}]},"29":{"line":366,"type":"if","locations":[{"start":{"line":366,"column":24},"end":{"line":366,"column":24}},{"start":{"line":366,"column":24},"end":{"line":366,"column":24}}]}},"code":["\"use strict\";","","// Core packages","var url = require('url');","","// Npm packages","var request = require('request');","","// Custom packages","var applicationProperties = require('./api/application-properties');","var attachment = require('./api/attachment');","var auditing = require('./api/auditing');","var avatar = require('./api/avatar');","var board = require('./api/board');","var comment = require('./api/comment');","var component = require('./api/component');","var customFieldOption = require('./api/customFieldOption');","var dashboard = require('./api/dashboard');","var errorStrings = require('./lib/error');","var field = require('./api/field');","var filter = require('./api/filter');","var group = require('./api/group');","var groupUserPicker = require('./api/groupUserPicker');","var groups = require('./api/groups');","var issue = require('./api/issue');","var issueLink = require('./api/issueLink');","var issueLinkType = require('./api/issueLinkType');","var issueType = require('./api/issueType');","var jql = require('./api/jql');","var licenseRole = require('./api/licenseRole');","var licenseValidator = require('./api/licenseValidator');","var myPermissions = require('./api/myPermissions');","var myPreferences = require('./api/myPreferences');","var myself = require('./api/myself');","var oauth_util = require('./lib/oauth_util');","var password = require('./api/password');","var priority = require('./api/priority');","var project = require('./api/project');","var projectCategory = require('./api/projectCategory');","var projectValidate = require('./api/projectValidate');","var reindex = require('./api/reindex');","var resolution = require('./api/resolution');","var screens = require('./api/screens');","var search = require('./api/search');","var securityLevel = require('./api/securityLevel');","var serverInfo = require('./api/serverInfo');","var settings = require('./api/settings');","var sprint = require('./api/sprint');","var status = require('./api/status');","var statusCategory = require('./api/statusCategory');","var user = require('./api/user');","var version = require('./api/version');","var webhook = require('./api/webhook');","var workflow = require('./api/workflow');","var workflowScheme = require('./api/workflowScheme');","var worklog = require('./api/worklog');","","/**"," * Represents a client for the Jira REST API"," *"," * @constructor JiraClient"," * @property {AgileBoardClient} board"," * @property {AgileSprintClient} sprint"," *"," * @property {ApplicationPropertiesClient} applicationProperties"," * @property {AttachmentClient} attachment"," * @property {AuditingClient} auditing"," * @property {AvatarClient} avatar"," * @property {CommentClient} comment"," * @property {ComponentClient} component"," * @property {CustomFieldOptionClient} customFieldOption"," * @property {DashboardClient} dashboard"," * @property {FieldClient} field"," * @property {FilterClient} filter"," * @property {GroupClient} group"," * @property {GroupUserPickerClient} groupUserPicker"," * @property {GroupsClient} groups"," * @property {IssueClient} issue"," * @property {IssueLinkClient} issueLink"," * @property {IssueLinkTypeClient} issueLinkType"," * @property {IssueTypeClient} issueType"," * @property {JqlClient} jql"," * @property {LicenseRoleClient} licenseRole"," * @property {LicenseValidatorClient} licenseValidator"," * @property {MyPermissionsClient} myPermissions"," * @property {MyPreferencesClient} myPreferences"," * @property {MyselfClient} myself"," * @property {PasswordClient} password"," * @property {PriorityClient} priority"," * @property {ProjectCategoryClient} projectCategory"," * @property {ProjectClient} project"," * @property {ProjectValidateClient} projectValidate"," * @property {ReindexClient} reindex"," * @property {ResolutionClient} resolution"," * @property {ScreensClient} screens"," * @property {SearchClient} search"," * @property {SecurityLevelClient} securityLevel"," * @property {ServerInfoClient} serverInfo"," * @property {SettingsClient} settings"," * @property {StatusCategoryClient} statusCategory"," * @property {StatusClient} status"," * @property {UserClient} user"," * @property {VersionClient} version"," * @property {WebhookClient} webhook"," * @property {WorkflowClient} workflow"," * @property {WorkflowSchemeClient} workflowScheme"," * @property {WorklogClient} worklog"," *"," * @param config The information needed to access the Jira API"," * @param {string} config.host The hostname of the Jira API."," * @param {string} [config.protocol=https] The protocol used to accses the Jira API."," * @param {number} [config.port=443] The port number used to connect to Jira."," * @param {string} [config.path_prefix=\"/\"] The prefix to use in front of the path, if Jira isn't at \"/\""," * @param {string} [config.version=2] The version of the Jira API to which you will be connecting.  Currently, only"," *     version 2 is supported."," * @param config.auth The authentication information used tp connect to Jira. Must contain EITHER username and password"," *     OR oauth information.  Oauth information will be used over username/password authentication."," * @param {string} [config.basic_auth.username] The username of the user that will be authenticated. MUST be included"," *     if using username and password authentication."," * @param {string} [config.basic_auth.password] The password of the user that will be authenticated. MUST be included"," *     if using username and password authentication."," * @param {string} [config.oauth.consumer_key] The consumer key used in the Jira Application Link for oauth"," *     authentication.  MUST be included if using OAuth."," * @param {string} [config.oauth.private_key] The private key used for OAuth security. MUST be included if using OAuth."," * @param {string} [config.oauth.token] The VERIFIED token used to connect to the Jira API.  MUST be included if using"," *     OAuth."," * @param {string} [config.oauth.token_secret] The secret for the above token.  MUST be included if using Oauth."," * @param {CookieJar} [config.cookie_jar] The CookieJar to use for every requests."," * @param {Promise} [config.promise] Any function (constructor) compatible with Promise (bluebird, Q,...)."," *      Default - native Promise."," */","var JiraClient = module.exports = function (config) {","    if(!config.host) {","        throw new Error(errorStrings.NO_HOST_ERROR);","    }","    this.host = config.host;","    this.protocol = config.protocol ? config.protocol : 'https';","    this.path_prefix = config.path_prefix ? config.path_prefix : '/';","    this.port = config.port;","    this.apiVersion = 2; // TODO Add support for other versions.","    this.agileApiVersion = '1.0';","    this.webhookApiVersion = '1.0';","    this.promise = config.promise || Promise;","","    if (config.oauth) {","        if (!config.oauth.consumer_key) {","            throw new Error(errorStrings.NO_CONSUMER_KEY_ERROR);","        } else if (!config.oauth.private_key) {","            throw new Error(errorStrings.NO_PRIVATE_KEY_ERROR);","        } else if (!config.oauth.token) {","            throw new Error(errorStrings.NO_OAUTH_TOKEN_ERROR);","        } else if (!config.oauth.token_secret) {","            throw new Error(errorStrings.NO_OAUTH_TOKEN_SECRET_ERROR);","        }","","        this.oauthConfig = config.oauth;","        this.oauthConfig.signature_method = 'RSA-SHA1';","","    } else if (config.basic_auth) {","        if (config.basic_auth.base64) {","            this.basic_auth = {","              base64: config.basic_auth.base64","            }","        } else {","            if (!config.basic_auth.username) {","                throw new Error(errorStrings.NO_USERNAME_ERROR);","            } else if (!config.basic_auth.password) {","                throw new Error(errorStrings.NO_PASSWORD_ERROR);","            }","","            this.basic_auth = {","                user: config.basic_auth.username,","                pass: config.basic_auth.password","            };","        }","    }","","    if (config.cookie_jar) {","        this.cookie_jar = config.cookie_jar;","    }","","    this.applicationProperties = new applicationProperties(this);","    this.attachment = new attachment(this);","    this.auditing = new auditing(this);","    this.avatar = new avatar(this);","    this.board = new board(this);","    this.comment = new comment(this);","    this.component = new component(this);","    this.customFieldOption = new customFieldOption(this);","    this.dashboard = new dashboard(this);","    this.field = new field(this);","    this.filter = new filter(this);","    this.group = new group(this);","    this.groupUserPicker = new groupUserPicker(this);","    this.groups = new groups(this);","    this.issue = new issue(this);","    this.issueLink = new issueLink(this);","    this.issueLinkType = new issueLinkType(this);","    this.issueType = new issueType(this);","    this.jql = new jql(this);","    this.licenseRole = new licenseRole(this);","    this.licenseValidator = new licenseValidator(this);","    this.myPermissions = new myPermissions(this);","    this.myPreferences = new myPreferences(this);","    this.myself = new myself(this);","    this.password = new password(this);","    this.priority = new priority(this);","    this.project = new project(this);","    this.projectCategory = new projectCategory(this);","    this.projectValidate = new projectValidate(this);","    this.reindex = new reindex(this);","    this.resolution = new resolution(this);","    this.screens = new screens(this);","    this.search = new search(this);","    this.securityLevel = new securityLevel(this);","    this.serverInfo = new serverInfo(this);","    this.settings = new settings(this);","    this.sprint = new sprint(this);","    this.status = new status(this);","    this.statusCategory = new statusCategory(this);","    this.user = new user(this);","    this.version = new version(this);","    this.webhook = new webhook(this);","    this.workflow = new workflow(this);","    this.workflowScheme = new workflowScheme(this);","    this.worklog = new worklog(this);","};","","(function () {","","    /**","     * Simple utility to build a REST endpoint URL for the Jira API.","     *","     * @method buildURL","     * @memberOf JiraClient#","     * @param path The path of the URL without concern for the root of the REST API.","     * @returns {string} The constructed URL.","     */","    this.buildURL = function (path) {","        var apiBasePath = this.path_prefix + 'rest/api/';","        var version = this.apiVersion;","        var requestUrl = url.format({","            protocol: this.protocol,","            hostname: this.host,","            port: this.port,","            pathname: apiBasePath + version + path","        });","","        return decodeURIComponent(requestUrl);","    };","","    /**","     * Simple utility to build a REST endpoint URL for the Jira Agile API.","     *","     * @method buildAgileURL","     * @memberOf JiraClient#","     * @param path The path of the URL without concern for the root of the REST API.","     * @returns {string} The constructed URL.","     */","    this.buildAgileURL = function (path) {","        var apiBasePath = this.path_prefix + 'rest/agile/';","        var version = this.agileApiVersion;","        var requestUrl = url.format({","            protocol: this.protocol,","            hostname: this.host,","            port: this.port,","            pathname: apiBasePath + version + path","        });","","        return decodeURIComponent(requestUrl);","    };","","    /**","     * Simple utility to build a REST endpoint URL for the Jira webhook API.","     *","     * @method buildWebhookURL","     * @memberOf JiraClient#","     * @param path The path of the URL without concern for the root of the REST API.","     * @returns {string} The constructed URL.","     */","    this.buildWebhookURL = function (path) {","        var apiBasePath = this.path_prefix + 'rest/webhooks/';","        var version = this.webhookApiVersion;","        var requestUrl = url.format({","            protocol: this.protocol,","            hostname: this.host,","            port: this.port,","            pathname: apiBasePath + version + path","        });","","        return decodeURIComponent(requestUrl);","    };","","    /**","     * Make a request to the Jira API and call back with it's response.","     *","     * @method makeRequest","     * @memberOf JiraClient#","     * @param options The request options.","     * @param [callback] Called with the APIs response.","     * @param {string} [successString] If supplied, this is reported instead of the response body.","     * @return {Promise} Resolved with APIs response or rejected with error","     */","    this.makeRequest = function (options, callback, successString) {","        if (this.oauthConfig) {","            options.oauth = this.oauthConfig;","        } else if (this.basic_auth) {","            if (this.basic_auth.base64) {","              if (!options.headers) {","                options.headers = {}","              }","              options.headers['Authorization'] = 'Basic ' + this.basic_auth.base64","            } else {","              options.auth = this.basic_auth;","            }","        }","        if (this.cookie_jar) {","            options.jar = this.cookie_jar;","        }","","        if (callback) {","            request(options, function (err, response, body) {","                if (err || response.statusCode.toString()[0] != 2) {","                    return callback(err ? err : body, null, response);","                }","","            if (typeof body == 'string') {","                try {","                    body = JSON.parse(body);","                } catch (jsonErr) {","                    return callback(jsonErr, null, response);","                }","            }","","                return callback(null, successString ? successString : body, response);","            });","        } else if (this.promise) {","            return new this.promise(function (resolve, reject) {","","                var req = request(options);","","                req.on('response', function(response) {","","                    // Saving error","                    var error = response.statusCode.toString()[0] !== '2';","","                    // Collecting data","                    var body = [];","                    var push = body.push.bind(body);","                    response.on('data', push);","","                    // Data collected","                    response.on('end', function () {","","                        var result = body.join('');","","                        // Parsing JSON","                        if (result[0] === '[' || result[0] === '{') {","                            try {","                                result = JSON.parse(result);","                            } catch(e) {","                                // nothing to do","                            }","                        }","","                        if (error) {","                            response.body = result;","                            reject(JSON.stringify(response));","                            return;","                        }","","                        resolve(result);","                    });","","                });","","                req.on('error', reject);","","            });","        }","","    };","","}).call(JiraClient.prototype);","","JiraClient.oauth_util = require('./lib/oauth_util');","","exports.oauth_util = oauth_util;",""],"l":{"4":1,"7":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"132":1,"133":0,"134":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"156":0,"157":0,"159":0,"160":0,"161":0,"165":0,"166":0,"167":0,"168":0,"171":0,"178":0,"179":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":0,"226":0,"229":1,"239":1,"240":0,"241":0,"242":0,"249":0,"260":1,"261":0,"262":0,"263":0,"270":0,"281":1,"282":0,"283":0,"284":0,"291":0,"304":1,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"312":0,"314":0,"317":0,"318":0,"321":0,"322":0,"323":0,"324":0,"327":0,"328":0,"329":0,"331":0,"335":0,"337":0,"338":0,"340":0,"342":0,"345":0,"348":0,"349":0,"350":0,"353":0,"355":0,"358":0,"359":0,"360":0,"366":0,"367":0,"368":0,"369":0,"372":0,"377":0,"386":1,"388":1}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/application-properties.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/application-properties.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"ApplicationPropertiesClient","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":49}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":25},"end":{"line":26,"column":51}}},"3":{"name":"(anonymous_3)","line":62,"loc":{"start":{"line":62,"column":23},"end":{"line":62,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":10,"column":0},"end":{"line":72,"column":1}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":33}},"4":{"start":{"line":26,"column":4},"end":{"line":48,"column":6}},"5":{"start":{"line":27,"column":8},"end":{"line":27,"column":20}},"6":{"start":{"line":28,"column":8},"end":{"line":38,"column":9}},"7":{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},"8":{"start":{"line":30,"column":16},"end":{"line":30,"column":34}},"9":{"start":{"line":32,"column":12},"end":{"line":34,"column":13}},"10":{"start":{"line":33,"column":16},"end":{"line":33,"column":46}},"11":{"start":{"line":35,"column":12},"end":{"line":37,"column":13}},"12":{"start":{"line":36,"column":16},"end":{"line":36,"column":52}},"13":{"start":{"line":40,"column":8},"end":{"line":45,"column":10}},"14":{"start":{"line":47,"column":8},"end":{"line":47,"column":62}},"15":{"start":{"line":62,"column":4},"end":{"line":71,"column":6}},"16":{"start":{"line":63,"column":8},"end":{"line":68,"column":10}},"17":{"start":{"line":70,"column":8},"end":{"line":70,"column":82}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":28,"column":8}},{"start":{"line":28,"column":8},"end":{"line":28,"column":8}}]},"2":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":12},"end":{"line":29,"column":12}},{"start":{"line":29,"column":12},"end":{"line":29,"column":12}}]},"3":{"line":32,"type":"if","locations":[{"start":{"line":32,"column":12},"end":{"line":32,"column":12}},{"start":{"line":32,"column":12},"end":{"line":32,"column":12}}]},"4":{"line":35,"type":"if","locations":[{"start":{"line":35,"column":12},"end":{"line":35,"column":12}},{"start":{"line":35,"column":12},"end":{"line":35,"column":12}}]}},"code":["\"use strict\";","","module.exports = ApplicationPropertiesClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/application-properties'"," * @constructor ApplicationPropertiesClient"," * @param {JiraClient} jiraClient"," */","function ApplicationPropertiesClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Gets an application property.","     * @method getProperties","     * @memberOf ApplicationPropertiesClient#","     * @param [opts] The options used to make the request.","     * @param [opts.key] A String containing the property key.","     * @param [opts.permissionLevel] When fetching a list specifies the permission level of all items in the list.","     * @param [opts.keyFilter] When fetching a list allows the list to be filtered by the property's start of key e.g.","     *     \"jira.lf.*\" whould fetch only those permissions that are editable and whose keys start with \"jira.lf.\". This","     *     is a regex","     * @param [callback] Called when the properties are retrieved.","     * @return {Promise} Resolved when the properties are retrieved.","     */","    this.getProperties = function (opts, callback) {","        var qs = {};","        if (opts) {","            if (opts.key) {","                qs.key = opts.key;","            }","            if (opts.keyFilter) {","                qs.keyFilter = opts.keyFilter;","            }","            if (opts.permissionLevel) {","                qs.keyFilter = opts.permissionLevel;","            }","        }","","        var options = {","            uri: this.jiraClient.buildURL('/application-properties'),","            method: 'GET',","            followAllRedirects: true,","            qs: qs","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Modify an application property via PUT. The \"value\" field present in the PUT will override thee existing value.","     *","     * @method getProperties","     * @memberOf ApplicationPropertiesClient#","     * @param opts The options for modifying the application property.","     * @param opts.id The id of the property to be modified","     * @param opts.property The new data for the property.  See","     *     {@link https://docs.atlassian.com/jira/REST/latest/#d2e4891}","     * @param [callback] Called when the property has been modified","     * @return {Promise} Resolved when the property has been modified","     */","    this.setProperty = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/application-properties'),","            method: 'GET',","            followAllRedirects: true,","            body: opts.property","        };","","        return this.jiraClient.makeRequest(options, callback, 'Property Updated');","    };","}"],"l":{"3":1,"10":1,"11":0,"26":0,"27":0,"28":0,"29":0,"30":0,"32":0,"33":0,"35":0,"36":0,"40":0,"47":0,"62":0,"63":0,"70":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/attachment.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/attachment.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"AttachmentClient","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":38}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":25},"end":{"line":26,"column":51}}},"3":{"name":"(anonymous_3)","line":51,"loc":{"start":{"line":51,"column":28},"end":{"line":51,"column":54}}},"4":{"name":"(anonymous_4)","line":77,"loc":{"start":{"line":77,"column":39},"end":{"line":77,"column":65}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":34}},"3":{"start":{"line":13,"column":0},"end":{"line":87,"column":1}},"4":{"start":{"line":14,"column":4},"end":{"line":14,"column":33}},"5":{"start":{"line":26,"column":4},"end":{"line":39,"column":6}},"6":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"7":{"start":{"line":28,"column":12},"end":{"line":28,"column":65}},"8":{"start":{"line":31,"column":8},"end":{"line":36,"column":10}},"9":{"start":{"line":38,"column":8},"end":{"line":38,"column":62}},"10":{"start":{"line":51,"column":4},"end":{"line":64,"column":6}},"11":{"start":{"line":52,"column":8},"end":{"line":54,"column":9}},"12":{"start":{"line":53,"column":12},"end":{"line":53,"column":65}},"13":{"start":{"line":56,"column":8},"end":{"line":61,"column":10}},"14":{"start":{"line":63,"column":8},"end":{"line":63,"column":84}},"15":{"start":{"line":77,"column":4},"end":{"line":86,"column":6}},"16":{"start":{"line":78,"column":8},"end":{"line":83,"column":10}},"17":{"start":{"line":85,"column":8},"end":{"line":85,"column":62}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":27,"column":8}},{"start":{"line":27,"column":8},"end":{"line":27,"column":8}}]},"2":{"line":52,"type":"if","locations":[{"start":{"line":52,"column":8},"end":{"line":52,"column":8}},{"start":{"line":52,"column":8},"end":{"line":52,"column":8}}]}},"code":["\"use strict\";","","var errorStrings = require('./../lib/error');","","module.exports = AttachmentClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/atachment'"," *"," * @constructor AttachmentClient"," * @param {JiraClient} jiraClient"," */","function AttachmentClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns the meta-data for an attachment, including the URI of the actual attached file.","     *","     * @method getAttachment","     * @memberOf AttachmentClient#","     * @param opts The options for the API request.","     * @param opts.attachmentId The id of the attachment to retrieve","     * @param [callback] Called when the attachment metadata is retrieved.","     * @return {Promise} Resolved when the attachment metadata is retrieved.","     */","    this.getAttachment = function (opts, callback) {","        if (!opts.attachmentId) {","            throw new Error(errorStrings.NO_ATTACHMENT_ID_ERROR);","        }","","        var options = {","            uri: this.jiraClient.buildURL('/attachment/' + opts.attachmentId),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Remove an attachment from an issue.","     *","     * @method deleteAttachment","     * @memberOf AttachmentClient#","     * @param opts The options for the API request.","     * @param opts.attachmentId The id of the attachment to delete","     * @param [callback] Called when the attachment is deleted.","     * @return {Promise} Resolved when the attachment is deleted.","     */","    this.deleteAttachment = function (opts, callback) {","        if (!opts.attachmentId) {","            throw new Error(errorStrings.NO_ATTACHMENT_ID_ERROR);","        }","","        var options = {","            uri: this.jiraClient.buildURL('/attachment/' + opts.attachmentId),","            method: 'DELETE',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback, 'Attachment Deleted');","    };","","","    /**","     * Returns the meta informations for an attachments, specifically if they are enabled and the maximum upload size","     * allowed.","     *","     * @method getGlobalAttachmentMetadata","     * @memberOf AttachmentClient#","     * @param opts This API request actually takes no options; this parameter is ignored.","     * @param [callback] Called when the metadata is retrieved.","     * @return {Promise} Resolved when the metadata is retrieved.","     */","    this.getGlobalAttachmentMetadata = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/attachment/meta'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}"],"l":{"3":1,"5":1,"13":1,"14":0,"26":0,"27":0,"28":0,"31":0,"38":0,"51":0,"52":0,"53":0,"56":0,"63":0,"77":0,"78":0,"85":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/lib/error.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/lib/error.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1},"b":{},"f":{},"fnMap":{},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":53}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":75}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":73}},"4":{"start":{"line":6,"column":0},"end":{"line":6,"column":67}},"5":{"start":{"line":7,"column":0},"end":{"line":7,"column":81}},"6":{"start":{"line":8,"column":0},"end":{"line":8,"column":61}},"7":{"start":{"line":9,"column":0},"end":{"line":9,"column":61}},"8":{"start":{"line":10,"column":0},"end":{"line":10,"column":63}},"9":{"start":{"line":11,"column":0},"end":{"line":11,"column":67}},"10":{"start":{"line":12,"column":0},"end":{"line":12,"column":77}},"11":{"start":{"line":13,"column":0},"end":{"line":13,"column":56}},"12":{"start":{"line":14,"column":0},"end":{"line":14,"column":58}},"13":{"start":{"line":15,"column":0},"end":{"line":15,"column":59}},"14":{"start":{"line":16,"column":0},"end":{"line":16,"column":68}},"15":{"start":{"line":17,"column":0},"end":{"line":17,"column":62}},"16":{"start":{"line":18,"column":0},"end":{"line":18,"column":58}},"17":{"start":{"line":19,"column":0},"end":{"line":19,"column":65}},"18":{"start":{"line":20,"column":0},"end":{"line":20,"column":54}},"19":{"start":{"line":21,"column":0},"end":{"line":21,"column":60}},"20":{"start":{"line":22,"column":0},"end":{"line":22,"column":58}},"21":{"start":{"line":23,"column":0},"end":{"line":23,"column":58}},"22":{"start":{"line":24,"column":0},"end":{"line":24,"column":63}},"23":{"start":{"line":25,"column":0},"end":{"line":25,"column":60}},"24":{"start":{"line":26,"column":0},"end":{"line":26,"column":67}},"25":{"start":{"line":27,"column":0},"end":{"line":27,"column":71}},"26":{"start":{"line":28,"column":0},"end":{"line":28,"column":69}},"27":{"start":{"line":29,"column":0},"end":{"line":29,"column":54}},"28":{"start":{"line":30,"column":0},"end":{"line":30,"column":65}},"29":{"start":{"line":31,"column":0},"end":{"line":31,"column":75}},"30":{"start":{"line":32,"column":0},"end":{"line":32,"column":79}},"31":{"start":{"line":33,"column":0},"end":{"line":33,"column":62}},"32":{"start":{"line":34,"column":0},"end":{"line":34,"column":62}},"33":{"start":{"line":35,"column":0},"end":{"line":35,"column":72}},"34":{"start":{"line":36,"column":0},"end":{"line":36,"column":73}}},"branchMap":{},"code":["\"use strict\";","","exports.NO_HOST_ERROR = 'Missing \\'host\\' property.';","exports.NO_CONSUMER_KEY_ERROR = 'Missing \\'oauth_consumer_key\\' property.';","exports.NO_PRIVATE_KEY_ERROR = 'Missing \\'oauth_private_key\\' property.';","exports.NO_OAUTH_TOKEN_ERROR = 'Missing \\'oauth_token\\' property.';","exports.NO_OAUTH_TOKEN_SECRET_ERROR = 'Missing \\'oauth_token_secret\\' property.';","exports.NO_USERNAME_ERROR = 'Missing \\'username\\' property.';","exports.NO_PASSWORD_ERROR = 'Missing \\'password\\' property.';","exports.NO_AUTHENTICATION_ERROR = 'Missing \\'auth\\' property.';","exports.NO_VERIFIER_ERROR = 'Missing \\'oauth_verifier\\' property.';","exports.INVALID_AUTHENTICATION_PROPERTY_ERROR = 'Invalid \\'auth\\' property.';","exports.NO_ISSUE_IDENTIFIER = 'Missing Issue ID or Key';","exports.NO_COMMENT_ID = 'Missing \\'commentID\\' property.';","exports.NO_COMMENT_ERROR = 'Missing \\'comment\\' property.';","exports.NO_NOTIFICATION_ERROR = 'Missing \\'notification\\' property';","exports.NO_GLOBAL_ID_ERROR = 'Missing \\'globalId\\' property.';","exports.NO_LINK_ID_ERROR = 'Missing \\'linkId\\' property.';","exports.NO_TRANSITION_ERROR = 'Missing \\'transition\\' property.';","exports.NO_ISSUE_ERROR = 'Missing \\'issue\\' property';","exports.NO_ASSIGNEE_ERROR = 'Missing \\'assignee\\' property';","exports.NO_WATCHER_ERROR = 'Missing \\'watcher\\' property';","exports.NO_WORKLOG_ERROR = 'Missing \\'worklog\\' property';","exports.NO_WORKLOG_ID_ERROR = 'Missing \\'worklogId\\' property';","exports.NO_FILENAME_ERROR = 'Missing \\'filename\\' property';","exports.NO_PROPERTY_KEY_ERROR = 'Missing \\'propertyKey\\' property';","exports.NO_PROPERTY_VALUE_ERROR = 'Missing \\'propertyValue\\' property';","exports.NO_ATTACHMENT_ID_ERROR = 'Missing \\'attachmentId\\' property';","exports.NO_AUDIT_ERROR = 'Missing \\'audit\\' property';","exports.NO_AVATAR_TYPE_ERROR = 'Missing \\'avatarType\\' property';","exports.NO_COMMENT_PROPERTY_KEY_ERROR = 'Missing \\'propertyKey\\' property';","exports.NO_COMMENT_PROPERTY_VALUE_ERROR = 'Missing \\'propertyValue\\' property';","exports.NO_ISSUE_LINK_ERROR = 'Missing\\'issueLink\\' property';","exports.NO_ISSUE_LINK_ID_ERROR = 'Missing\\'linkId\\' property';","exports.NO_ISSUE_LINK_TYPE_ID = 'Missing \\'issueLinkTypeId\\' property.';","exports.NO_FIELD_OPTION_ID_ERROR = 'Missing \\'fieldOptionId\\' property.';"],"l":{"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/auditing.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/auditing.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"AuditingClient","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":36}}},"2":{"name":"(anonymous_2)","line":35,"loc":{"start":{"line":35,"column":21},"end":{"line":35,"column":47}}},"3":{"name":"(anonymous_3)","line":62,"loc":{"start":{"line":62,"column":23},"end":{"line":62,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":32}},"3":{"start":{"line":12,"column":0},"end":{"line":77,"column":1}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":33}},"5":{"start":{"line":35,"column":4},"end":{"line":51,"column":6}},"6":{"start":{"line":36,"column":8},"end":{"line":48,"column":10}},"7":{"start":{"line":50,"column":8},"end":{"line":50,"column":62}},"8":{"start":{"line":62,"column":4},"end":{"line":76,"column":6}},"9":{"start":{"line":63,"column":8},"end":{"line":65,"column":9}},"10":{"start":{"line":64,"column":12},"end":{"line":64,"column":57}},"11":{"start":{"line":67,"column":8},"end":{"line":73,"column":10}},"12":{"start":{"line":75,"column":8},"end":{"line":75,"column":84}}},"branchMap":{"1":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":8},"end":{"line":63,"column":8}},{"start":{"line":63,"column":8},"end":{"line":63,"column":8}}]}},"code":["\"use strict\";","","var errorStrings = require('./../lib/error');","","module.exports = AuditingClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/auditing'"," * @param {JiraClient} jiraClient"," * @constructor AuditingClient"," */","function AuditingClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns auditing records filtered using provided parameters","     *","     * @method getAudits","     * @memberOf AuditingClient#","     * @param opts The filtering options for retrieving audits.","     * @param [opts.offset] The number of record from which search starts","     * @param [opts.limit] Maximum number of returned results (if is limit is <= 0 or > 1000, it will be set do default","     *     value: 1000)","     * @param [opts.filter] Text query; each record that will be returned must contain the provided text in one of its","     *     fields","     * @param [opts.from] Timestamp in past; 'from' must be less or equal 'to', otherwise the result set will be empty","     *     only records that where created in the same moment or after the 'from' timestamp will be provided in","     *     response","     * @param [opts.to] Timestamp in past; 'from' must be less or equal 'to', otherwise the result set will be empty","     *     only records that where created in the same moment or earlier than the 'to' timestamp will be provided in","     *     response","     * @param [callback] Called when the audits are retrieved.","     * @return {Promise} Resolved when the audits are retrieved.","     */","    this.getAudits = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/auditing/record'),","            json: true,","            followAllRedirects: true,","            method: 'GET',","            qs: {","                offset: opts.offset,","                limit: opts.limit,","                filter: opts.filter,","                from: opts.from,","                to: opts.to","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     *","     * @method createAudit","     * @memberOf AuditingClient#","     * @param opts The request options.","     * @param opts.audit See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2557}","     * @param [callback] Called when the audit is created.","     * @return {Promise} Resolved when the audit is created.","     */","    this.createAudit = function (opts, callback) {","        if (!opts.audit) {","            throw new Error(errorStrings.NO_AUDIT_ERROR);","        }","","        var options = {","            uri: this.jiraClient.buildURL('/auditing/record'),","            json: true,","            followAllRedirects: true,","            method: 'POST',","            body: opts.audit","        };","","        return this.jiraClient.makeRequest(options, callback, 'Audit Record Added');","    };","}"],"l":{"3":1,"5":1,"12":1,"13":0,"35":0,"36":0,"50":0,"62":0,"63":0,"64":0,"67":0,"75":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/avatar.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/avatar.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"AvatarClient","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":34}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":22},"end":{"line":27,"column":48}}},"3":{"name":"(anonymous_3)","line":55,"loc":{"start":{"line":55,"column":33},"end":{"line":55,"column":59}}},"4":{"name":"(anonymous_4)","line":94,"loc":{"start":{"line":94,"column":31},"end":{"line":94,"column":57}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":45}},"4":{"start":{"line":7,"column":0},"end":{"line":7,"column":30}},"5":{"start":{"line":14,"column":0},"end":{"line":112,"column":1}},"6":{"start":{"line":15,"column":4},"end":{"line":15,"column":33}},"7":{"start":{"line":27,"column":4},"end":{"line":39,"column":6}},"8":{"start":{"line":28,"column":8},"end":{"line":30,"column":9}},"9":{"start":{"line":29,"column":12},"end":{"line":29,"column":63}},"10":{"start":{"line":31,"column":8},"end":{"line":36,"column":10}},"11":{"start":{"line":38,"column":8},"end":{"line":38,"column":62}},"12":{"start":{"line":55,"column":4},"end":{"line":80,"column":6}},"13":{"start":{"line":56,"column":8},"end":{"line":58,"column":9}},"14":{"start":{"line":57,"column":12},"end":{"line":57,"column":63}},"15":{"start":{"line":59,"column":8},"end":{"line":59,"column":57}},"16":{"start":{"line":60,"column":8},"end":{"line":60,"column":54}},"17":{"start":{"line":61,"column":8},"end":{"line":76,"column":10}},"18":{"start":{"line":77,"column":8},"end":{"line":77,"column":28}},"19":{"start":{"line":79,"column":8},"end":{"line":79,"column":62}},"20":{"start":{"line":94,"column":4},"end":{"line":111,"column":6}},"21":{"start":{"line":95,"column":8},"end":{"line":97,"column":9}},"22":{"start":{"line":96,"column":12},"end":{"line":96,"column":63}},"23":{"start":{"line":99,"column":8},"end":{"line":108,"column":10}},"24":{"start":{"line":110,"column":8},"end":{"line":110,"column":62}}},"branchMap":{"1":{"line":28,"type":"if","locations":[{"start":{"line":28,"column":8},"end":{"line":28,"column":8}},{"start":{"line":28,"column":8},"end":{"line":28,"column":8}}]},"2":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":56,"column":8}},{"start":{"line":56,"column":8},"end":{"line":56,"column":8}}]},"3":{"line":95,"type":"if","locations":[{"start":{"line":95,"column":8},"end":{"line":95,"column":8}},{"start":{"line":95,"column":8},"end":{"line":95,"column":8}}]}},"code":["\"use strict\";","","var fs = require('fs');","var path = require('path');","var errorStrings = require('./../lib/error');","","module.exports = AvatarClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/avatar'"," * @param {JiraClient} jiraClient"," * @constructor AvatarClient"," */","function AvatarClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns all system avatars of the given type.","     *","     * @method getAvatars","     * @memberOf AvatarClient#","     * @param opts The options to be used in the API request.","     * @param opts.avatarType The avatar type.  May be 'project' or 'user'.","     * @param [callback] Called when the avatars are retrieved.","     * @return {Promise} Resolved when the avatars are retrieved.","     */","    this.getAvatars = function (opts, callback) {","        if (!opts.avatarType) {","            throw new Error(errorStrings.NO_AVATAR_TYPE_ERROR);","        }","        var options = {","            method: 'GET',","            json: true,","            followAllRedirects: true,","            uri: this.jiraClient.buildURL('/avatar/' + opts.avatarType + '/system')","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Creates a temporary avatar.  This function doesn't seem to work the way the Jira API describes, so for now","     * just don't use it.","     *","     * @method createTemporaryAvatar","     * @memberOf AvatarClient#","     * @param opts The options to be used in the API request.","     * @param opts.avatarType The avatar type.  May be 'project' or 'user'.","     * @param opts.avatarFilename The name of the file being uploaded","     * @param opts.avatarFileSize The size of the file","     * @param opts.avatarFilePath The path to the avatar file.","     * @param [callback] Called when the avatar is created.","     * @return {Promise} Resolved when the avatar is created.","     */","    this.createTemporaryAvatar = function (opts, callback) {","        if (!opts.avatarType) {","            throw new Error(errorStrings.NO_AVATAR_TYPE_ERROR);","        }","        var size = fs.statSync(opts.avatarFilePath).size;","        var name = path.basename(opts.avatarFilePath);","        var options = {","            method: 'POST',","            json: true,","            followAllRedirects: true,","            uri: this.jiraClient.buildURL('/avatar/' + opts.avatarType + '/temporary'),","            headers: {","                \"X-Atlassian-Token\": \"no-check\"","            },","            qs: {","                filename: name,","                size: size","            },","            formData: {","                file: fs.createReadStream(opts.avatarFilePath)","            }","        };","        delete options.body;","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Updates the cropping instructions of the temporary avatar.  This function doesn't seem to work the way the Jira","     * API describes, so for now just don't use it.","     *","     * @method cropTemporaryAvatar","     * @memberOf AvatarClient#","     * @param {Object} opts The options to be used in the API request.","     * @param {string} opts.avatarType The avatar type.  May be 'project' or 'user'.","     * @param {Object} opts.crop See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3316}","     * @param [callback] Called when the avatar has been cropped.","     * @return {Promise} Resolved when the avatar has been cropped.","     */","    this.cropTemporaryAvatar = function (opts, callback) {","        if (!opts.avatarType) {","            throw new Error(errorStrings.NO_AVATAR_TYPE_ERROR);","        }","","        var options = {","            method: 'POST',","            json: true,","            followAllRedirects: true,","            uri: this.jiraClient.buildURL('/avatar/' + opts.avatarType + '/temporaryCrop'),","            headers: {","                \"X-Atlassian-Token\": \"no-check\"","            },","            body: opts.crop","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}"],"l":{"3":1,"4":1,"5":1,"7":1,"14":1,"15":0,"27":0,"28":0,"29":0,"31":0,"38":0,"55":0,"56":0,"57":0,"59":0,"60":0,"61":0,"77":0,"79":0,"94":0,"95":0,"96":0,"99":0,"110":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/board.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/board.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"AgileBoardClient","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":38}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":22},"end":{"line":30,"column":48}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":18},"end":{"line":56,"column":44}}},"4":{"name":"(anonymous_4)","line":90,"loc":{"start":{"line":90,"column":27},"end":{"line":90,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"2":{"start":{"line":10,"column":0},"end":{"line":104,"column":1}},"3":{"start":{"line":11,"column":2},"end":{"line":11,"column":31}},"4":{"start":{"line":30,"column":2},"end":{"line":44,"column":4}},"5":{"start":{"line":31,"column":4},"end":{"line":41,"column":6}},"6":{"start":{"line":43,"column":6},"end":{"line":43,"column":60}},"7":{"start":{"line":56,"column":2},"end":{"line":70,"column":4}},"8":{"start":{"line":57,"column":4},"end":{"line":67,"column":6}},"9":{"start":{"line":69,"column":6},"end":{"line":69,"column":60}},"10":{"start":{"line":90,"column":2},"end":{"line":103,"column":4}},"11":{"start":{"line":91,"column":4},"end":{"line":100,"column":6}},"12":{"start":{"line":102,"column":6},"end":{"line":102,"column":60}}},"branchMap":{},"code":["\"use strict\";","","module.exports = AgileBoardClient;","","/**"," * Used to access Jira REST endpoints in '/rest/agile/1.0/dashboard'"," * @param {JiraClient} jiraClient"," * @constructor AgileBoardClient"," */","function AgileBoardClient(jiraClient) {","  this.jiraClient = jiraClient;","","  /**","   * Get a list of all dashboards, optionally filtering them.","   *","   * @method getAllBoards","   * @memberOf AgileBoardClient#","   * @param opts The request options to send to the Jira API","   * @param [opts.type] Limits returning boards of a specific type: `scrum` or `kanban`.","   * @param [opts.startAt] The index of the first dashboard to return (0-based). must be 0 or a multiple of","   *     maxResults","   * @param [opts.maxResults] A hint as to the the maximum number of dashboards to return in each call. Note that the","   *     JIRA server reserves the right to impose a maxResults limit that is lower than the value that a client","   *     provides, dues to lack or resources or any other condition. When this happens, your results will be","   *     truncated. Callers should always check the returned maxResults to determine the value that is effectively","   *     being used.","   * @param [callback] Called when the dashboards have been retrieved.","   * @return {Promise} Resolved when the dashboards have been retrieved.","   */","  this.getAllBoards = function (opts, callback) {","    var options = {","      uri: this.jiraClient.buildAgileURL('/board'),","      method: 'GET',","      json: true,","      followAllRedirects: true,","      qs: {","        type: opts.type,","        startAt: opts.startAt,","        maxResults: opts.maxResults","      }","    };","","      return this.jiraClient.makeRequest(options, callback);","  };","","  /**","   * Get a single agile board.","   *","   * @method getBoard","   * @memberOf AgileBoardClient#","   * @param opts The request options sent to the Jira API.","   * @param opts.boardId The agile board id.","   * @param [callback] Called when the dashboard has been retrieved","   * @return {Promise} Resolved when the dashboard has been retrieved","   */","  this.getBoard = function (opts, callback) {","    var options = {","      uri: this.jiraClient.buildURL('/board/' + opts.boardId),","      method: 'GET',","      json: true,","      followAllRedirects: true,","      qs: {","        filter: opts.filter,","        startAt: opts.startAt,","        maxResults: opts.maxResults","      }","    };","","      return this.jiraClient.makeRequest(options, callback);","  };","","","  /**","   * Get a list of all issues associated with an agile board","   *","   * @method getIssuesForBoard","   * @memberOf AgileBoardClient#","   * @param opts The request options to send to the Jira API","   * @param opts.boardId The agile board id.","   * @param [opts.startAt] The index of the first dashboard to return (0-based). must be 0 or a multiple of","   *     maxResults","   * @param [opts.maxResults] A hint as to the the maximum number of dashboards to return in each call. Note that the","   *     JIRA server reserves the right to impose a maxResults limit that is lower than the value that a client","   *     provides, dues to lack or resources or any other condition. When this happens, your results will be","   *     truncated. Callers should always check the returned maxResults to determine the value that is effectively","   *     being used.","   * @param [callback] Called when the dashboards have been retrieved.","   * @return {Promise} Resolved when the dashboards have been retrieved.","   */","  this.getIssuesForBoard = function (opts, callback) {","    var options = {","      uri: this.jiraClient.buildAgileURL('/board/' + opts.boardId + '/issue'),","      method: 'GET',","      json: true,","      followAllRedirects: true,","      qs: {","        startAt: opts.startAt,","        maxResults: opts.maxResults","      }","    };","","      return this.jiraClient.makeRequest(options, callback);","  };","}",""],"l":{"3":1,"10":1,"11":0,"30":0,"31":0,"43":0,"56":0,"57":0,"69":0,"90":0,"91":0,"102":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/comment.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/comment.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"fnMap":{"1":{"name":"CommentClient","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":35}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":34},"end":{"line":25,"column":60}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":30},"end":{"line":45,"column":56}}},"4":{"name":"(anonymous_4)","line":67,"loc":{"start":{"line":67,"column":30},"end":{"line":67,"column":56}}},"5":{"name":"(anonymous_5)","line":87,"loc":{"start":{"line":87,"column":33},"end":{"line":87,"column":59}}},"6":{"name":"(anonymous_6)","line":108,"loc":{"start":{"line":108,"column":31},"end":{"line":108,"column":71}}},"7":{"name":"(anonymous_7)","line":118,"loc":{"start":{"line":118,"column":32},"end":{"line":118,"column":49}}},"8":{"name":"(anonymous_8)","line":125,"loc":{"start":{"line":125,"column":32},"end":{"line":125,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":31}},"3":{"start":{"line":12,"column":0},"end":{"line":139,"column":1}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":33}},"5":{"start":{"line":25,"column":4},"end":{"line":28,"column":6}},"6":{"start":{"line":26,"column":8},"end":{"line":26,"column":64}},"7":{"start":{"line":27,"column":8},"end":{"line":27,"column":62}},"8":{"start":{"line":45,"column":4},"end":{"line":53,"column":6}},"9":{"start":{"line":46,"column":8},"end":{"line":50,"column":9}},"10":{"start":{"line":47,"column":12},"end":{"line":47,"column":72}},"11":{"start":{"line":48,"column":15},"end":{"line":50,"column":9}},"12":{"start":{"line":49,"column":12},"end":{"line":49,"column":74}},"13":{"start":{"line":51,"column":8},"end":{"line":51,"column":104}},"14":{"start":{"line":52,"column":8},"end":{"line":52,"column":81}},"15":{"start":{"line":67,"column":4},"end":{"line":73,"column":6}},"16":{"start":{"line":68,"column":8},"end":{"line":70,"column":9}},"17":{"start":{"line":69,"column":12},"end":{"line":69,"column":72}},"18":{"start":{"line":71,"column":8},"end":{"line":71,"column":84}},"19":{"start":{"line":72,"column":8},"end":{"line":72,"column":62}},"20":{"start":{"line":87,"column":4},"end":{"line":93,"column":6}},"21":{"start":{"line":88,"column":8},"end":{"line":90,"column":9}},"22":{"start":{"line":89,"column":12},"end":{"line":89,"column":72}},"23":{"start":{"line":91,"column":8},"end":{"line":91,"column":87}},"24":{"start":{"line":92,"column":8},"end":{"line":92,"column":90}},"25":{"start":{"line":108,"column":4},"end":{"line":138,"column":5}},"26":{"start":{"line":109,"column":8},"end":{"line":111,"column":9}},"27":{"start":{"line":110,"column":12},"end":{"line":110,"column":56}},"28":{"start":{"line":112,"column":8},"end":{"line":112,"column":68}},"29":{"start":{"line":113,"column":8},"end":{"line":113,"column":25}},"30":{"start":{"line":113,"column":17},"end":{"line":113,"column":25}},"31":{"start":{"line":114,"column":8},"end":{"line":114,"column":29}},"32":{"start":{"line":114,"column":19},"end":{"line":114,"column":29}},"33":{"start":{"line":116,"column":8},"end":{"line":121,"column":9}},"34":{"start":{"line":117,"column":12},"end":{"line":117,"column":27}},"35":{"start":{"line":118,"column":12},"end":{"line":120,"column":15}},"36":{"start":{"line":119,"column":16},"end":{"line":119,"column":40}},"37":{"start":{"line":123,"column":8},"end":{"line":128,"column":9}},"38":{"start":{"line":124,"column":12},"end":{"line":124,"column":27}},"39":{"start":{"line":125,"column":12},"end":{"line":127,"column":15}},"40":{"start":{"line":126,"column":16},"end":{"line":126,"column":37}},"41":{"start":{"line":130,"column":8},"end":{"line":137,"column":10}}},"branchMap":{"1":{"line":46,"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":46,"column":8}},{"start":{"line":46,"column":8},"end":{"line":46,"column":8}}]},"2":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":15},"end":{"line":48,"column":15}},{"start":{"line":48,"column":15},"end":{"line":48,"column":15}}]},"3":{"line":68,"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":68,"column":8}},{"start":{"line":68,"column":8},"end":{"line":68,"column":8}}]},"4":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":8}},{"start":{"line":88,"column":8},"end":{"line":88,"column":8}}]},"5":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":8},"end":{"line":109,"column":8}},{"start":{"line":109,"column":8},"end":{"line":109,"column":8}}]},"6":{"line":113,"type":"if","locations":[{"start":{"line":113,"column":8},"end":{"line":113,"column":8}},{"start":{"line":113,"column":8},"end":{"line":113,"column":8}}]},"7":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":8},"end":{"line":114,"column":8}},{"start":{"line":114,"column":8},"end":{"line":114,"column":8}}]},"8":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":8},"end":{"line":116,"column":8}},{"start":{"line":116,"column":8},"end":{"line":116,"column":8}}]},"9":{"line":123,"type":"if","locations":[{"start":{"line":123,"column":8},"end":{"line":123,"column":8}},{"start":{"line":123,"column":8},"end":{"line":123,"column":8}}]}},"code":["\"use strict\";","","var errorStrings = require('./../lib/error');","","module.exports = CommentClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/comment'"," * @constructor CommentClient"," * @param {JiraClient} jiraClient"," */","function CommentClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns the keys of all properties for the comment identified by the key or by the id.","     *","     * @method getCommentPropertyKeys","     * @memberOf CommentClient#","     * @param opts The options passed in the request to the API.","     * @param opts.commentId The id of the comment from which keys will be returned.","     * @param [callback] Called when the keys have been retrieved.","     * @return {Promise} Resolved when the keys have been retrieved.","     */","    this.getCommentPropertyKeys = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Sets the value of the specified comment's property.","     *","     * You can use this resource to store a custom data against the comment identified by the key or by the id. The","     * user who stores the data is required to have permissions to administer the comment.","     *","     * @method setCommentProperty","     * @memberOf CommentClient#","     * @param opts The options passed in the request to the API.","     * @param opts.commentId The id of the comment from which keys will be returned.","     * @param opts.propertyKey The key of the property to be edited.","     * @param opts.propertyValue The new value of the property.","     * @param [callback] Called when the property has been edited.","     * @return {Promise} Resolved when the property has been edited.","     */","    this.setCommentProperty = function (opts, callback) {","        if (!opts.propertyKey) {","            throw new Error(errorStrings.NO_COMMENT_PROPERTY_KEY_ERROR);","        } else if (!opts.propertyValue) {","            throw new Error(errorStrings.NO_COMMENT_PROPERTY_VALUE_ERROR);","        }","        var options = this.buildRequestOptions(opts, '/' + opts.propertyKey, 'PUT', opts.propertyValue);","        return this.jiraClient.makeRequest(options, callback, 'Property Edited');","    };","","    /**","     * Returns the value of the property with a given key from the comment identified by the key or by the id. The user","     * who retrieves the property is required to have permissions to read the comment.","     *","     * @method getCommentProperty","     * @memberOf CommentClient#","     * @param opts The options passed in the request to the API.","     * @param opts.commentId The id of the comment from which keys will be returned.","     * @param opts.propertyKey The key of the property to be edited.","     * @param [callback] Called when the property has been retrieved.","     * @return {Promise} Resolved when the property has been retrieved.","     */","    this.getCommentProperty = function (opts, callback) {","        if (!opts.propertyKey) {","            throw new Error(errorStrings.NO_COMMENT_PROPERTY_KEY_ERROR);","        }","        var options = this.buildRequestOptions(opts, '/' + opts.propertyKey, 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Removes the property from the comment identified by the key or by the id. Ths user removing the property is","     * required to have permissions to administer the comment.","     *","     * @method deleteCommentProperty","     * @memberOf CommentClient#","     * @param opts The options passed in the request to the API.","     * @param opts.commentId The id of the comment from which keys will be returned.","     * @param opts.propertyKey The key of the property to be edited.","     * @param [callback] Called when the property has been retrieved.","     * @return {Promise} Resolved when the property has been retrieved.","     */","    this.deleteCommentProperty = function (opts, callback) {","        if (!opts.propertyKey) {","            throw new Error(errorStrings.NO_COMMENT_PROPERTY_KEY_ERROR);","        }","        var options = this.buildRequestOptions(opts, '/' + opts.propertyKey, 'DELETE');","        return this.jiraClient.makeRequest(options, callback, 'Comment property deleted');","    };","","    /**","     * Build out the request options necessary to make a particular API call.","     *","     * @private","     * @method buildRequestOptions","     * @memberOf CommentClient#","     * @param {Object} opts The arguments passed to the method.","     * @param {string} path The path of the endpoint following /issue/{idOrKey}","     * @param {string} method The request method.","     * @param {Object} [body] The request body, if any.","     * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.","     * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}","     */","    this.buildRequestOptions = function (opts, path, method, body, qs) {","        if (!opts.commentId) {","            throw new Error(errorStrings.NO_COMMENT_ID);","        }","        var basePath = '/comment/' + opts.commentId + \"/properties\";","        if (!qs) qs = {};","        if (!body) body = {};","","        if (opts.fields) {","            qs.fields = '';","            opts.fields.forEach(function (field) {","                qs.fields += field + ','","            });","        }","","        if (opts.expand) {","            qs.expand = '';","            opts.expand.forEach(function (ex) {","                qs.expand += ex + ','","            });","        }","","        return {","            uri: this.jiraClient.buildURL(basePath + path),","            method: method,","            body: body,","            qs: qs,","            followAllRedirects: true,","            json: true","        };","    }","}"],"l":{"3":1,"5":1,"12":1,"13":0,"25":0,"26":0,"27":0,"45":0,"46":0,"47":0,"48":0,"49":0,"51":0,"52":0,"67":0,"68":0,"69":0,"71":0,"72":0,"87":0,"88":0,"89":0,"91":0,"92":0,"108":0,"109":0,"110":0,"112":0,"113":0,"114":0,"116":0,"117":0,"118":0,"119":0,"123":0,"124":0,"125":0,"126":0,"130":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/component.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/component.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"ComponentClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":37}}},"2":{"name":"(anonymous_2)","line":24,"loc":{"start":{"line":24,"column":27},"end":{"line":24,"column":53}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":25},"end":{"line":50,"column":51}}},"4":{"name":"(anonymous_4)","line":72,"loc":{"start":{"line":72,"column":24},"end":{"line":72,"column":50}}},"5":{"name":"(anonymous_5)","line":95,"loc":{"start":{"line":95,"column":27},"end":{"line":95,"column":53}}},"6":{"name":"(anonymous_6)","line":116,"loc":{"start":{"line":116,"column":33},"end":{"line":116,"column":59}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":33}},"2":{"start":{"line":11,"column":0},"end":{"line":126,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":24,"column":4},"end":{"line":34,"column":6}},"5":{"start":{"line":25,"column":8},"end":{"line":31,"column":10}},"6":{"start":{"line":33,"column":8},"end":{"line":33,"column":62}},"7":{"start":{"line":50,"column":4},"end":{"line":60,"column":6}},"8":{"start":{"line":51,"column":8},"end":{"line":57,"column":10}},"9":{"start":{"line":59,"column":8},"end":{"line":59,"column":62}},"10":{"start":{"line":72,"column":4},"end":{"line":81,"column":6}},"11":{"start":{"line":73,"column":8},"end":{"line":78,"column":10}},"12":{"start":{"line":80,"column":8},"end":{"line":80,"column":62}},"13":{"start":{"line":95,"column":4},"end":{"line":104,"column":6}},"14":{"start":{"line":96,"column":8},"end":{"line":101,"column":10}},"15":{"start":{"line":103,"column":8},"end":{"line":103,"column":91}},"16":{"start":{"line":116,"column":4},"end":{"line":125,"column":5}},"17":{"start":{"line":117,"column":8},"end":{"line":122,"column":10}},"18":{"start":{"line":124,"column":8},"end":{"line":124,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = ComponentClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/component'"," *"," * @param {JiraClient} jiraClient"," * @constructor ComponentClient"," */","function ComponentClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Create a component via POST.","     *","     * @method createComponent","     * @memberOf ComponentClient#","     * @param opts The request options sent to the Jira API","     * @param opts.component See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3871}","     * @param [callback] Called when the component has been created.","     * @return {Promise} Resolved when the component has been created.","     */","    this.createComponent = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/component'),","            method: 'POST',","            json: true,","            followAllRedirects: true,","            body: opts.component","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Modify a component via PUT. Any fields present in the PUT will override existing values. As a convenience, if a","     * field is not present, it is silently ignored. If leadUserName is an empty string (\"\") the component lead will be","     * removed.","     *","     * @method editComponent","     * @memberOf ComponentClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.id The id of the component to edit.","     * @param opts.component The new data to place in the component.  See","     *      {@link https://docs.atlassian.com/jira/REST/latest/#d2e3939}","     * @param [callback] Called when the component has beed edited.","     * @return {Promise} Resolved when the component has beed edited.","     */","    this.editComponent = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/component/' + opts.id),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            body: opts.component","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get a project component.","     *","     * @method getComponent","     * @memberOf ComponentClient#","     * @param opts The options sent to the Jira API","     * @param opts.id The id of the component to edit.","     * @param [callback] Called when the component has been retrieved.","     * @return {Promise} Resolved when the component has been retrieved.","     */","    this.getComponent = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/component/' + opts.id),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Delete a project component.","     *","     * @method deleteComponent","     * @memberOf ComponentClient#","     * @param opts The options sent to the Jira API","     * @param opts.id The id of the component to edit.","     * @param [opts.moveIssuesTo] The new component applied to issues whose 'id' component will be deleted. If this","     *     value is null, then the 'id' component is simply removed from the related isues.","     * @param [callback] Called when the component has been deleted.","     * @return {Promise} Resolved when the component has been deleted.","     */","    this.deleteComponent = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/component/' + opts.id),","            method: 'DELETE',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback, 'Project Component Deleted');","    };","","    /**","     * Get counts of issues related to this component.","     *","     * @method getRelatedIssueCounts","     * @memberOf ComponentClient#","     * @param opts The options sent to the Jira API","     * @param opts.id The id of the component to edit.","     * @param [callback] Called when the count has been retrieved.","     * @return {Promise} Resolved when the count has been retrieved.","     */","    this.getRelatedIssueCounts = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/component/' + opts.id + '/relatedIssueCounts'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"11":1,"12":0,"24":0,"25":0,"33":0,"50":0,"51":0,"59":0,"72":0,"73":0,"80":0,"95":0,"96":0,"103":0,"116":0,"117":0,"124":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/customFieldOption.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/customFieldOption.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"CustomFieldOptionClient","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":45}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":32},"end":{"line":26,"column":58}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":41}},"3":{"start":{"line":13,"column":0},"end":{"line":40,"column":1}},"4":{"start":{"line":14,"column":4},"end":{"line":14,"column":33}},"5":{"start":{"line":26,"column":4},"end":{"line":39,"column":6}},"6":{"start":{"line":27,"column":8},"end":{"line":29,"column":9}},"7":{"start":{"line":28,"column":12},"end":{"line":28,"column":67}},"8":{"start":{"line":31,"column":8},"end":{"line":36,"column":10}},"9":{"start":{"line":38,"column":8},"end":{"line":38,"column":62}}},"branchMap":{"1":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":8},"end":{"line":27,"column":8}},{"start":{"line":27,"column":8},"end":{"line":27,"column":8}}]}},"code":["\"use strict\";","","var errorStrings = require('./../lib/error');","","module.exports = CustomFieldOptionClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/customFieldOptions'"," *"," * @param {JiraClient} jiraClient"," * @constructor CustomFieldOptionClient"," */","function CustomFieldOptionClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns a full representation of the Custom Field Option that has the given id.","     *","     * @method getCustomFieldOption","     * @memberOf CustomFieldOptionClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.fieldOptionId A String containing an Custom Field Option id","     * @param [callback] Called when data has been retrieved","     * @return {Promise} Resolved when data has been retrieved","     */","    this.getCustomFieldOption = function (opts, callback) {","        if (!opts.fieldOptionId) {","            throw new Error(errorStrings.NO_FIELD_OPTION_ID_ERROR);","        }","","        var options = {","            uri: this.jiraClient.buildURL('/customFieldOption/' + opts.fieldOptionId),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}"],"l":{"3":1,"5":1,"13":1,"14":0,"26":0,"27":0,"28":0,"31":0,"38":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/dashboard.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/dashboard.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"DashboardClient","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":37}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":28},"end":{"line":32,"column":54}}},"3":{"name":"(anonymous_3)","line":58,"loc":{"start":{"line":58,"column":24},"end":{"line":58,"column":50}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":33}},"2":{"start":{"line":10,"column":0},"end":{"line":73,"column":1}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":33}},"4":{"start":{"line":32,"column":4},"end":{"line":46,"column":6}},"5":{"start":{"line":33,"column":8},"end":{"line":43,"column":10}},"6":{"start":{"line":45,"column":8},"end":{"line":45,"column":62}},"7":{"start":{"line":58,"column":4},"end":{"line":72,"column":5}},"8":{"start":{"line":59,"column":8},"end":{"line":69,"column":10}},"9":{"start":{"line":71,"column":8},"end":{"line":71,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = DashboardClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/dashboard'"," * @param {JiraClient} jiraClient"," * @constructor DashboardClient"," */","function DashboardClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Get a list of all dashboards, optionally filtering them.","     *","     * @method getAllDashboards","     * @memberOf DashboardClient#","     * @param opts The request options to send to the Jira API","     * @param [opts.filter] An optional filter that is applied to the list of dashboards. Valid values include","     *     \"favourite\" for returning only favourite dashboards, and \"my\" for returning dashboards that are owned by the","     *     calling user.","     * @param [opts.startAt] The index of the first dashboard to return (0-based). must be 0 or a multiple of","     *     maxResults","     * @param [opts.maxResults] A hint as to the the maximum number of dashboards to return in each call. Note that the","     *     JIRA server reserves the right to impose a maxResults limit that is lower than the value that a client","     *     provides, dues to lack or resources or any other condition. When this happens, your results will be","     *     truncated. Callers should always check the returned maxResults to determine the value that is effectively","     *     being used.","     * @param [callback] Called when the dashboards have been retrieved.","     * @return {Promise} Resolved when the dashboards have been retrieved.","     */","    this.getAllDashboards = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/dashboard'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                filter: opts.filter,","                startAt: opts.startAt,","                maxResults: opts.maxResults","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get a single dashboard.","     *","     * @method getDashboard","     * @memberOf DashboardClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.dashboardId The dashboard id.","     * @param [callback] Called when the dashboard has been retrieved","     * @return {Promise} Resolved when the dashboard has been retrieved","     */","    this.getDashboard = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/dashboard/' + opts.dashboardId),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                filter: opts.filter,","                startAt: opts.startAt,","                maxResults: opts.maxResults","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"10":1,"11":0,"32":0,"33":0,"45":0,"58":0,"59":0,"71":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/field.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/field.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"FieldClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":33}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":50}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":29},"end":{"line":44,"column":55}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":29}},"2":{"start":{"line":11,"column":0},"end":{"line":55,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":32,"column":6}},"5":{"start":{"line":24,"column":8},"end":{"line":29,"column":10}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":62}},"7":{"start":{"line":44,"column":4},"end":{"line":54,"column":5}},"8":{"start":{"line":45,"column":8},"end":{"line":51,"column":10}},"9":{"start":{"line":53,"column":8},"end":{"line":53,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = FieldClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/field'"," *"," * @param {JiraClient} jiraClient"," * @constructor FieldClient"," */","function FieldClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns a list of all fields, both System and Custom","     *","     * @method getAllFields","     * @memberOf FieldClient#","     * @param opts Ignored","     * @param [callback] Called when the fields have been retrieved.","     * @return {Promise} Resolved when the fields have been retrieved.","     */","    this.getAllFields = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/field'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Creates a custom field using a definition (object encapsulating custom field data)","     *","     * @method createCustomField","     * @memberOf FieldClient#","     * @param opts The request options to send to Jira","     * @param opts.field See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3412}","     * @param [callback] Called when the custom field has been created.","     * @return {Promise} Resolved when the custom field has been created.","     */","    this.createCustomField = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/field'),","            method: 'POST',","            json: true,","            followAllRedirects: true,","            body: opts.field","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"11":1,"12":0,"23":0,"24":0,"31":0,"44":0,"45":0,"53":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/filter.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/filter.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"FilterClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}}},"2":{"name":"(anonymous_2)","line":27,"loc":{"start":{"line":27,"column":24},"end":{"line":27,"column":50}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":32},"end":{"line":39,"column":46}}},"4":{"name":"(anonymous_4)","line":57,"loc":{"start":{"line":57,"column":21},"end":{"line":57,"column":47}}},"5":{"name":"(anonymous_5)","line":74,"loc":{"start":{"line":74,"column":24},"end":{"line":74,"column":50}}},"6":{"name":"(anonymous_6)","line":89,"loc":{"start":{"line":89,"column":24},"end":{"line":89,"column":50}}},"7":{"name":"(anonymous_7)","line":105,"loc":{"start":{"line":105,"column":28},"end":{"line":105,"column":54}}},"8":{"name":"(anonymous_8)","line":122,"loc":{"start":{"line":122,"column":28},"end":{"line":122,"column":54}}},"9":{"name":"(anonymous_9)","line":138,"loc":{"start":{"line":138,"column":30},"end":{"line":138,"column":56}}},"10":{"name":"(anonymous_10)","line":152,"loc":{"start":{"line":152,"column":32},"end":{"line":152,"column":58}}},"11":{"name":"(anonymous_11)","line":173,"loc":{"start":{"line":173,"column":32},"end":{"line":173,"column":58}}},"12":{"name":"(anonymous_12)","line":195,"loc":{"start":{"line":195,"column":30},"end":{"line":195,"column":56}}},"13":{"name":"(anonymous_13)","line":221,"loc":{"start":{"line":221,"column":31},"end":{"line":221,"column":71}}},"14":{"name":"(anonymous_14)","line":228,"loc":{"start":{"line":228,"column":32},"end":{"line":228,"column":49}}},"15":{"name":"(anonymous_15)","line":236,"loc":{"start":{"line":236,"column":32},"end":{"line":236,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":11,"column":0},"end":{"line":251,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":27,"column":4},"end":{"line":45,"column":6}},"5":{"start":{"line":28,"column":8},"end":{"line":35,"column":10}},"6":{"start":{"line":37,"column":8},"end":{"line":42,"column":9}},"7":{"start":{"line":38,"column":12},"end":{"line":38,"column":35}},"8":{"start":{"line":39,"column":12},"end":{"line":41,"column":15}},"9":{"start":{"line":40,"column":16},"end":{"line":40,"column":45}},"10":{"start":{"line":44,"column":8},"end":{"line":44,"column":62}},"11":{"start":{"line":57,"column":4},"end":{"line":60,"column":6}},"12":{"start":{"line":58,"column":8},"end":{"line":58,"column":64}},"13":{"start":{"line":59,"column":8},"end":{"line":59,"column":62}},"14":{"start":{"line":74,"column":4},"end":{"line":77,"column":6}},"15":{"start":{"line":75,"column":8},"end":{"line":75,"column":77}},"16":{"start":{"line":76,"column":8},"end":{"line":76,"column":62}},"17":{"start":{"line":89,"column":4},"end":{"line":92,"column":6}},"18":{"start":{"line":90,"column":8},"end":{"line":90,"column":67}},"19":{"start":{"line":91,"column":8},"end":{"line":91,"column":80}},"20":{"start":{"line":105,"column":4},"end":{"line":108,"column":6}},"21":{"start":{"line":106,"column":8},"end":{"line":106,"column":72}},"22":{"start":{"line":107,"column":8},"end":{"line":107,"column":62}},"23":{"start":{"line":122,"column":4},"end":{"line":126,"column":6}},"24":{"start":{"line":123,"column":8},"end":{"line":123,"column":43}},"25":{"start":{"line":124,"column":8},"end":{"line":124,"column":78}},"26":{"start":{"line":125,"column":8},"end":{"line":125,"column":81}},"27":{"start":{"line":138,"column":4},"end":{"line":141,"column":6}},"28":{"start":{"line":139,"column":8},"end":{"line":139,"column":75}},"29":{"start":{"line":140,"column":8},"end":{"line":140,"column":79}},"30":{"start":{"line":152,"column":4},"end":{"line":161,"column":6}},"31":{"start":{"line":153,"column":8},"end":{"line":158,"column":10}},"32":{"start":{"line":160,"column":8},"end":{"line":160,"column":62}},"33":{"start":{"line":173,"column":4},"end":{"line":184,"column":6}},"34":{"start":{"line":174,"column":8},"end":{"line":182,"column":10}},"35":{"start":{"line":183,"column":8},"end":{"line":183,"column":62}},"36":{"start":{"line":195,"column":4},"end":{"line":203,"column":6}},"37":{"start":{"line":196,"column":8},"end":{"line":201,"column":10}},"38":{"start":{"line":202,"column":8},"end":{"line":202,"column":62}},"39":{"start":{"line":221,"column":4},"end":{"line":250,"column":6}},"40":{"start":{"line":222,"column":8},"end":{"line":222,"column":50}},"41":{"start":{"line":223,"column":8},"end":{"line":223,"column":25}},"42":{"start":{"line":223,"column":17},"end":{"line":223,"column":25}},"43":{"start":{"line":224,"column":8},"end":{"line":224,"column":29}},"44":{"start":{"line":224,"column":19},"end":{"line":224,"column":29}},"45":{"start":{"line":226,"column":8},"end":{"line":232,"column":9}},"46":{"start":{"line":227,"column":12},"end":{"line":227,"column":27}},"47":{"start":{"line":228,"column":12},"end":{"line":230,"column":15}},"48":{"start":{"line":229,"column":16},"end":{"line":229,"column":40}},"49":{"start":{"line":231,"column":12},"end":{"line":231,"column":47}},"50":{"start":{"line":234,"column":8},"end":{"line":240,"column":9}},"51":{"start":{"line":235,"column":12},"end":{"line":235,"column":27}},"52":{"start":{"line":236,"column":12},"end":{"line":238,"column":15}},"53":{"start":{"line":237,"column":16},"end":{"line":237,"column":37}},"54":{"start":{"line":239,"column":12},"end":{"line":239,"column":47}},"55":{"start":{"line":242,"column":8},"end":{"line":249,"column":10}}},"branchMap":{"1":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":37,"column":8}},{"start":{"line":37,"column":8},"end":{"line":37,"column":8}}]},"2":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":8},"end":{"line":223,"column":8}},{"start":{"line":223,"column":8},"end":{"line":223,"column":8}}]},"3":{"line":224,"type":"if","locations":[{"start":{"line":224,"column":8},"end":{"line":224,"column":8}},{"start":{"line":224,"column":8},"end":{"line":224,"column":8}}]},"4":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":8},"end":{"line":226,"column":8}},{"start":{"line":226,"column":8},"end":{"line":226,"column":8}}]},"5":{"line":234,"type":"if","locations":[{"start":{"line":234,"column":8},"end":{"line":234,"column":8}},{"start":{"line":234,"column":8},"end":{"line":234,"column":8}}]}},"code":["\"use strict\";","","module.exports = FilterClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/filter'"," *"," * @param {JiraClient} jiraClient"," * @constructor FilterClient"," */","function FilterClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Creates a new filter, and returns newly created filter. Currently sets permissions just using the users default","     * sharing permissions","     *","     * @method createFilter","     * @memberOf FilterClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {Array} [opts.expand] The parameters to expand.","     * @param {Object} opts.filter The filter to create.  See","     *      {@link https://docs.atlassian.com/jira/REST/latest/#d2e3347}","     * @param [callback] Called when the filter has been created.","     * @return {Promise} Resolved when the filter has been created.","     */","    this.createFilter = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/filter'),","            method: 'POST',","            json: true,","            followAllRedirects: true,","            qs: {},","            body: opts.filter","        };","","        if (opts.expand) {","            options.qs.expand = '';","            opts.expand.forEach(function (ex) {","                options.qs.expand += ex + ','","            });","        }","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns a filter given an id","     *","     * @method getFilter","     * @memberOf FilterClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.filterId The id of the filter to retrieve","     * @param [callback] Called when the filter has been retrieved.","     * @return {Promise} Resolved when the filter has been retrieved.","     */","    this.getFilter = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Updates an existing filter, and returns its new value.","     *","     * @method updateFilter","     * @memberOf FilterClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.filterId The id of the filter to update","     * @param {Object} opts.filter The new data for the filter.  See","     *      {@link https://docs.atlassian.com/jira/REST/latest/#d2e3401}","     * @param [callback] Called when the filter has been updated.","     * @return {Promise} Resolved when the filter has been updated.","     */","    this.updateFilter = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'PUT', opts.filter);","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Delete a filter.","     *","     * @method deleteFilter","     * @memberOf FilterClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.filterId The id of the filter to delete","     * @param [callback] Called when the filter has been deleted.","     * @return {Promise} Resolved when the filter has been deleted.","     */","    this.deleteFilter = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'DELETE');","        return this.jiraClient.makeRequest(options, callback, 'Filter Deleted');","    };","","    /**","     * Returns the default columns for the given filter. Currently logged in user will be used as the user making such","     * request.","     *","     * @method getFilterColumns","     * @memberOf FilterClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.filterId The id of the filter for which to retrieve columns.","     * @param [callback] Called when the columns have been retrieved.","     * @return {Promise} Resolved when the columns have been retrieved.","     */","    this.getFilterColumns = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/columns', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Sets the default columns for the given filter","     *","     * @method setFilterColumns","     * @memberOf FilterClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.filterId The id of the filter for which to update columns.","     * @param {Array} opts.columns The names of the new columns.","     *      See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3460}","     * @param [callback] Called when the columns have been set","     * @return {Promise} Resolved when the columns have been set","     */","    this.setFilterColumns = function (opts, callback) {","        var body = {columns: opts.columns};","        var options = this.buildRequestOptions(opts, '/columns', 'PUT', body);","        return this.jiraClient.makeRequest(options, callback, 'Columns Updated');","    };","","    /**","     * Resets the columns for the given filter such that the filter no longer has its own column config.","     *","     * @method resetFilterColumns","     * @memberOf FilterClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.filterId The id of the filter for which to reset columns.","     * @param [callback] Called when the columns have been reset.","     * @return {Promise} Resolved when the columns have been reset.","     */","    this.resetFilterColumns = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/columns', 'DELETE');","        return this.jiraClient.makeRequest(options, callback, 'Columns Reset');","    };","","    /**","     * Returns the default share scope of the logged-in user.","     *","     * @method getDefaultShareScore","     * @memberOf FilterClient#","     * @param opts Ignored.","     * @param [callback] Called when the default share scope has been retrieved.","     * @return {Promise} Resolved when the default share scope has been retrieved.","     */","    this.getDefaultShareScore = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/filter/defaultShareScope'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Sets the default share scope of the logged-in user.","     *","     * @method setDefaultShareScope","     * @memberOf FilterClient#","     * @param {Object} opts The request options sent to jira","     * @param {string} opts.scope The new default share scope. Available values are GLOBAL and PRIVATE.","     * @param [callback] Called when the default share scope has been set.","     * @return {Promise} Resolved when the default share scope has been set.","     */","    this.setDefaultShareScope = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/filter/defaultShareScope'),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            body: {","                scope: opts.scope","            }","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns the favourite filters of the logged-in user.","     *","     * @method getFavouriteFilters","     * @memberOf FilterClient#","     * @param opts Ignored.","     * @param [callback] Called when the list of favourites has been retrieved.","     * @return {Promise} Resolved when the list of favourites has been retrieved.","     */","    this.getFavoriteFilters = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/filter/favourite'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Build out the request options necessary to make a particular API call.","     *","     * @private","     * @method buildRequestOptions","     * @memberOf FilterClient#","     * @param {Object} opts The arguments passed to the method.","     * @param {number} opts.filterId The id of the filter to use in the path.","     * @param {Array} [opts.fields] The fields to include","     * @param {Array} [opts.expand] The fields to expand","     * @param {string} path The path of the endpoint following /filter/{id}","     * @param {string} method The request method.","     * @param {Object} [body] The request body, if any.","     * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.","     * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}","     */","    this.buildRequestOptions = function (opts, path, method, body, qs) {","        var basePath = '/filter/' + opts.filterId;","        if (!qs) qs = {};","        if (!body) body = {};","","        if (opts.fields) {","            qs.fields = '';","            opts.fields.forEach(function (field) {","                qs.fields += field + ','","            });","            qs.fields = qs.fields.slice(0, -1);","        }","","        if (opts.expand) {","            qs.expand = '';","            opts.expand.forEach(function (ex) {","                qs.expand += ex + ','","            });","            qs.expand = qs.expand.slice(0, -1);","        }","","        return {","            uri: this.jiraClient.buildURL(basePath + path),","            method: method,","            body: body,","            qs: qs,","            followAllRedirects: true,","            json: true","        };","    };","}"],"l":{"3":1,"11":1,"12":0,"27":0,"28":0,"37":0,"38":0,"39":0,"40":0,"44":0,"57":0,"58":0,"59":0,"74":0,"75":0,"76":0,"89":0,"90":0,"91":0,"105":0,"106":0,"107":0,"122":0,"123":0,"124":0,"125":0,"138":0,"139":0,"140":0,"152":0,"153":0,"160":0,"173":0,"174":0,"183":0,"195":0,"196":0,"202":0,"221":0,"222":0,"223":0,"224":0,"226":0,"227":0,"228":0,"229":0,"231":0,"234":0,"235":0,"236":0,"237":0,"239":0,"242":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/group.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/group.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"GroupClient","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":33}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":23},"end":{"line":26,"column":49}}},"3":{"name":"(anonymous_3)","line":52,"loc":{"start":{"line":52,"column":20},"end":{"line":52,"column":46}}},"4":{"name":"(anonymous_4)","line":59,"loc":{"start":{"line":59,"column":32},"end":{"line":59,"column":46}}},"5":{"name":"(anonymous_5)","line":86,"loc":{"start":{"line":86,"column":26},"end":{"line":86,"column":52}}},"6":{"name":"(anonymous_6)","line":114,"loc":{"start":{"line":114,"column":31},"end":{"line":114,"column":57}}},"7":{"name":"(anonymous_7)","line":140,"loc":{"start":{"line":140,"column":23},"end":{"line":140,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":29}},"2":{"start":{"line":13,"column":0},"end":{"line":154,"column":1}},"3":{"start":{"line":14,"column":4},"end":{"line":14,"column":33}},"4":{"start":{"line":26,"column":4},"end":{"line":36,"column":6}},"5":{"start":{"line":27,"column":8},"end":{"line":33,"column":10}},"6":{"start":{"line":35,"column":8},"end":{"line":35,"column":62}},"7":{"start":{"line":52,"column":4},"end":{"line":73,"column":6}},"8":{"start":{"line":53,"column":8},"end":{"line":55,"column":10}},"9":{"start":{"line":57,"column":8},"end":{"line":62,"column":9}},"10":{"start":{"line":58,"column":12},"end":{"line":58,"column":27}},"11":{"start":{"line":59,"column":12},"end":{"line":61,"column":15}},"12":{"start":{"line":60,"column":16},"end":{"line":60,"column":37}},"13":{"start":{"line":64,"column":8},"end":{"line":70,"column":10}},"14":{"start":{"line":72,"column":8},"end":{"line":72,"column":62}},"15":{"start":{"line":86,"column":4},"end":{"line":101,"column":6}},"16":{"start":{"line":87,"column":8},"end":{"line":98,"column":10}},"17":{"start":{"line":100,"column":8},"end":{"line":100,"column":62}},"18":{"start":{"line":114,"column":4},"end":{"line":127,"column":6}},"19":{"start":{"line":115,"column":8},"end":{"line":124,"column":10}},"20":{"start":{"line":126,"column":8},"end":{"line":126,"column":89}},"21":{"start":{"line":140,"column":4},"end":{"line":153,"column":6}},"22":{"start":{"line":141,"column":8},"end":{"line":150,"column":10}},"23":{"start":{"line":152,"column":8},"end":{"line":152,"column":79}}},"branchMap":{"1":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":57,"column":8}},{"start":{"line":57,"column":8},"end":{"line":57,"column":8}}]}},"code":["\"use strict\";","","module.exports = GroupClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/group'"," *"," * These are considered experimental according to the Jira Docs, use at your own risk."," *"," * @param {JiraClient} jiraClient"," * @constructor GroupClient"," */","function GroupClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Creates a group by given group parameter Returns REST representation for the requested group.","     *","     * @method createGroup","     * @memberOf GroupClient#","     * @param opts The request options sent to jira","     * @param opts.group The group to create.  See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2011}","     * @param [callback] Called when the group is created","     * @return {Promise} Resolved when the group is created","     */","    this.createGroup = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/group'),","            method: 'POST',","            json: true,","            followAllRedirects: true,","            body: opts.group","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns REST representation for the requested group. Allows to get list of active users belonging to the","     * specified group and its subgroups if \"users\" expand option is provided. You can page through users list by using","     * indexes in expand param. For example to get users from index 10 to index 15 use \"users[10:15]\" expand value.","     * This will return 6 users (if there are at least 16 users in this group). Indexes are 0-based and inclusive.","     *","     * @method getGroup","     * @memberOf GroupClient#","     * @param opts The request options sent to the Jira API","     * @param opts.groupName A name of requested group.","     * @param opts.expand Array of fields to expand. Currently only available expand is \"users\".","     * @param [callback] Called when the group is retrieved.","     * @return {Promise} Resolved when the group is retrieved.","     */","    this.getGroup = function (opts, callback) {","        var qs = {","            groupname: opts.groupName","        };","","        if (opts.expand) {","            qs.expand = '';","            opts.expand.forEach(function (ex) {","                qs.expand += ex + ','","            });","        }","","        var options = {","            uri: this.jiraClient.buildURL('/group'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: qs","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Adds given user to a group. Returns the current state of the group.","     *","     * @method addUserToGroup","     * @memberOf GroupClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.groupName A name of requested group.","     * @param {string} opts.userName The name of the user to add to the group.","     * @param [callback] Called when the user has been added to the group.","     * @return {Promise} Resolved when the user has been added to the group.","     */","    this.addUserToGroup = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/group/user'),","            method: 'POST',","            json: true,","            followAllRedirects: true,","            qs: {","                groupname: opts.groupName","            },","            body: {","                name: opts.userName","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Removes given user from a group. Returns no content","     *","     * @method removeUserFromGroup","     * @memberOf GroupClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.groupName A name of requested group.","     * @param {string} opts.userName The name of the user to add to the group.","     * @param [callback] Called when the user has been added to the group.","     * @return {Promise} Resolved when the user has been added to the group.","     */","    this.removeUserFromGroup = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/group/user'),","            method: 'DELETE',","            json: true,","            followAllRedirects: true,","            qs: {","                groupname: opts.groupName,","                username: opts.userName","            }","        };","","        return this.jiraClient.makeRequest(options, callback, 'User Removed from Group');","    };","","    /**","     * Deletes a group by given group parameter. Returns no content","     *","     * @method deleteGroup","     * @memberOf GroupClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.groupName A group to delete.","     * @param {string} [opts.swapGroup] A group to transfer visibility restrictions of the group that is being deleted","     * @param [callback] Called when the group has been deleted.","     * @return {Promise} Resolved when the group has been deleted.","     */","    this.deleteGroup = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/group'),","            method: 'DELETE',","            json: true,","            followAllRedirects: true,","            qs: {","                groupname: opts.groupName,","                swapGroup: opts.swapGroup","            }","        };","","        return this.jiraClient.makeRequest(options, callback, 'Group Deleted');","    };","}"],"l":{"3":1,"13":1,"14":0,"26":0,"27":0,"35":0,"52":0,"53":0,"57":0,"58":0,"59":0,"60":0,"64":0,"72":0,"86":0,"87":0,"100":0,"114":0,"115":0,"126":0,"140":0,"141":0,"152":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/groupUserPicker.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/groupUserPicker.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"GroupUserPickerClient","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":43}}},"2":{"name":"(anonymous_2)","line":37,"loc":{"start":{"line":37,"column":30},"end":{"line":37,"column":56}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"2":{"start":{"line":10,"column":0},"end":{"line":55,"column":1}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":33}},"4":{"start":{"line":37,"column":4},"end":{"line":54,"column":6}},"5":{"start":{"line":38,"column":8},"end":{"line":51,"column":10}},"6":{"start":{"line":53,"column":8},"end":{"line":53,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = GroupUserPickerClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/groupuserpicker'"," * @param {JiraClient} jiraClient"," * @constructor GroupUserPickerClient"," */","function GroupUserPickerClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns a list of users and groups matching query with highlighting. This resource cannot be accessed","     * anonymously.","     *","     * @method findUsersAndGroups","     * @memberOf GroupUserPickerClient#","     * @param {Object} opts The request options to send to the Jira API.","     * @param {string} opts.query A string used to search username, Name or e-mail address","     * @param {number} [opts.maxResults] the maximum number of users to return (defaults to 50). The maximum allowed","     *     value is 1000. If you specify a value that is higher than this number, your search results will be","     *     truncated.","     * @param {boolean} [opts.showAvatar] Whether to show the avatar","     * @param {string} [opts.fieldId] The custom field id, if this request comes from a custom field, such as a user","     *     picker. Optional.","     * @param {string} [opts.projectId] The list of project ids to further restrict the search This parameter can occur","     *     multiple times to pass in multiple project ids. Comma separated value is not supported. This parameter is","     *     only used when fieldId is present.","     * @param {string} [opts.issueTypeId] The list of issue type ids to further restrict the search. This parameter can","     *     occur multiple times to pass in multiple issue type ids. Comma separated value is not supported. Special","     *     values such as -1 (all standard issue types), -2 (all subtask issue types) are supported. This parameter is","     *     only used when fieldId is present.","     * @param [callback] Called when the search is completed.","     * @return {Promise} Resolved when the search is completed.","     */","    this.findUsersAndGroups = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/groupuserpicker'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                query: opts.query,","                maxResults: opts.maxResults,","                showAvatar: opts.showAvatar,","                fieldId: opts.fieldId,","                projectId: opts.projectId,","                issueTypeId: opts.issueTypeId","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}"],"l":{"3":1,"10":1,"11":0,"37":0,"38":0,"53":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/groups.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/groups.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"GroupsClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}}},"2":{"name":"(anonymous_2)","line":30,"loc":{"start":{"line":30,"column":22},"end":{"line":30,"column":48}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":11,"column":0},"end":{"line":45,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":30,"column":4},"end":{"line":44,"column":5}},"5":{"start":{"line":31,"column":8},"end":{"line":41,"column":10}},"6":{"start":{"line":43,"column":8},"end":{"line":43,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = GroupsClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/groups'"," *"," * @param {JiraClient} jiraClient"," * @constructor GroupsClient"," */","function GroupsClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns groups with substrings matching a given query. This is mainly for use with the group picker, so the","     * returned groups contain html to be used as picker suggestions. The groups are also wrapped in a single response","     * object that also contains a header for use in the picker, specifically Showing X of Y matching groups. The","     * number of groups returned is limited by the system property \"jira.ajax.autocomplete.limit\" The groups will be","     * unique and sorted.","     *","     * @method findGroups","     * @memberOf GroupsClient#","     * @param {Object} opts The request options to use in the Jira API.","     * @param {string} opts.query A string against which to match groups.  Leave this blank to return all groups.","     * @param {string} opts.exclude A string specifying groups to exclude.","     * @param {number} opts.maxResults The maximum number of results to return.","     * @param [callback] Called when the groups have been retrieved.","     * @return {Promise} Resolved when the groups have been retrieved.","     */","    this.findGroups = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/groups/picker'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                query: opts.query,","                exclude: opts.exclude,","                maxResults: opts.maxResults","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"11":1,"12":0,"30":0,"31":0,"43":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/issue.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/issue.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0},"fnMap":{"1":{"name":"IssueClient","line":13,"loc":{"start":{"line":13,"column":0},"end":{"line":13,"column":33}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":30},"end":{"line":33,"column":56}}},"3":{"name":"(anonymous_3)","line":68,"loc":{"start":{"line":68,"column":30},"end":{"line":68,"column":56}}},"4":{"name":"(anonymous_4)","line":99,"loc":{"start":{"line":99,"column":25},"end":{"line":99,"column":54}}},"5":{"name":"(anonymous_5)","line":131,"loc":{"start":{"line":131,"column":23},"end":{"line":131,"column":50}}},"6":{"name":"(anonymous_6)","line":176,"loc":{"start":{"line":176,"column":29},"end":{"line":176,"column":55}}},"7":{"name":"(anonymous_7)","line":208,"loc":{"start":{"line":208,"column":22},"end":{"line":208,"column":50}}},"8":{"name":"(anonymous_8)","line":259,"loc":{"start":{"line":259,"column":20},"end":{"line":259,"column":46}}},"9":{"name":"(anonymous_9)","line":297,"loc":{"start":{"line":297,"column":23},"end":{"line":297,"column":49}}},"10":{"name":"(anonymous_10)","line":326,"loc":{"start":{"line":326,"column":21},"end":{"line":326,"column":47}}},"11":{"name":"(anonymous_11)","line":351,"loc":{"start":{"line":351,"column":23},"end":{"line":351,"column":49}}},"12":{"name":"(anonymous_12)","line":374,"loc":{"start":{"line":374,"column":23},"end":{"line":374,"column":49}}},"13":{"name":"(anonymous_13)","line":393,"loc":{"start":{"line":393,"column":22},"end":{"line":393,"column":48}}},"14":{"name":"(anonymous_14)","line":417,"loc":{"start":{"line":417,"column":22},"end":{"line":417,"column":48}}},"15":{"name":"(anonymous_15)","line":440,"loc":{"start":{"line":440,"column":23},"end":{"line":440,"column":49}}},"16":{"name":"(anonymous_16)","line":464,"loc":{"start":{"line":464,"column":25},"end":{"line":464,"column":51}}},"17":{"name":"(anonymous_17)","line":488,"loc":{"start":{"line":488,"column":27},"end":{"line":488,"column":53}}},"18":{"name":"(anonymous_18)","line":509,"loc":{"start":{"line":509,"column":33},"end":{"line":509,"column":59}}},"19":{"name":"(anonymous_19)","line":534,"loc":{"start":{"line":534,"column":26},"end":{"line":534,"column":52}}},"20":{"name":"(anonymous_20)","line":554,"loc":{"start":{"line":554,"column":28},"end":{"line":554,"column":54}}},"21":{"name":"(anonymous_21)","line":574,"loc":{"start":{"line":574,"column":28},"end":{"line":574,"column":54}}},"22":{"name":"(anonymous_22)","line":592,"loc":{"start":{"line":592,"column":28},"end":{"line":592,"column":54}}},"23":{"name":"(anonymous_23)","line":615,"loc":{"start":{"line":615,"column":29},"end":{"line":615,"column":55}}},"24":{"name":"(anonymous_24)","line":639,"loc":{"start":{"line":639,"column":32},"end":{"line":639,"column":58}}},"25":{"name":"(anonymous_25)","line":662,"loc":{"start":{"line":662,"column":32},"end":{"line":662,"column":58}}},"26":{"name":"(anonymous_26)","line":691,"loc":{"start":{"line":691,"column":26},"end":{"line":691,"column":52}}},"27":{"name":"(anonymous_27)","line":715,"loc":{"start":{"line":715,"column":27},"end":{"line":715,"column":53}}},"28":{"name":"(anonymous_28)","line":741,"loc":{"start":{"line":741,"column":18},"end":{"line":741,"column":44}}},"29":{"name":"(anonymous_29)","line":759,"loc":{"start":{"line":759,"column":16},"end":{"line":759,"column":42}}},"30":{"name":"(anonymous_30)","line":777,"loc":{"start":{"line":777,"column":20},"end":{"line":777,"column":46}}},"31":{"name":"(anonymous_31)","line":795,"loc":{"start":{"line":795,"column":23},"end":{"line":795,"column":49}}},"32":{"name":"(anonymous_32)","line":814,"loc":{"start":{"line":814,"column":22},"end":{"line":814,"column":48}}},"33":{"name":"(anonymous_33)","line":836,"loc":{"start":{"line":836,"column":25},"end":{"line":836,"column":51}}},"34":{"name":"(anonymous_34)","line":857,"loc":{"start":{"line":857,"column":23},"end":{"line":857,"column":49}}},"35":{"name":"(anonymous_35)","line":887,"loc":{"start":{"line":887,"column":22},"end":{"line":887,"column":48}}},"36":{"name":"(anonymous_36)","line":913,"loc":{"start":{"line":913,"column":22},"end":{"line":913,"column":48}}},"37":{"name":"(anonymous_37)","line":944,"loc":{"start":{"line":944,"column":25},"end":{"line":944,"column":51}}},"38":{"name":"(anonymous_38)","line":983,"loc":{"start":{"line":983,"column":25},"end":{"line":983,"column":51}}},"39":{"name":"(anonymous_39)","line":1008,"loc":{"start":{"line":1008,"column":25},"end":{"line":1008,"column":51}}},"40":{"name":"(anonymous_40)","line":1015,"loc":{"start":{"line":1015,"column":45},"end":{"line":1015,"column":65}}},"41":{"name":"(anonymous_41)","line":1037,"loc":{"start":{"line":1037,"column":25},"end":{"line":1037,"column":51}}},"42":{"name":"(anonymous_42)","line":1060,"loc":{"start":{"line":1060,"column":23},"end":{"line":1060,"column":49}}},"43":{"name":"(anonymous_43)","line":1086,"loc":{"start":{"line":1086,"column":23},"end":{"line":1086,"column":49}}},"44":{"name":"(anonymous_44)","line":1110,"loc":{"start":{"line":1110,"column":26},"end":{"line":1110,"column":52}}},"45":{"name":"(anonymous_45)","line":1130,"loc":{"start":{"line":1130,"column":31},"end":{"line":1130,"column":71}}},"46":{"name":"(anonymous_46)","line":1141,"loc":{"start":{"line":1141,"column":32},"end":{"line":1141,"column":49}}},"47":{"name":"(anonymous_47)","line":1148,"loc":{"start":{"line":1148,"column":32},"end":{"line":1148,"column":46}}},"48":{"name":"(anonymous_48)","line":1155,"loc":{"start":{"line":1155,"column":36},"end":{"line":1155,"column":52}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":23}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":29}},"4":{"start":{"line":13,"column":0},"end":{"line":1170,"column":1}},"5":{"start":{"line":14,"column":4},"end":{"line":14,"column":33}},"6":{"start":{"line":33,"column":4},"end":{"line":49,"column":6}},"7":{"start":{"line":34,"column":8},"end":{"line":34,"column":83}},"8":{"start":{"line":35,"column":8},"end":{"line":46,"column":10}},"9":{"start":{"line":48,"column":8},"end":{"line":48,"column":62}},"10":{"start":{"line":68,"column":4},"end":{"line":87,"column":6}},"11":{"start":{"line":69,"column":8},"end":{"line":69,"column":83}},"12":{"start":{"line":70,"column":8},"end":{"line":84,"column":10}},"13":{"start":{"line":86,"column":8},"end":{"line":86,"column":62}},"14":{"start":{"line":99,"column":4},"end":{"line":109,"column":6}},"15":{"start":{"line":100,"column":8},"end":{"line":106,"column":10}},"16":{"start":{"line":108,"column":8},"end":{"line":108,"column":62}},"17":{"start":{"line":131,"column":4},"end":{"line":141,"column":6}},"18":{"start":{"line":132,"column":8},"end":{"line":138,"column":10}},"19":{"start":{"line":140,"column":8},"end":{"line":140,"column":62}},"20":{"start":{"line":176,"column":4},"end":{"line":192,"column":6}},"21":{"start":{"line":177,"column":8},"end":{"line":189,"column":10}},"22":{"start":{"line":191,"column":8},"end":{"line":191,"column":62}},"23":{"start":{"line":208,"column":4},"end":{"line":218,"column":6}},"24":{"start":{"line":209,"column":8},"end":{"line":215,"column":10}},"25":{"start":{"line":217,"column":8},"end":{"line":217,"column":62}},"26":{"start":{"line":259,"column":4},"end":{"line":279,"column":6}},"27":{"start":{"line":260,"column":8},"end":{"line":276,"column":9}},"28":{"start":{"line":261,"column":12},"end":{"line":261,"column":68}},"29":{"start":{"line":263,"column":12},"end":{"line":263,"column":71}},"30":{"start":{"line":264,"column":12},"end":{"line":275,"column":14}},"31":{"start":{"line":278,"column":8},"end":{"line":278,"column":62}},"32":{"start":{"line":297,"column":4},"end":{"line":301,"column":6}},"33":{"start":{"line":298,"column":8},"end":{"line":298,"column":112}},"34":{"start":{"line":300,"column":8},"end":{"line":300,"column":79}},"35":{"start":{"line":326,"column":4},"end":{"line":333,"column":6}},"36":{"start":{"line":327,"column":8},"end":{"line":329,"column":9}},"37":{"start":{"line":328,"column":12},"end":{"line":328,"column":57}},"38":{"start":{"line":330,"column":8},"end":{"line":330,"column":85}},"39":{"start":{"line":332,"column":8},"end":{"line":332,"column":79}},"40":{"start":{"line":351,"column":4},"end":{"line":359,"column":6}},"41":{"start":{"line":352,"column":8},"end":{"line":354,"column":9}},"42":{"start":{"line":353,"column":12},"end":{"line":353,"column":60}},"43":{"start":{"line":356,"column":8},"end":{"line":356,"column":96}},"44":{"start":{"line":358,"column":8},"end":{"line":358,"column":80}},"45":{"start":{"line":374,"column":4},"end":{"line":378,"column":6}},"46":{"start":{"line":375,"column":8},"end":{"line":375,"column":72}},"47":{"start":{"line":377,"column":8},"end":{"line":377,"column":62}},"48":{"start":{"line":393,"column":4},"end":{"line":402,"column":6}},"49":{"start":{"line":394,"column":8},"end":{"line":394,"column":20}},"50":{"start":{"line":395,"column":8},"end":{"line":399,"column":9}},"51":{"start":{"line":396,"column":12},"end":{"line":396,"column":87}},"52":{"start":{"line":398,"column":12},"end":{"line":398,"column":95}},"53":{"start":{"line":401,"column":8},"end":{"line":401,"column":62}},"54":{"start":{"line":417,"column":4},"end":{"line":424,"column":6}},"55":{"start":{"line":418,"column":8},"end":{"line":420,"column":9}},"56":{"start":{"line":419,"column":12},"end":{"line":419,"column":56}},"57":{"start":{"line":421,"column":8},"end":{"line":421,"column":90}},"58":{"start":{"line":423,"column":8},"end":{"line":423,"column":62}},"59":{"start":{"line":440,"column":4},"end":{"line":449,"column":6}},"60":{"start":{"line":441,"column":8},"end":{"line":445,"column":9}},"61":{"start":{"line":442,"column":12},"end":{"line":442,"column":59}},"62":{"start":{"line":443,"column":15},"end":{"line":445,"column":9}},"63":{"start":{"line":444,"column":12},"end":{"line":444,"column":56}},"64":{"start":{"line":446,"column":8},"end":{"line":446,"column":104}},"65":{"start":{"line":448,"column":8},"end":{"line":448,"column":62}},"66":{"start":{"line":464,"column":4},"end":{"line":471,"column":6}},"67":{"start":{"line":465,"column":8},"end":{"line":467,"column":9}},"68":{"start":{"line":466,"column":12},"end":{"line":466,"column":56}},"69":{"start":{"line":468,"column":8},"end":{"line":468,"column":93}},"70":{"start":{"line":470,"column":8},"end":{"line":470,"column":81}},"71":{"start":{"line":488,"column":4},"end":{"line":492,"column":6}},"72":{"start":{"line":489,"column":8},"end":{"line":489,"column":73}},"73":{"start":{"line":491,"column":8},"end":{"line":491,"column":62}},"74":{"start":{"line":509,"column":4},"end":{"line":517,"column":6}},"75":{"start":{"line":510,"column":8},"end":{"line":512,"column":9}},"76":{"start":{"line":511,"column":12},"end":{"line":511,"column":64}},"77":{"start":{"line":514,"column":8},"end":{"line":514,"column":91}},"78":{"start":{"line":516,"column":8},"end":{"line":516,"column":84}},"79":{"start":{"line":534,"column":4},"end":{"line":538,"column":6}},"80":{"start":{"line":535,"column":8},"end":{"line":535,"column":108}},"81":{"start":{"line":537,"column":8},"end":{"line":537,"column":62}},"82":{"start":{"line":554,"column":4},"end":{"line":558,"column":6}},"83":{"start":{"line":555,"column":8},"end":{"line":555,"column":93}},"84":{"start":{"line":557,"column":8},"end":{"line":557,"column":62}},"85":{"start":{"line":574,"column":4},"end":{"line":577,"column":6}},"86":{"start":{"line":576,"column":8},"end":{"line":576,"column":46}},"87":{"start":{"line":592,"column":4},"end":{"line":600,"column":6}},"88":{"start":{"line":593,"column":8},"end":{"line":595,"column":9}},"89":{"start":{"line":594,"column":12},"end":{"line":594,"column":61}},"90":{"start":{"line":597,"column":8},"end":{"line":597,"column":111}},"91":{"start":{"line":599,"column":8},"end":{"line":599,"column":84}},"92":{"start":{"line":615,"column":4},"end":{"line":623,"column":6}},"93":{"start":{"line":616,"column":8},"end":{"line":618,"column":9}},"94":{"start":{"line":617,"column":12},"end":{"line":617,"column":59}},"95":{"start":{"line":620,"column":8},"end":{"line":620,"column":90}},"96":{"start":{"line":622,"column":8},"end":{"line":622,"column":62}},"97":{"start":{"line":639,"column":4},"end":{"line":647,"column":6}},"98":{"start":{"line":640,"column":8},"end":{"line":642,"column":9}},"99":{"start":{"line":641,"column":12},"end":{"line":641,"column":59}},"100":{"start":{"line":644,"column":8},"end":{"line":644,"column":107}},"101":{"start":{"line":646,"column":8},"end":{"line":646,"column":84}},"102":{"start":{"line":662,"column":4},"end":{"line":670,"column":6}},"103":{"start":{"line":663,"column":8},"end":{"line":665,"column":9}},"104":{"start":{"line":664,"column":12},"end":{"line":664,"column":59}},"105":{"start":{"line":667,"column":8},"end":{"line":667,"column":93}},"106":{"start":{"line":669,"column":8},"end":{"line":669,"column":84}},"107":{"start":{"line":691,"column":4},"end":{"line":695,"column":6}},"108":{"start":{"line":692,"column":8},"end":{"line":692,"column":117}},"109":{"start":{"line":694,"column":8},"end":{"line":694,"column":62}},"110":{"start":{"line":715,"column":4},"end":{"line":727,"column":6}},"111":{"start":{"line":716,"column":8},"end":{"line":718,"column":9}},"112":{"start":{"line":717,"column":12},"end":{"line":717,"column":62}},"113":{"start":{"line":720,"column":8},"end":{"line":720,"column":20}},"114":{"start":{"line":721,"column":8},"end":{"line":725,"column":9}},"115":{"start":{"line":722,"column":12},"end":{"line":722,"column":83}},"116":{"start":{"line":724,"column":12},"end":{"line":724,"column":93}},"117":{"start":{"line":726,"column":8},"end":{"line":726,"column":84}},"118":{"start":{"line":741,"column":4},"end":{"line":745,"column":6}},"119":{"start":{"line":742,"column":8},"end":{"line":742,"column":73}},"120":{"start":{"line":744,"column":8},"end":{"line":744,"column":78}},"121":{"start":{"line":759,"column":4},"end":{"line":763,"column":6}},"122":{"start":{"line":760,"column":8},"end":{"line":760,"column":71}},"123":{"start":{"line":762,"column":8},"end":{"line":762,"column":76}},"124":{"start":{"line":777,"column":4},"end":{"line":781,"column":6}},"125":{"start":{"line":778,"column":8},"end":{"line":778,"column":70}},"126":{"start":{"line":780,"column":8},"end":{"line":780,"column":62}},"127":{"start":{"line":795,"column":4},"end":{"line":799,"column":6}},"128":{"start":{"line":796,"column":8},"end":{"line":796,"column":73}},"129":{"start":{"line":798,"column":8},"end":{"line":798,"column":62}},"130":{"start":{"line":814,"column":4},"end":{"line":821,"column":6}},"131":{"start":{"line":815,"column":8},"end":{"line":817,"column":9}},"132":{"start":{"line":816,"column":12},"end":{"line":816,"column":59}},"133":{"start":{"line":818,"column":8},"end":{"line":818,"column":88}},"134":{"start":{"line":820,"column":8},"end":{"line":820,"column":79}},"135":{"start":{"line":836,"column":4},"end":{"line":843,"column":6}},"136":{"start":{"line":837,"column":8},"end":{"line":839,"column":9}},"137":{"start":{"line":838,"column":12},"end":{"line":838,"column":59}},"138":{"start":{"line":840,"column":8},"end":{"line":840,"column":108}},"139":{"start":{"line":842,"column":8},"end":{"line":842,"column":81}},"140":{"start":{"line":857,"column":4},"end":{"line":861,"column":6}},"141":{"start":{"line":858,"column":8},"end":{"line":858,"column":72}},"142":{"start":{"line":860,"column":8},"end":{"line":860,"column":62}},"143":{"start":{"line":887,"column":4},"end":{"line":898,"column":6}},"144":{"start":{"line":888,"column":8},"end":{"line":890,"column":9}},"145":{"start":{"line":889,"column":12},"end":{"line":889,"column":59}},"146":{"start":{"line":891,"column":8},"end":{"line":895,"column":11}},"147":{"start":{"line":897,"column":8},"end":{"line":897,"column":79}},"148":{"start":{"line":913,"column":4},"end":{"line":920,"column":6}},"149":{"start":{"line":914,"column":8},"end":{"line":916,"column":9}},"150":{"start":{"line":915,"column":12},"end":{"line":915,"column":62}},"151":{"start":{"line":917,"column":8},"end":{"line":917,"column":90}},"152":{"start":{"line":919,"column":8},"end":{"line":919,"column":62}},"153":{"start":{"line":944,"column":4},"end":{"line":957,"column":6}},"154":{"start":{"line":945,"column":8},"end":{"line":949,"column":9}},"155":{"start":{"line":946,"column":12},"end":{"line":946,"column":62}},"156":{"start":{"line":947,"column":15},"end":{"line":949,"column":9}},"157":{"start":{"line":948,"column":12},"end":{"line":948,"column":59}},"158":{"start":{"line":951,"column":8},"end":{"line":954,"column":11}},"159":{"start":{"line":956,"column":8},"end":{"line":956,"column":62}},"160":{"start":{"line":983,"column":4},"end":{"line":993,"column":6}},"161":{"start":{"line":984,"column":8},"end":{"line":986,"column":9}},"162":{"start":{"line":985,"column":12},"end":{"line":985,"column":62}},"163":{"start":{"line":987,"column":8},"end":{"line":991,"column":11}},"164":{"start":{"line":992,"column":8},"end":{"line":992,"column":82}},"165":{"start":{"line":1008,"column":4},"end":{"line":1022,"column":6}},"166":{"start":{"line":1009,"column":8},"end":{"line":1011,"column":9}},"167":{"start":{"line":1010,"column":12},"end":{"line":1010,"column":60}},"168":{"start":{"line":1012,"column":8},"end":{"line":1012,"column":77}},"169":{"start":{"line":1013,"column":8},"end":{"line":1013,"column":28}},"170":{"start":{"line":1014,"column":8},"end":{"line":1014,"column":81}},"171":{"start":{"line":1014,"column":49},"end":{"line":1014,"column":81}},"172":{"start":{"line":1015,"column":8},"end":{"line":1015,"column":105}},"173":{"start":{"line":1015,"column":66},"end":{"line":1015,"column":102}},"174":{"start":{"line":1016,"column":8},"end":{"line":1016,"column":47}},"175":{"start":{"line":1017,"column":8},"end":{"line":1019,"column":10}},"176":{"start":{"line":1021,"column":8},"end":{"line":1021,"column":62}},"177":{"start":{"line":1037,"column":4},"end":{"line":1040,"column":6}},"178":{"start":{"line":1038,"column":8},"end":{"line":1038,"column":75}},"179":{"start":{"line":1039,"column":8},"end":{"line":1039,"column":62}},"180":{"start":{"line":1060,"column":4},"end":{"line":1068,"column":6}},"181":{"start":{"line":1061,"column":8},"end":{"line":1065,"column":9}},"182":{"start":{"line":1062,"column":12},"end":{"line":1062,"column":64}},"183":{"start":{"line":1063,"column":15},"end":{"line":1065,"column":9}},"184":{"start":{"line":1064,"column":12},"end":{"line":1064,"column":66}},"185":{"start":{"line":1066,"column":8},"end":{"line":1066,"column":115}},"186":{"start":{"line":1067,"column":8},"end":{"line":1067,"column":78}},"187":{"start":{"line":1086,"column":4},"end":{"line":1092,"column":6}},"188":{"start":{"line":1087,"column":8},"end":{"line":1089,"column":9}},"189":{"start":{"line":1088,"column":12},"end":{"line":1088,"column":64}},"190":{"start":{"line":1090,"column":8},"end":{"line":1090,"column":95}},"191":{"start":{"line":1091,"column":8},"end":{"line":1091,"column":62}},"192":{"start":{"line":1110,"column":4},"end":{"line":1116,"column":6}},"193":{"start":{"line":1111,"column":8},"end":{"line":1113,"column":9}},"194":{"start":{"line":1112,"column":12},"end":{"line":1112,"column":64}},"195":{"start":{"line":1114,"column":8},"end":{"line":1114,"column":98}},"196":{"start":{"line":1115,"column":8},"end":{"line":1115,"column":82}},"197":{"start":{"line":1130,"column":4},"end":{"line":1168,"column":5}},"198":{"start":{"line":1131,"column":8},"end":{"line":1133,"column":9}},"199":{"start":{"line":1132,"column":12},"end":{"line":1132,"column":62}},"200":{"start":{"line":1134,"column":8},"end":{"line":1134,"column":52}},"201":{"start":{"line":1135,"column":8},"end":{"line":1135,"column":43}},"202":{"start":{"line":1136,"column":8},"end":{"line":1136,"column":25}},"203":{"start":{"line":1136,"column":17},"end":{"line":1136,"column":25}},"204":{"start":{"line":1137,"column":8},"end":{"line":1137,"column":29}},"205":{"start":{"line":1137,"column":19},"end":{"line":1137,"column":29}},"206":{"start":{"line":1139,"column":8},"end":{"line":1144,"column":9}},"207":{"start":{"line":1140,"column":12},"end":{"line":1140,"column":27}},"208":{"start":{"line":1141,"column":12},"end":{"line":1143,"column":15}},"209":{"start":{"line":1142,"column":16},"end":{"line":1142,"column":40}},"210":{"start":{"line":1146,"column":8},"end":{"line":1151,"column":9}},"211":{"start":{"line":1147,"column":12},"end":{"line":1147,"column":27}},"212":{"start":{"line":1148,"column":12},"end":{"line":1150,"column":15}},"213":{"start":{"line":1149,"column":16},"end":{"line":1149,"column":37}},"214":{"start":{"line":1153,"column":8},"end":{"line":1158,"column":9}},"215":{"start":{"line":1154,"column":12},"end":{"line":1154,"column":31}},"216":{"start":{"line":1155,"column":12},"end":{"line":1157,"column":15}},"217":{"start":{"line":1156,"column":16},"end":{"line":1156,"column":43}},"218":{"start":{"line":1160,"column":8},"end":{"line":1167,"column":10}}},"branchMap":{"1":{"line":34,"type":"binary-expr","locations":[{"start":{"line":34,"column":36},"end":{"line":34,"column":48}},{"start":{"line":34,"column":52},"end":{"line":34,"column":65}}]},"2":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":36},"end":{"line":69,"column":48}},{"start":{"line":69,"column":52},"end":{"line":69,"column":65}}]},"3":{"line":260,"type":"if","locations":[{"start":{"line":260,"column":8},"end":{"line":260,"column":8}},{"start":{"line":260,"column":8},"end":{"line":260,"column":8}}]},"4":{"line":263,"type":"binary-expr","locations":[{"start":{"line":263,"column":40},"end":{"line":263,"column":52}},{"start":{"line":263,"column":56},"end":{"line":263,"column":69}}]},"5":{"line":327,"type":"if","locations":[{"start":{"line":327,"column":8},"end":{"line":327,"column":8}},{"start":{"line":327,"column":8},"end":{"line":327,"column":8}}]},"6":{"line":352,"type":"if","locations":[{"start":{"line":352,"column":8},"end":{"line":352,"column":8}},{"start":{"line":352,"column":8},"end":{"line":352,"column":8}}]},"7":{"line":352,"type":"binary-expr","locations":[{"start":{"line":352,"column":14},"end":{"line":352,"column":47}},{"start":{"line":352,"column":51},"end":{"line":352,"column":71}},{"start":{"line":352,"column":75},"end":{"line":352,"column":97}}]},"8":{"line":395,"type":"if","locations":[{"start":{"line":395,"column":8},"end":{"line":395,"column":8}},{"start":{"line":395,"column":8},"end":{"line":395,"column":8}}]},"9":{"line":418,"type":"if","locations":[{"start":{"line":418,"column":8},"end":{"line":418,"column":8}},{"start":{"line":418,"column":8},"end":{"line":418,"column":8}}]},"10":{"line":441,"type":"if","locations":[{"start":{"line":441,"column":8},"end":{"line":441,"column":8}},{"start":{"line":441,"column":8},"end":{"line":441,"column":8}}]},"11":{"line":443,"type":"if","locations":[{"start":{"line":443,"column":15},"end":{"line":443,"column":15}},{"start":{"line":443,"column":15},"end":{"line":443,"column":15}}]},"12":{"line":465,"type":"if","locations":[{"start":{"line":465,"column":8},"end":{"line":465,"column":8}},{"start":{"line":465,"column":8},"end":{"line":465,"column":8}}]},"13":{"line":510,"type":"if","locations":[{"start":{"line":510,"column":8},"end":{"line":510,"column":8}},{"start":{"line":510,"column":8},"end":{"line":510,"column":8}}]},"14":{"line":593,"type":"if","locations":[{"start":{"line":593,"column":8},"end":{"line":593,"column":8}},{"start":{"line":593,"column":8},"end":{"line":593,"column":8}}]},"15":{"line":616,"type":"if","locations":[{"start":{"line":616,"column":8},"end":{"line":616,"column":8}},{"start":{"line":616,"column":8},"end":{"line":616,"column":8}}]},"16":{"line":640,"type":"if","locations":[{"start":{"line":640,"column":8},"end":{"line":640,"column":8}},{"start":{"line":640,"column":8},"end":{"line":640,"column":8}}]},"17":{"line":663,"type":"if","locations":[{"start":{"line":663,"column":8},"end":{"line":663,"column":8}},{"start":{"line":663,"column":8},"end":{"line":663,"column":8}}]},"18":{"line":716,"type":"if","locations":[{"start":{"line":716,"column":8},"end":{"line":716,"column":8}},{"start":{"line":716,"column":8},"end":{"line":716,"column":8}}]},"19":{"line":721,"type":"if","locations":[{"start":{"line":721,"column":8},"end":{"line":721,"column":8}},{"start":{"line":721,"column":8},"end":{"line":721,"column":8}}]},"20":{"line":815,"type":"if","locations":[{"start":{"line":815,"column":8},"end":{"line":815,"column":8}},{"start":{"line":815,"column":8},"end":{"line":815,"column":8}}]},"21":{"line":837,"type":"if","locations":[{"start":{"line":837,"column":8},"end":{"line":837,"column":8}},{"start":{"line":837,"column":8},"end":{"line":837,"column":8}}]},"22":{"line":888,"type":"if","locations":[{"start":{"line":888,"column":8},"end":{"line":888,"column":8}},{"start":{"line":888,"column":8},"end":{"line":888,"column":8}}]},"23":{"line":914,"type":"if","locations":[{"start":{"line":914,"column":8},"end":{"line":914,"column":8}},{"start":{"line":914,"column":8},"end":{"line":914,"column":8}}]},"24":{"line":945,"type":"if","locations":[{"start":{"line":945,"column":8},"end":{"line":945,"column":8}},{"start":{"line":945,"column":8},"end":{"line":945,"column":8}}]},"25":{"line":947,"type":"if","locations":[{"start":{"line":947,"column":15},"end":{"line":947,"column":15}},{"start":{"line":947,"column":15},"end":{"line":947,"column":15}}]},"26":{"line":984,"type":"if","locations":[{"start":{"line":984,"column":8},"end":{"line":984,"column":8}},{"start":{"line":984,"column":8},"end":{"line":984,"column":8}}]},"27":{"line":1009,"type":"if","locations":[{"start":{"line":1009,"column":8},"end":{"line":1009,"column":8}},{"start":{"line":1009,"column":8},"end":{"line":1009,"column":8}}]},"28":{"line":1014,"type":"if","locations":[{"start":{"line":1014,"column":8},"end":{"line":1014,"column":8}},{"start":{"line":1014,"column":8},"end":{"line":1014,"column":8}}]},"29":{"line":1061,"type":"if","locations":[{"start":{"line":1061,"column":8},"end":{"line":1061,"column":8}},{"start":{"line":1061,"column":8},"end":{"line":1061,"column":8}}]},"30":{"line":1063,"type":"if","locations":[{"start":{"line":1063,"column":15},"end":{"line":1063,"column":15}},{"start":{"line":1063,"column":15},"end":{"line":1063,"column":15}}]},"31":{"line":1087,"type":"if","locations":[{"start":{"line":1087,"column":8},"end":{"line":1087,"column":8}},{"start":{"line":1087,"column":8},"end":{"line":1087,"column":8}}]},"32":{"line":1111,"type":"if","locations":[{"start":{"line":1111,"column":8},"end":{"line":1111,"column":8}},{"start":{"line":1111,"column":8},"end":{"line":1111,"column":8}}]},"33":{"line":1131,"type":"if","locations":[{"start":{"line":1131,"column":8},"end":{"line":1131,"column":8}},{"start":{"line":1131,"column":8},"end":{"line":1131,"column":8}}]},"34":{"line":1131,"type":"binary-expr","locations":[{"start":{"line":1131,"column":12},"end":{"line":1131,"column":25}},{"start":{"line":1131,"column":29},"end":{"line":1131,"column":43}}]},"35":{"line":1134,"type":"binary-expr","locations":[{"start":{"line":1134,"column":22},"end":{"line":1134,"column":34}},{"start":{"line":1134,"column":38},"end":{"line":1134,"column":51}}]},"36":{"line":1136,"type":"if","locations":[{"start":{"line":1136,"column":8},"end":{"line":1136,"column":8}},{"start":{"line":1136,"column":8},"end":{"line":1136,"column":8}}]},"37":{"line":1137,"type":"if","locations":[{"start":{"line":1137,"column":8},"end":{"line":1137,"column":8}},{"start":{"line":1137,"column":8},"end":{"line":1137,"column":8}}]},"38":{"line":1139,"type":"if","locations":[{"start":{"line":1139,"column":8},"end":{"line":1139,"column":8}},{"start":{"line":1139,"column":8},"end":{"line":1139,"column":8}}]},"39":{"line":1146,"type":"if","locations":[{"start":{"line":1146,"column":8},"end":{"line":1146,"column":8}},{"start":{"line":1146,"column":8},"end":{"line":1146,"column":8}}]},"40":{"line":1153,"type":"if","locations":[{"start":{"line":1153,"column":8},"end":{"line":1153,"column":8}},{"start":{"line":1153,"column":8},"end":{"line":1153,"column":8}}]}},"code":["\"use strict\";","","var errorStrings = require('./../lib/error');","var fs = require('fs');","","module.exports = IssueClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/issue' and '/rest/agile/1.0/issue'"," * @constructor IssueClient"," * @param {JiraClient} jiraClient"," */","function IssueClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns the estimation of the issue and a filedId of the field that is","     * used for it.  The boardId parameter is required, and determines which","     * field will be updated on an issue.","     *","     * @method getIssueEstimation","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this","     *        object must contain EITHER an issueId or issueKey property;","     *        issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of teh issue.  EX: JWR-3","     * @param {string} [opts.boardId] The id of the board required to","     *        determine which field is used for estimation.","     * @param [callback] Called when the issue estimation has been retrieved.","     * @return {Promise} Resolved when the issue estimation has been retrieved.","     */","    this.getIssueEstimation = function (opts, callback) {","        var endpoint = '/issue/' + (opts.issueId || opts.issueKey) + '/estimation';","        var options = {","            uri: this.jiraClient.buildAgileURL(endpoint),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                boardId: opts.boardId,","                filter: opts.filter,","                startAt: opts.startAt,","                maxResults: opts.maxResults","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Updates the estimation of the issue.  The boardId parameter is required,","     * and determines which field will be updated on an issue.","     *","     * @method setIssueEstimation","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this","     *        object must contain EITHER an issueId or issueKey property;","     *        issueId will be used over issueKey if both are present.","     * @param {string} [opts.value] The value to set the issue estimation as.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of teh issue.  EX: JWR-3","     * @param {string} [opts.boardId] The id of the board required to","     *        determine which field is used for estimation.","     * @param [callback] Called when the issue estimation has been created.","     * @return {Promise} Resolved when the issue estimation has been created.","     */","    this.setIssueEstimation = function (opts, callback) {","        var endpoint = '/issue/' + (opts.issueId || opts.issueKey) + '/estimation';","        var options = {","            uri: this.jiraClient.buildAgileURL(endpoint),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            body: {","                value: opts.value,","                filter: opts.filter,","                startAt: opts.startAt,","                maxResults: opts.maxResults","            },","            qs: {","              boardId: opts.boardId","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Moves (ranks) issues before or after a given issue.","     *","     * @method setIssueRanks","     * @memberOf IssueClient#","     * @param {Object} ranking The ranking data in the form of PUT body to the","     *        Jira API.","     * @param [callback] Called when the issue rank has been created.","     * @return {Promise} Resolved when the issue rank has been created.","     */","    this.setIssueRanks = function (ranking, callback) {","        var options = {","            uri: this.jiraClient.buildAgileURL('/issue/rank'),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            body: ranking","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Creates an issue or a sub-task from a JSON representation.","     *","     * The fields that can be set on create, in either the fields parameter or the update parameter can be determined","     * using the /rest/api/2/issue/createmeta resource. If a field is not configured to appear on the create screen,","     * then it will not be in the createmeta, and a field validation error will occur if it is submitted.","     *","     * Creating a sub-task is similar to creating a regular issue, with two important differences:","     *","     * * the issueType field must correspond to a sub-task issue type (you can use /issue/createmeta to discover","     * sub-task issue types), and","     * * you must provide a parent field in the issue create request containing the id or key of the parent issue.","     *","     * @method createIssue","     * @memberof IssueClient#","     * @param {Object} issue The issue data in the form of POST body to the JIRA API.","     * See {@link https://docs.atlassian.com/jira/REST/latest/#d2e398}","     * @param [callback] Called when the issue has been created.","     * @return {Promise} Resolved when the issue has been created.","     */","    this.createIssue = function (issue, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/issue'),","            method: 'POST',","            followAllRedirects: true,","            json: true,","            body: issue","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns the meta data for creating issues. This includes the available projects, issue types and fields,","     * including field types and whether or not those fields are required. Projects will not be returned if the user","     * does not have permission to create issues in that project.","     *","     * The fields in the createmeta correspond to the fields in the create screen for the project/issuetype. Fields not","     * in the screen will not be in the createmeta.","     *","     * Fields will only be returned if ```expand=projects.issuetypes.fields.```","     *","     * The results can be filtered by project and/or issue type, given by the query params.","     *","     * @method getCreateMetadata","     * @memberOf IssueClient#","     * @param {Object} [opts] The options for the API request.","     * @param {string} [opts.projectIds] combined with the projectKeys param, lists the projects with which to filter","     *     the results. If absent, all projects are returned. This parameter can be specified multiple times, and/or be","     *     a comma-separated list. Specifiying a project that does not exist (or that you cannot create issues in) is","     *     not an error, but it will not be in the results.","     * @param {string} [opts.projectKeys] combined with the projectIds param, lists the projects with which to filter","     *     the results. If null, all projects are returned. This parameter can be specified multiple times, and/or be a","     *     comma-separated list. Specifiying a project that does not exist (or that you cannot create issues in) is not","     *     an error, but it will not be in the results.","     * @param {string} [opts.issuetypeIds] combinded with issuetypeNames, lists the issue types with which to filter","     *     the results. If null, all issue types are returned. This parameter can be specified multiple times, and/or","     *     be a comma-separated list. Specifiying an issue type that does not exist is not an error.","     * @param {string} [opts.issuetypeNames] combinded with issuetypeIds, lists the issue types with which to filter","     *     the results. If null, all issue types are returned. This parameter can be specified multiple times, but is","     *     NOT interpreted as a comma-separated list. Specifiying an issue type that does not exist is not an error.","     * @param {string} [opts.expand] in order to get expanded field descriptions, specify 'projects.issuetypes.fields' here.","     * @param [callback] Called when the metadata has been retrieved.","     * @return {Promise} Resolved when the metadata has been retrieved.","     */","    this.getCreateMetadata = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/issue/createmeta'),","            method: 'GET',","            followAllRedirects: true,","            json: true,","            qs: {","                projectIds: opts.projectIds,","                projectKeys: opts.projectKeys,","                issuetypeIds: opts.issuetypeIds,","                issuetypeNames: opts.issuetypeNames,","                expand: opts.expand","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Creates issues or sub-tasks from a JSON representation.","     *","     * Creates many issues in one bulk operation.","     *","     * Creating a sub-task is similar to creating a regular issue. More details can be found in createIssue section:","     * {@link IssueResource#createIssue(IssueUpdateBean)}}","     *","     * @method bulkCreate","     * @memberof IssueClient#","     * @param issues See {@link https://docs.atlassian.com/jira/REST/latest/#d2e828}","     * @param [callback] Called when the issues have been created.","     * @return {Promise} Resolved when the issues have been created.","     */","    this.bulkCreate = function (issues, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/issue/bulk'),","            method: 'POST',","            followAllRedirects: true,","            json: true,","            body: issues","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns a full representation of the issue for the given issue key.","     *","     * An issue JSON consists of the issue key, a collection of fields, a link to the workflow transition sub-resource,","     * and (optionally) the HTML rendered values of any fields that support it (e.g. if wiki syntax is enabled for the","     * description or comments).","     *","     * The fields param (which can be specified multiple times) gives a comma-separated list of fields to include in","     * the response. This can be used to retrieve a subset of fields. A particular field can be excluded by prefixing","     * it with a minus.","     *","     * By default, all (\\*all) fields are returned in this get-issue resource. Note: the default is different when doing","     * a jql search -- the default there is just navigable fields (\\*navigable).","     *","     * * \\*all - include all fields","     * * \\*navigable - include just navigable fields","     * * summary,comment - include just the summary and comments","     * * -comment - include everything except comments (the default is *all for get-issue)","     * * \\*all,-comment - include everything except comments","     *","     * JIRA will attempt to identify the issue by the issueIdOrKey path parameter. This can be an issue id, or an issue","     * key. If the issue cannot be found via an exact match, JIRA will also look for the issue in a case-insensitive","     * way, or by looking to see if the issue was moved. In either of these cases, the request will proceed as normal","     * (a 302 or other redirect will not be returned). The issue key contained in the response will indicate the","     * current value of issue's key.","     *","     * @method getIssue","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *        issueKey property; issueId will be used over issueKey if both are present.","     * @param {boolean} [opts.agile] Whether or not to call the agile version of this endpoint.  Defaults to false.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {Object} [opts.fields] See {@link https://docs.atlassian.com/jira/REST/latest/#d2e611}","     * @param {Object} [opts.expand] See {@link https://docs.atlassian.com/jira/REST/latest/#d2e611}","     * @param {Object} [opts.properties] See {@link https://docs.atlassian.com/jira/REST/latest/#d2e611}","     * @param [callback] Called when data has been retrieved","     * @return {Promise} Resolved when data has been retrieved","     */","    this.getIssue = function (opts, callback) {","        if (!opts.agile) {","            var options = this.buildRequestOptions(opts, '', 'GET');","        } else {","            var endpoint = '/issue/' + (opts.issueId || opts.issueKey);","            var options = {","                uri: this.jiraClient.buildAgileURL(endpoint),","                method: 'GET',","                json: true,","                followAllRedirects: true,","                qs: {","                    filter: opts.filter,","                    startAt: opts.startAt,","                    maxResults: opts.maxResults,","                    expand: opts.expand","                }","            };","        }","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Delete an issue. If the issue has subtasks you must set the parameter deleteSubtasks=true to delete the issue.","     * You cannot delete an issue without its subtasks also being deleted.","     *","     * @method deleteIssue","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *        issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {boolean} [opts.deleteSubTasks] \"a String of true or false indicating that any subtasks should also","     *        be deleted. If the issue has no subtasks this parameter is ignored. If the issue has subtasks and this","     *        parameter is missing or false, then the issue will not be deleted and an error will be returned.\"","     * @param [callback] Called when data has been retrieved","     * @return {Promise} Resolved when data has been retrieved","     */","    this.deleteIssue = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'DELETE', null, {deleteSubTasks: opts.deleteSubTasks});","","        return this.jiraClient.makeRequest(options, callback, 'Issue Deleted');","    };","","    /**","     *  Edits an issue from a JSON representation.","     *","     * The issue can either be updated by setting explicit the field value(s) or by using an operation to change the","     * field value.","     *","     * The fields that can be updated, in either the fields parameter or the update parameter, can be determined using","     * the {@link IssueClient#getEditMetadata} method. If a field is not configured to appear on the edit","     * screen, then it will not be in the editmeta, and a field validation error will occur if it is submitted.","     *","     * Specifying a \"field_id\": field_value in the \"fields\" is a shorthand for a \"set\" operation in the \"update\"","     * section. Field should appear either in \"fields\" or \"update\", not in both.","     *","     * @method editIssue","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *        issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {Object} opts.issue See {@link https://docs.atlassian.com/jira/REST/latest/#d2e656}","     * @param [callback] Called when data has been retrieved","     * @return {Promise} Resolved when data has been retrieved","     */","    this.editIssue = function (opts, callback) {","        if (!opts.issue) {","            throw new Error(errorStrings.NO_ISSUE_ERROR);","        }","        var options = this.buildRequestOptions(opts, '', 'PUT', opts.issue, opts.qs);","","        return this.jiraClient.makeRequest(options, callback, 'Issue Updated');","    };","","    /**","     * Assigns an issue to a user. You can use this resource to assign issues when the user submitting the request has","     * the assign permission but not the edit issue permission. If the name is \"-1\" automatic assignee is used. A null","     * name will remove the assignee.","     *","     * @method assignIssue","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *        issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.assignee The name of the user to whom to assign the issue. -1 for default, null for no","     *     assignee.","     * @param [callback] Called when the issue has been assigned.","     * @return {Promise} Resolved when the issue has been assigned.","     */","    this.assignIssue = function (opts, callback) {","        if (!(typeof opts.assignee === \"string\" && opts.assignee.length || opts.assignee === null)) {","            throw new Error(errorStrings.NO_ASSIGNEE_ERROR);","        }","","        var options = this.buildRequestOptions(opts, '/assignee', 'PUT', {name: opts.assignee});","","        return this.jiraClient.makeRequest(options, callback, 'Issue Assigned');","    };","","    /**","     * Get all the comments for an issue.","     *","     * @method getComments","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *        issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {Object} opts.expand See {@link https://docs.atlassian.com/jira/REST/latest/#d2e461}","     * @param [callback] Called when the issue has been assigned.","     * @return {Promise} Resolved when the issue has been assigned.","     */","    this.getComments = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/comment', 'GET');","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Add a comment to an issue","     *","     * @method addComment","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *        issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {Object} opts.comment See {@link https://docs.atlassian.com/jira/REST/latest/#d2e482}","     * @param [callback] Called when data has been retrieved","     * @return {Promise} Resolved when data has been retrieved","     */","    this.addComment = function (opts, callback) {","        var options;","        if(opts.comment.body) {","            options = this.buildRequestOptions(opts, '/comment', 'POST', opts.comment);","        } else {","            options = this.buildRequestOptions(opts, '/comment', 'POST', {body: opts.comment});","        }","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get a specific comment.","     *","     * @method getComment","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *        issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.commentId The id of the comment.","     * @param [callback] Called when the comment is retrieved.","     * @return {Promise} Resolved when the comment is retrieved.","     */","    this.getComment = function (opts, callback) {","        if (!opts.commentId) {","            throw new Error(errorStrings.NO_COMMENT_ID);","        }","        var options = this.buildRequestOptions(opts, '/comment/' + opts.commentId, 'GET');","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Updates an existing comment using its JSON representation.","     *","     * @method editComment","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *        issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.commentId The id of the comment.","     * @param {Object} opts.comment See {@link https://docs.atlassian.com/jira/REST/latest/#d2e539}","     * @param [callback] Called when data has been retrieved","     * @return {Promise} Resolved when data has been retrieved","     */","    this.editComment = function (opts, callback) {","        if (!opts.comment) {","            throw new Error(errorStrings.NO_COMMENT_ERROR);","        } else if (!opts.commentId) {","            throw new Error(errorStrings.NO_COMMENT_ID);","        }","        var options = this.buildRequestOptions(opts, '/comment/' + opts.commentId, 'PUT', opts.comment);","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Delete an existing comment.","     *","     * @method deleteComment","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *        issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.commentId The id of the comment.","     * @param [callback] Called when the comment is retrieved.","     * @return {Promise} Resolved when the comment is retrieved.","     */","    this.deleteComment = function (opts, callback) {","        if (!opts.commentId) {","            throw new Error(errorStrings.NO_COMMENT_ID);","        }","        var options = this.buildRequestOptions(opts, '/comment/' + opts.commentId, 'DELETE');","","        return this.jiraClient.makeRequest(options, callback, 'Comment Deleted');","    };","","    /**","     * Returns the meta data for editing an issue.","     *","     * The fields in the editmeta correspond to the fields in the edit screen for the issue. Fields not in the screen","     * will not be in the editemeta.","     *","     * @method getEditMetadata","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *        issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param [callback] Called when the metadata is retrieved.","     * @return {Promise} Resolved when the metadata is retrieved.","     */","    this.getEditMetadata = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/editmeta', 'GET');","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Sends a notification (email) to the list or recipients defined in the request.","     * A couple of notes: this may call back with the error 'No recipients were defined for notification.' if all","     * of the intended recipients have disabled notifications from Jira.","     *","     * @method sendEmailNotification","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *        issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {Object} opts.notification See {@link https://docs.atlassian.com/jira/REST/latest/#d2e435}","     * @param [callback] Called when the metadata is retrieved.","     * @return {Promise} Resolved when the metadata is retrieved.","     */","    this.sendEmailNotification = function (opts, callback) {","        if (!opts.notification) {","            throw new Error(errorStrings.NO_NOTIFICATION_ERROR);","        }","","        var options = this.buildRequestOptions(opts, '/notify', 'POST', opts.notification);","","        return this.jiraClient.makeRequest(options, callback, 'Notifications Sent');","    };","","    /**","     * Get a REST sub-resource representing the remote issue links on the issue.","     *","     * @method getRemoteLinks","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.globalId The id of the remote issue link to be returned. If null (not provided) all remote","     *     links for the issue are returned. For a full explanation of Issue Link fields please refer to","     *     {@link https://developer.atlassian.com/display/JIRADEV/Fields+in+Remote+Issue+Links}","     * @param [callback] Called when the remote links are retrieved.","     * @return {Promise} Resolved when the remote links are retrieved.","     */","    this.getRemoteLinks = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/remotelink', 'GET', null, {globalId: opts.globalId});","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Creates (or updates) a remote issue link from a JSON representation. If a globalId is provided and a remote issue","     * link exists with that globalId, the remote issue link is updated. Otherwise, the remote issue link is created.","     *","     * @method createRemoteLink","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {Object} opts.remoteLink See {@link https://docs.atlassian.com/jira/REST/latest/#d2e945}","     * @param [callback] Called when the remote links are retrieved.","     * @return {Promise} Resolved when the remote links are retrieved.","     */","    this.createRemoteLink = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/remotelink', 'POST', opts.remoteLink);","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Updates (or creates) a remote issue link from a JSON representation. If a globalId is provided and a remote issue","     * link exists with that globalId, the remote issue link is updated. Otherwise, the remote issue link is created.","     *","     * @method updateRemoteLink","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {Object} opts.remoteLink See {@link https://docs.atlassian.com/jira/REST/latest/#d2e945}","     * @param [callback] Called when the remote links are retrieved.","     * @return {Promise} Resolved when the remote links are retrieved.","     */","    this.updateRemoteLink = function (opts, callback) {","        // The one API endpoint handles both updates and creation.","        this.createRemoteLink(opts, callback);","    };","","    /**","     * Delete the remote issue link with the given global id on the issue.","     *","     * @method deleteRemoteLink","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.globalId The global id of the remote issue link","     * @param [callback] Called when the remote links are retrieved.","     * @return {Promise} Resolved when the remote links are retrieved.","     */","    this.deleteRemoteLink = function (opts, callback) {","        if (!opts.globalId) {","            throw new Error(errorStrings.NO_GLOBAL_ID_ERROR);","        }","","        var options = this.buildRequestOptions(opts, '/remotelink', 'DELETE', null, {globalId: opts.globalId});","","        return this.jiraClient.makeRequest(options, callback, 'RemoteLink Deleted');","    };","","    /**","     * Get the remote issue link with the given id on the issue.","     *","     * @method getRemoteLinkById","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.linkId The id of the remote link","     * @param [callback] Called when the remote links are retrieved.","     * @return {Promise} Resolved when the remote links are retrieved.","     */","    this.getRemoteLinkById = function (opts, callback) {","        if (!opts.linkId) {","            throw new Error(errorStrings.NO_LINK_ID_ERROR);","        }","","        var options = this.buildRequestOptions(opts, '/remotelink/' + opts.linkId, 'GET');","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get the remote issue link with the given id on the issue.","     *","     * @method updateRemoteLinkById","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.linkId The id of the remote link","     * @param {string} opts.remoteLink See {@link https://docs.atlassian.com/jira/REST/latest/#d2e1037}","     * @param [callback] Called when the remote links are retrieved.","     * @return {Promise} Resolved when the remote links are retrieved.","     */","    this.updateRemoteLinkById = function (opts, callback) {","        if (!opts.linkId) {","            throw new Error(errorStrings.NO_LINK_ID_ERROR);","        }","","        var options = this.buildRequestOptions(opts, '/remotelink/' + opts.linkId, 'PUT', opts.remoteLink);","","        return this.jiraClient.makeRequest(options, callback, 'RemoteLink Updated');","    };","","    /**","     * Get the remote issue link with the given id on the issue.","     *","     * @method deleteRemoteLinkById","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.linkId The id of the remote link","     * @param [callback] Called when the remote links are retrieved.","     * @return {Promise} Resolved when the remote links are retrieved.","     */","    this.deleteRemoteLinkById = function (opts, callback) {","        if (!opts.linkId) {","            throw new Error(errorStrings.NO_LINK_ID_ERROR);","        }","","        var options = this.buildRequestOptions(opts, '/remotelink/' + opts.linkId, 'DELETE');","","        return this.jiraClient.makeRequest(options, callback, 'RemoteLink Deleted');","    };","","    /**","     * Get a list of the transitions possible for this issue by the current user, along with fields that are required","     * and their types.","     *","     * Fields will only be returned if ```expand=transitions.fields.```","     *","     * The fields in the metadata correspond to the fields in the transition screen for that transition. Fields not in","     * the screen will not be in the metadata.","     *","     * @method getTransitions","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.transitionId If specified, will call back with only the transition with the specified id.","     * @param [callback] Called when the transitions are retrieved.","     * @return {Promise} Resolved when the transitions are retrieved.","     */","    this.getTransitions = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/transitions', 'GET', null, {transitionId: opts.transitionId});","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Perform a transition on an issue. When performing the transition you can udate or set other issue fields.","     *","     * The fields that can be set on transtion, in either the fields parameter or the update parameter can be","     * determined using the** /rest/api/2/issue/{issueIdOrKey}/transitions?expand=transitions.fields resource**. If a","     * field is not configured to appear on the transition screen, then it will not be in the transition metadata, and","     * a field validation error will occur if it is submitted.","     *","     * @method transitionIssue","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.transition See {@link https://docs.atlassian.com/jira/REST/latest/#d2e698}","     * @param [callback] Called when the transitions are retrieved.","     * @return {Promise} Resolved when the transitions are retrieved.","     */","    this.transitionIssue = function (opts, callback) {","        if (!opts.transition) {","            throw new Error(errorStrings.NO_TRANSITION_ERROR);","        }","","        var options;","        if(!opts.transition.transition) { // To keep backwards compatibility","            options = this.buildRequestOptions(opts, '/transitions', 'POST', opts);","        } else {","            options = this.buildRequestOptions(opts, '/transitions', 'POST', opts.transition)","        }","        return this.jiraClient.makeRequest(options, callback, 'Issue Transitioned');","    };","","    /**","     * Remove your vote from an issue. (i.e. \"unvote\")","     *","     * @method unvote","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param [callback] Called after the vote is removed.","     * @return {Promise} Resolved after the vote is removed.","     */","    this.unvote = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/votes', 'DELETE');","","        return this.jiraClient.makeRequest(options, callback, 'Vote Removed');","    };","","    /**","     * Cast your vote in favour of an issue.","     *","     * @method vote","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param [callback] Called after the vote is removed.","     * @return {Promise} Resolved after the vote is removed.","     */","    this.vote = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/votes', 'POST');","","        return this.jiraClient.makeRequest(options, callback, 'Vote Added');","    };","","    /**","     * Get a REST sub-resource representing the voters on the issue.","     *","     * @method getVotes","     * @memberof IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param [callback] Called after the votes are retrieved.","     * @return {Promise} Resolved after the votes are retrieved.","     */","    this.getVotes = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/votes', 'GET');","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns the list of watchers for the issue with the given key.","     *","     * @method getWatchers","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param [callback] Called after the watchers are retrieved.","     * @return {Promise} Resolved after the watchers are retrieved.","     */","    this.getWatchers = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/watchers', 'GET');","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Adds a user to an issue's watcher list.","     *","     * @method addWatcher","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.watcher The username of the user to add as a watcher.","     * @param [callback] Called after the watcher is added.","     * @return {Promise} Resolved after the watcher is added.","     */","    this.addWatcher = function (opts, callback) {","        if (!opts.watcher) {","            throw new Error(errorStrings.NO_WATCHER_ERROR);","        }","        var options = this.buildRequestOptions(opts, '/watchers', 'POST', opts.watcher);","","        return this.jiraClient.makeRequest(options, callback, 'Watcher Added');","    };","","    /**","     * Adds a user to an issue's watcher list.","     *","     * @method removeWatcher","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.watcher The username of the user to remove as a watcher.","     * @param [callback] Called after the watcher is removed.","     * @return {Promise} Resolved after the watcher is removed.","     */","    this.removeWatcher = function (opts, callback) {","        if (!opts.watcher) {","            throw new Error(errorStrings.NO_WATCHER_ERROR);","        }","        var options = this.buildRequestOptions(opts, '/watchers', 'DELETE', null, {username: opts.watcher});","","        return this.jiraClient.makeRequest(options, callback, 'Watcher Removed');","    };","","    /**","     * Gets all work logs for an issue.","     *","     * @method getWorkLogs","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param [callback] Called after the worklogs are retrieved.","     * @return {Promise} Resolved after the worklogs are retrieved.","     */","    this.getWorkLogs = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/worklog', 'GET');","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Adds a new worklog entry to an issue.","     *","     * @method addWorkLog","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} [opts.adjustEstimate] Allows you to provide specific instructions to update the remaining time","     *     estimate of the issue. Valid values are","     *     * \"new\" - sets the estimate to a specific value","     *     * \"leave\"- leaves the estimate as is","     *     * \"manual\" - specify a specific amount to increase remaining estimate by","     *     * \"auto\"- Default option. Will automatically adjust the value based on the","     *          new timeSpent specified on the worklog","     * @param {string} [opts.newEstimate] (required when \"new\" is selected for adjustEstimate) the new value for the","     *     remaining estimate field. e.g. \"2d\"","     * @param {string} [opts.reduceBy] (required when \"manual\" is selected for adjustEstimate) the amount to reduce the","     *     remaining estimate by e.g. \"2d\"","     * @param {Object} opts.worklog See {@link: https://docs.atlassian.com/jira/REST/latest/#d2e1106}","     * @param [callback] Called after the worklog is added.","     * @return {Promise} Resolved after the worklog is added.","     */","    this.addWorkLog = function (opts, callback) {","        if (!opts.worklog) {","            throw new Error(errorStrings.NO_WORKLOG_ERROR);","        }","        var options = this.buildRequestOptions(opts, '/worklog', 'POST', opts.worklog, {","            newEstimate: opts.newEstimate,","            reduceBy: opts.reduceBy,","            adjustEstimate: opts.adjustEstimate","        });","","        return this.jiraClient.makeRequest(options, callback, 'Worklog Added');","    };","","    /**","     * Gets a specific worklog.","     *","     * @method getWorkLog","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.worklogId The id of the work log to retrieve.","     * @param [callback] Called after the worklog is retrieved.","     * @return {Promise} Resolved after the worklog is retrieved.","     */","    this.getWorkLog = function (opts, callback) {","        if (!opts.worklogId) {","            throw new Error(errorStrings.NO_WORKLOG_ID_ERROR);","        }","        var options = this.buildRequestOptions(opts, '/worklog/' + opts.worklogId, 'GET');","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Updates an existing worklog entry using its JSON representation.","     *","     * @method updateWorkLog","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.worklogId The id of the work log to retrieve.","     * @param {string} [opts.adjustEstimate] Allows you to provide specific instructions to update the remaining time","     *     estimate of the issue. Valid values are","     *     * \"new\" - sets the estimate to a specific value","     *     * \"leave\"- leaves the estimate as is","     *     * \"auto\"- Default option. Will automatically adjust the value based on the","     *          new timeSpent specified on the worklog","     * @param {string} [opts.newEstimate] (required when \"new\" is selected for adjustEstimate) the new value for the","     *     remaining estimate field. e.g. \"2d\"","     * @param {Object} opts.worklog See {@link: https://docs.atlassian.com/jira/REST/latest/#d2e1161}","     * @param [callback] Called after the worklog is updated.","     * @return {Promise} Resolved after the worklog is updated.","     */","    this.updateWorkLog = function (opts, callback) {","        if (!opts.worklogId) {","            throw new Error(errorStrings.NO_WORKLOG_ID_ERROR);","        } else if (!opts.worklog) {","            throw new Error(errorStrings.NO_WORKLOG_ERROR);","        }","","        var options = this.buildRequestOptions(opts, '/worklog/' + opts.worklogId, 'PUT', opts.worklog, {","            newEstimate: opts.newEstimate,","            adjustEstimate: opts.adjustEstimate","        });","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Deletes an existing worklog entry","     *","     * @method deleteWorkLog","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.worklogId The id of the work log to delete.","     * @param {string} [opts.adjustEstimate] Allows you to provide specific instructions to update the remaining time","     *     estimate of the issue. Valid values are","     *     * \"new\" - sets the estimate to a specific value","     *     * \"leave\"- leaves the estimate as is","     *     * \"manual\" - specify a specific amount to increase remaining estimate by","     *     * \"auto\"- Default option. Will automatically adjust the value based on the","     *          new timeSpent specified on the worklog","     * @param {string} [opts.newEstimate] (required when \"new\" is selected for adjustEstimate) the new value for the","     *     remaining estimate field. e.g. \"2d\"","     * @param {string} [opts.increaseBy] (required when \"manual\" is selected for adjustEstimate) the amount to reduce","     *     the remaining estimate by e.g. \"2d\"","     * @param [callback] Called after the work log is deleted.","     * @return {Promise} Resolved after the work log is deleted.","     */","    this.deleteWorkLog = function (opts, callback) {","        if (!opts.worklogId) {","            throw new Error(errorStrings.NO_WORKLOG_ID_ERROR);","        }","        var options = this.buildRequestOptions(opts, '/worklog/' + opts.worklogId, 'DELETE', null, {","            newEstimate: opts.newEstimate,","            increaseBy: opts.increaseBy,","            adjustEstimate: opts.adjustEstimate","        });","        return this.jiraClient.makeRequest(options, callback, 'Work Log Deleted');","    };","","    /**","     * Add an attachments to an issue.","     *","     * @method addAttachment","     * @memberOf IssueClient","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.filename The file name of attachment. If you pass an array of filenames, multiple attachments will be added.","     * @param [callback] Called when the attachment has been attached.","     * @return {Promise} Resolved when the attachment has been attached.","     */","    this.addAttachment = function (opts, callback) {","        if (!opts.filename) {","            throw new Error(errorStrings.NO_FILENAME_ERROR);","        }","        var options = this.buildRequestOptions(opts, '/attachments', 'POST');","        delete options.body;","        if (opts.filename.constructor !== Array) opts.filename = [opts.filename];","        var attachments = opts.filename.map (function (filename) {return fs.createReadStream(filename)});","        options.formData = {file: attachments};","        options.headers = {","            \"X-Atlassian-Token\": \"nocheck\"","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns the keys of all properties for the issue identified by the key or by the id.  This function is maked as","     * experimental in the Jira API docs, use at your own risk.","     *","     * @method getProperties","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param [callback] Called when the properties are retrieved.","     * @return {Promise} Resolved when the properties are retrieved.","     */","    this.getProperties = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/properties', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Sets the value of the specified issue's property. You can use this resource to store a custom data against the","     * issue identified by the key or by the id. The user who stores the data is required to have permissions to edit","     * the issue.","     *","     * This function is maked as experimental in the Jira API docs, use at your own risk.","     *","     * @method setProperty","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.propertyKey The key of the property being set.","     * @param {Object} opts.propertyValue The value of the property being set.","     * @param [callback] Called when the property is set.","     * @return {Promise} Resolved when the property is set.","     */","    this.setProperty = function (opts, callback) {","        if (!opts.propertyKey) {","            throw new Error(errorStrings.NO_PROPERTY_KEY_ERROR);","        } else if (!opts.propertyValue) {","            throw new Error(errorStrings.NO_PROPERTY_VALUE_ERROR);","        }","        var options = this.buildRequestOptions(opts, '/properties/' + opts.propertyKey, 'PUT', opts.propertyValue);","        return this.jiraClient.makeRequest(options, callback, 'Property Set');","    };","","    /**","     * Returns the value of the property with a given key from the issue identified by the key or by the id. The user","     * who retrieves the property is required to have permissions to read the issue.","     *","     * This function is maked as experimental in the Jira API docs, use at your own risk.","     *","     * @method getProperty","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.propertyKey The key of the property being set.","     * @param [callback] Called when the property is retrieved.","     * @return {Promise} Resolved when the property is retrieved.","     */","    this.getProperty = function (opts, callback) {","        if (!opts.propertyKey) {","            throw new Error(errorStrings.NO_PROPERTY_KEY_ERROR);","        }","        var options = this.buildRequestOptions(opts, '/properties/' + opts.propertyKey, 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Removes the property from the issue identified by the key or by the id. Ths user removing the property is","     * required to have permissions to edit the issue.","     *","     * This function is maked as experimental in the Jira API docs, use at your own risk.","     *","     * @method getProperty","     * @memberOf IssueClient#","     * @param {Object} opts The options to pass to the API.  Note that this object must contain EITHER an issueId or","     *     issueKey property; issueId will be used over issueKey if both are present.","     * @param {string} [opts.issueId] The id of the issue.  EX: 10002","     * @param {string} [opts.issueKey] The Key of the issue.  EX: JWR-3","     * @param {string} opts.propertyKey The key of the property being set.","     * @param [callback] Called when the property is deleted.","     * @return {Promise} Resolved when the property is deleted.","     */","    this.deleteProperty = function (opts, callback) {","        if (!opts.propertyKey) {","            throw new Error(errorStrings.NO_PROPERTY_KEY_ERROR);","        }","        var options = this.buildRequestOptions(opts, '/properties/' + opts.propertyKey, 'DELETE');","        return this.jiraClient.makeRequest(options, callback, 'Property Deleted');","    };","","    /**","     * Build out the request options necessary to make a particular API call.","     *","     * @private","     * @method buildRequestOptions","     * @param {Object} opts The arguments passed to the method.","     * @param {string} path The path of the endpoint following /issue/{idOrKey}","     * @param {string} method The request method.","     * @param {Object} [body] The request body, if any.","     * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.","     * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}","     */","    this.buildRequestOptions = function (opts, path, method, body, qs) {","        if (!opts.issueId && !opts.issueKey) {","            throw new Error(errorStrings.NO_ISSUE_IDENTIFIER);","        }","        var idOrKey = opts.issueId || opts.issueKey;","        var basePath = '/issue/' + idOrKey;","        if (!qs) qs = {};","        if (!body) body = {};","","        if (opts.fields) {","            qs.fields = '';","            opts.fields.forEach(function (field) {","                qs.fields += field + ','","            });","        }","","        if (opts.expand) {","            qs.expand = '';","            opts.expand.forEach(function (ex) {","                qs.expand += ex + ','","            });","        }","","        if (opts.properties) {","            qs.properties = '';","            opts.properties.forEach(function (prop) {","                qs.properties += prop + ','","            });","        }","","        return {","            uri: this.jiraClient.buildURL(basePath + path),","            method: method,","            body: body,","            qs: qs,","            followAllRedirects: true,","            json: true","        };","    }","","}",""],"l":{"3":1,"4":1,"6":1,"13":1,"14":0,"33":0,"34":0,"35":0,"48":0,"68":0,"69":0,"70":0,"86":0,"99":0,"100":0,"108":0,"131":0,"132":0,"140":0,"176":0,"177":0,"191":0,"208":0,"209":0,"217":0,"259":0,"260":0,"261":0,"263":0,"264":0,"278":0,"297":0,"298":0,"300":0,"326":0,"327":0,"328":0,"330":0,"332":0,"351":0,"352":0,"353":0,"356":0,"358":0,"374":0,"375":0,"377":0,"393":0,"394":0,"395":0,"396":0,"398":0,"401":0,"417":0,"418":0,"419":0,"421":0,"423":0,"440":0,"441":0,"442":0,"443":0,"444":0,"446":0,"448":0,"464":0,"465":0,"466":0,"468":0,"470":0,"488":0,"489":0,"491":0,"509":0,"510":0,"511":0,"514":0,"516":0,"534":0,"535":0,"537":0,"554":0,"555":0,"557":0,"574":0,"576":0,"592":0,"593":0,"594":0,"597":0,"599":0,"615":0,"616":0,"617":0,"620":0,"622":0,"639":0,"640":0,"641":0,"644":0,"646":0,"662":0,"663":0,"664":0,"667":0,"669":0,"691":0,"692":0,"694":0,"715":0,"716":0,"717":0,"720":0,"721":0,"722":0,"724":0,"726":0,"741":0,"742":0,"744":0,"759":0,"760":0,"762":0,"777":0,"778":0,"780":0,"795":0,"796":0,"798":0,"814":0,"815":0,"816":0,"818":0,"820":0,"836":0,"837":0,"838":0,"840":0,"842":0,"857":0,"858":0,"860":0,"887":0,"888":0,"889":0,"891":0,"897":0,"913":0,"914":0,"915":0,"917":0,"919":0,"944":0,"945":0,"946":0,"947":0,"948":0,"951":0,"956":0,"983":0,"984":0,"985":0,"987":0,"992":0,"1008":0,"1009":0,"1010":0,"1012":0,"1013":0,"1014":0,"1015":0,"1016":0,"1017":0,"1021":0,"1037":0,"1038":0,"1039":0,"1060":0,"1061":0,"1062":0,"1063":0,"1064":0,"1066":0,"1067":0,"1086":0,"1087":0,"1088":0,"1090":0,"1091":0,"1110":0,"1111":0,"1112":0,"1114":0,"1115":0,"1130":0,"1131":0,"1132":0,"1134":0,"1135":0,"1136":0,"1137":0,"1139":0,"1140":0,"1141":0,"1142":0,"1146":0,"1147":0,"1148":0,"1149":0,"1153":0,"1154":0,"1155":0,"1156":0,"1160":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/issueLink.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/issueLink.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"IssueLinkClient","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":37}}},"2":{"name":"(anonymous_2)","line":32,"loc":{"start":{"line":32,"column":27},"end":{"line":32,"column":53}}},"3":{"name":"(anonymous_3)","line":58,"loc":{"start":{"line":58,"column":24},"end":{"line":58,"column":50}}},"4":{"name":"(anonymous_4)","line":84,"loc":{"start":{"line":84,"column":27},"end":{"line":84,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":33}},"3":{"start":{"line":12,"column":0},"end":{"line":98,"column":1}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":33}},"5":{"start":{"line":32,"column":4},"end":{"line":46,"column":6}},"6":{"start":{"line":33,"column":8},"end":{"line":35,"column":9}},"7":{"start":{"line":34,"column":12},"end":{"line":34,"column":62}},"8":{"start":{"line":37,"column":8},"end":{"line":43,"column":10}},"9":{"start":{"line":45,"column":8},"end":{"line":45,"column":84}},"10":{"start":{"line":58,"column":4},"end":{"line":71,"column":6}},"11":{"start":{"line":59,"column":8},"end":{"line":61,"column":9}},"12":{"start":{"line":60,"column":12},"end":{"line":60,"column":65}},"13":{"start":{"line":63,"column":8},"end":{"line":68,"column":10}},"14":{"start":{"line":70,"column":8},"end":{"line":70,"column":62}},"15":{"start":{"line":84,"column":4},"end":{"line":97,"column":6}},"16":{"start":{"line":85,"column":8},"end":{"line":87,"column":9}},"17":{"start":{"line":86,"column":12},"end":{"line":86,"column":65}},"18":{"start":{"line":89,"column":8},"end":{"line":94,"column":10}},"19":{"start":{"line":96,"column":8},"end":{"line":96,"column":84}}},"branchMap":{"1":{"line":33,"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":33,"column":8}},{"start":{"line":33,"column":8},"end":{"line":33,"column":8}}]},"2":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":8},"end":{"line":59,"column":8}},{"start":{"line":59,"column":8},"end":{"line":59,"column":8}}]},"3":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":8},"end":{"line":85,"column":8}},{"start":{"line":85,"column":8},"end":{"line":85,"column":8}}]}},"code":["\"use strict\";","","var errorStrings = require('./../lib/error');","","module.exports = IssueLinkClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/issueLink'"," * @param {JiraClient} jiraClient"," * @constructor IssueLinkClient"," */","function IssueLinkClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Creates an issue link between two issues. The user requires the link issue permission for the issue which will","     * be linked to another issue. The specified link type in the request is used to create the link and will create a","     * link from the first issue to the second issue using the outward description. It also create a link from the","     * second issue to the first issue using the inward description of the issue link type. It will add the supplied","     * comment to the first issue. The comment can have a restriction who can view it. If group is specified, only","     * users of this group can view this comment, if roleLevel is specified only users who have the specified role can","     * view this comment. The user who creates the issue link needs to belong to the specified group or have the","     * specified role.","     *","     * @memberOf IssueLinkClient#","     * @method createIssueLink","     * @param opts The options for the request sent to the Jira API","     * @param opts.issueLink See {@link https://docs.atlassian.com/jira/REST/latest/#d2e5010}","     * @param [callback] Called when the link has been created.","     * @return {Promise} Resolved when the link has been created.","     */","    this.createIssueLink = function (opts, callback) {","        if (!opts.issueLink) {","            throw new Error(errorStrings.NO_ISSUE_LINK_ERROR);","        }","","        var options = {","            method: 'POST',","            uri: this.jiraClient.buildURL('/issueLink'),","            json: true,","            followAllRedirects: true,","            body: opts.issueLink","        };","","        return this.jiraClient.makeRequest(options, callback, 'Issue Link Created');","    };","","    /**","     * Gets an issue link with the specified id.","     *","     * @method getIssueLink","     * @memberOf IssueLinkClient#","     * @param opts The options used in the request to the Jira API","     * @param opts.linkId The id of the link to retrieve.","     * @param [callback] Called when the Issue Link has been retrieved.","     * @return {Promise} Resolved when the Issue Link has been retrieved.","     */","    this.getIssueLink = function (opts, callback) {","        if (!opts.linkId) {","            throw new Error(errorStrings.NO_ISSUE_LINK_ID_ERROR);","        }","","        var options = {","            method: 'GET',","            uri: this.jiraClient.buildURL('/issueLink/' + opts.linkId),","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Deletes an issue link with the specified id. To be able to delete an issue link you must be able to view both","     * issues and must have the link issue permission for at least one of the issues.","     *","     * @method deleteIssueLink","     * @memberOf IssueLinkClient#","     * @param opts The options used in the request to the Jira API","     * @param opts.linkId The id of the link to delete.","     * @param [callback] Called when the Issue Link has been deleted.","     * @return {Promise} Resolved when the Issue Link has been deleted.","     */","    this.deleteIssueLink = function (opts, callback) {","        if (!opts.linkId) {","            throw new Error(errorStrings.NO_ISSUE_LINK_ID_ERROR);","        }","","        var options = {","            method: 'DELETE',","            uri: this.jiraClient.buildURL('/issueLink/' + opts.linkId),","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback, 'Issue Link Deleted');","    };","}"],"l":{"3":1,"5":1,"12":1,"13":0,"32":0,"33":0,"34":0,"37":0,"45":0,"58":0,"59":0,"60":0,"63":0,"70":0,"84":0,"85":0,"86":0,"89":0,"96":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/issueLinkType.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/issueLinkType.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"IssueLinkTypeClient","line":12,"loc":{"start":{"line":12,"column":0},"end":{"line":12,"column":41}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":29},"end":{"line":25,"column":55}}},"3":{"name":"(anonymous_3)","line":46,"loc":{"start":{"line":46,"column":31},"end":{"line":46,"column":57}}},"4":{"name":"(anonymous_4)","line":68,"loc":{"start":{"line":68,"column":28},"end":{"line":68,"column":54}}},"5":{"name":"(anonymous_5)","line":93,"loc":{"start":{"line":93,"column":31},"end":{"line":93,"column":57}}},"6":{"name":"(anonymous_6)","line":119,"loc":{"start":{"line":119,"column":29},"end":{"line":119,"column":55}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":45}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":37}},"3":{"start":{"line":12,"column":0},"end":{"line":134,"column":1}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":33}},"5":{"start":{"line":25,"column":4},"end":{"line":34,"column":6}},"6":{"start":{"line":26,"column":8},"end":{"line":31,"column":10}},"7":{"start":{"line":33,"column":8},"end":{"line":33,"column":62}},"8":{"start":{"line":46,"column":4},"end":{"line":56,"column":6}},"9":{"start":{"line":47,"column":8},"end":{"line":53,"column":10}},"10":{"start":{"line":55,"column":8},"end":{"line":55,"column":62}},"11":{"start":{"line":68,"column":4},"end":{"line":81,"column":6}},"12":{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},"13":{"start":{"line":70,"column":12},"end":{"line":70,"column":64}},"14":{"start":{"line":73,"column":8},"end":{"line":78,"column":10}},"15":{"start":{"line":80,"column":8},"end":{"line":80,"column":62}},"16":{"start":{"line":93,"column":4},"end":{"line":106,"column":6}},"17":{"start":{"line":94,"column":8},"end":{"line":96,"column":9}},"18":{"start":{"line":95,"column":12},"end":{"line":95,"column":64}},"19":{"start":{"line":98,"column":8},"end":{"line":103,"column":10}},"20":{"start":{"line":105,"column":8},"end":{"line":105,"column":89}},"21":{"start":{"line":119,"column":4},"end":{"line":133,"column":6}},"22":{"start":{"line":120,"column":8},"end":{"line":122,"column":9}},"23":{"start":{"line":121,"column":12},"end":{"line":121,"column":64}},"24":{"start":{"line":124,"column":8},"end":{"line":130,"column":10}},"25":{"start":{"line":132,"column":8},"end":{"line":132,"column":62}}},"branchMap":{"1":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":69,"column":8}},{"start":{"line":69,"column":8},"end":{"line":69,"column":8}}]},"2":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":8},"end":{"line":94,"column":8}},{"start":{"line":94,"column":8},"end":{"line":94,"column":8}}]},"3":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":8},"end":{"line":120,"column":8}},{"start":{"line":120,"column":8},"end":{"line":120,"column":8}}]}},"code":["\"use strict\";","","var errorStrings = require('./../lib/error');","","module.exports = IssueLinkTypeClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/issueLinkType'"," * @param {JiraClient} jiraClient"," * @constructor IssueLinkTypeClient"," */","function IssueLinkTypeClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Get a list of available issue link types, if issue linking is enabled. Each issue link type has an id, a name","     * and a label for the outward and inward link relationship.","     *","     * @method getAvailableTypes","     * @memberOf IssueLinkTypeClient#","     * @param opts The request options for the API.  Ignored in this function.","     * @param [callback] Called when the available IssueLink types are retrieved.","     * @return {Promise} Resolved when the available IssueLink types are retrieved.","     */","    this.getAvailableTypes = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/issueLinkType'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Create a new issue link type.","     *","     * @method createIssueLinkType","     * @memberOf IssueLinkTypeClient#","     * @param opts The request options sent to the Jira API","     * @param opts.linkType See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2018}","     * @param [callback] Called when the IssueLink type has been created.","     * @return {Promise} Resolved when the IssueLink type has been created.","     */","    this.createIssueLinkType = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/issueLinkType'),","            method: 'POST',","            json: true,","            followAllRedirects: true,","            body: opts.linkType","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Gets for a given issue link type id all information about this issue link type.","     *","     * @method getIssueLinkType","     * @memberOf IssueLinkTypeClient#","     * @param opts The request options sent to the Jira API","     * @param opts.issueLinkTypeId The id of the IssueLink type to retrieve.","     * @param [callback] Called when the IssueLink type has been retrieved","     * @return {Promise} Resolved when the IssueLink type has been retrieved","     */","    this.getIssueLinkType = function (opts, callback) {","        if (!opts.issueLinkTypeId) {","            throw new Error(errorStrings.NO_ISSUE_LINK_TYPE_ID);","        }","","        var options = {","            uri: this.jiraClient.buildURL('/issueLinkType/' + opts.issueLinkTypeId),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Delete the specified issue link type.","     *","     * @method deleteIssueLinkType","     * @memberOf IssueLinkTypeClient#","     * @param opts The request options sent to the Jira API","     * @param opts.issueLinkTypeId The id of the IssueLink type to delete.","     * @param [callback] Called when the IssueLink type has been delete","     * @return {Promise} Resolved when the IssueLink type has been delete","     */","    this.deleteIssueLinkType = function (opts, callback) {","        if (!opts.issueLinkTypeId) {","            throw new Error(errorStrings.NO_ISSUE_LINK_TYPE_ID);","        }","","        var options = {","            uri: this.jiraClient.buildURL('/issueLinkType/' + opts.issueLinkTypeId),","            method: 'DELETE',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback, 'IssueLink type deleted.');","    };","","    /**","     * Update the specified issue link type.","     *","     * @method editIssueLinkType","     * @memberOf IssueLinkTypeClient#","     * @param opts The request options sent to the Jira API","     * @param opts.issueLinkTypeId The id of the IssueLink type to retrieve.","     * @param opts.linkType See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2071}","     * @param [callback] Called when the IssueLink type has been updated.","     * @return {Promise} Resolved when the IssueLink type has been updated.","     */","    this.editIssueLinkType = function (opts, callback) {","        if (!opts.issueLinkTypeId) {","            throw new Error(errorStrings.NO_ISSUE_LINK_TYPE_ID);","        }","","        var options = {","            uri: this.jiraClient.buildURL('/issueLinkType/' + opts.issueLinkTypeId),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            body: opts.issueLinkType","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}"],"l":{"3":1,"5":1,"12":1,"13":0,"25":0,"26":0,"33":0,"46":0,"47":0,"55":0,"68":0,"69":0,"70":0,"73":0,"80":0,"93":0,"94":0,"95":0,"98":0,"105":0,"119":0,"120":0,"121":0,"124":0,"132":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/issueType.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/issueType.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"IssueTypeClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":37}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":28},"end":{"line":23,"column":54}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":24},"end":{"line":44,"column":50}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":33}},"2":{"start":{"line":11,"column":0},"end":{"line":54,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":32,"column":6}},"5":{"start":{"line":24,"column":8},"end":{"line":29,"column":10}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":62}},"7":{"start":{"line":44,"column":4},"end":{"line":53,"column":6}},"8":{"start":{"line":45,"column":8},"end":{"line":50,"column":10}},"9":{"start":{"line":52,"column":8},"end":{"line":52,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = IssueTypeClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/issuetype'"," *"," * @param {JiraClient} jiraClient"," * @constructor IssueTypeClient"," */","function IssueTypeClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns a list of all issue types visible to the user","     *","     * @method getAllIssueTypes","     * @memberOf IssueTypeClient#","     * @param opts Ignored","     * @param [callback] Called when the issue types have been retrieved.","     * @return {Promise} Resolved when the issue types have been retrieved.","     */","    this.getAllIssueTypes = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/issuetype'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get a full representation of the issue type that has the given id.","     *","     * @method getIssueType","     * @memberOf IssueTypeClient#","     * @param opts The options sent to the Jira API","     * @param opts.issueTypeId A String containing an issue type id","     * @param [callback] Called when the issue type has been retrieved.","     * @return {Promise} Resolved when the issue type has been retrieved.","     */","    this.getIssueType = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/issuetype/' + opts.issueTypeId),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}"],"l":{"3":1,"11":1,"12":0,"23":0,"24":0,"31":0,"44":0,"45":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/jql.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/jql.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"JqlClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":31}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":31},"end":{"line":23,"column":57}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":11,"column":0},"end":{"line":33,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":32,"column":5}},"5":{"start":{"line":24,"column":8},"end":{"line":29,"column":10}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":61}}},"branchMap":{},"code":["\"use strict\";","","module.exports = JqlClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/jql/autocompletedata'"," *"," * @param {JiraClient} jiraClient"," * @constructor JqlClient"," */","function JqlClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns the auto complete data required for JQL searches.","     *","     * @method getAutoCompleteData","     * @memberOf JqlClient#","     * @param opts The options sent to the Jira API.  Ignored by this function.","     * @param [callback] Called when the autocomplete data is returned.","     * @return {Promise} Resolved when the autocomplete data is returned.","     */","    this.getAutoCompleteData = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/jql/autocompletedata'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback)","    }","}"],"l":{"3":1,"11":1,"12":0,"23":0,"24":0,"31":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/licenseRole.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/licenseRole.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"LicenseRoleClient","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":39}}},"2":{"name":"(anonymous_2)","line":22,"loc":{"start":{"line":22,"column":30},"end":{"line":22,"column":56}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":26},"end":{"line":43,"column":52}}},"4":{"name":"(anonymous_4)","line":67,"loc":{"start":{"line":67,"column":27},"end":{"line":67,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":35}},"2":{"start":{"line":10,"column":0},"end":{"line":78,"column":1}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":33}},"4":{"start":{"line":22,"column":4},"end":{"line":31,"column":6}},"5":{"start":{"line":23,"column":8},"end":{"line":28,"column":10}},"6":{"start":{"line":30,"column":8},"end":{"line":30,"column":62}},"7":{"start":{"line":43,"column":4},"end":{"line":52,"column":6}},"8":{"start":{"line":44,"column":8},"end":{"line":49,"column":10}},"9":{"start":{"line":51,"column":8},"end":{"line":51,"column":62}},"10":{"start":{"line":67,"column":4},"end":{"line":77,"column":5}},"11":{"start":{"line":68,"column":8},"end":{"line":74,"column":10}},"12":{"start":{"line":76,"column":8},"end":{"line":76,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = LicenseRoleClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/licenserole'"," * @param {JiraClient} jiraClient"," * @constructor LicenseRoleClient"," */","function LicenseRoleClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns all license roles in the system.","     *","     * @method getAllLicenseRoles","     * @memberOf LicenseRoleClient#","     * @param opts Ignored","     * @param [callback] Called when the license roles have been retrieved.","     * @return {Promise} Resolved when the license roles have been retrieved.","     */","    this.getAllLicenseRoles = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/licenserole'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Gets the passed license role if it exists.","     *","     * @method getLicenseRole","     * @memberOf LicenseRoleClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.roleId The id of the license role to retrieve.","     * @param [callback] Called when the license role is retrieved.","     * @return {Promise} Resolved when the license role is retrieved.","     */","    this.getLicenseRole = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/licenserole/' + opts.roleId),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Updates the license role with the passed data. Only the groups of the role may be updated. Requests to change","     * the id or the name of the role will be silently ignored.","     *","     * @method editLicenseRole","     * @memberOf LicenseRoleClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.roleId The id of the license role to retrieve.","     * @param opts.role The new data to place in the role.  See","     *  {@link https://docs.atlassian.com/jira/REST/latest/#d2e365}","     * @param [callback] Called when the license role is edited.","     * @return {Promise} Resolved when the license role is edited.","     */","    this.editLicenseRole = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/licenserole/' + opts.roleId),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            body: opts.role","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"10":1,"11":0,"22":0,"23":0,"30":0,"43":0,"44":0,"51":0,"67":0,"68":0,"76":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/licenseValidator.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/licenseValidator.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"LicenseValidatorClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":44}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":27},"end":{"line":23,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":11,"column":0},"end":{"line":34,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":33,"column":5}},"5":{"start":{"line":24,"column":8},"end":{"line":30,"column":10}},"6":{"start":{"line":32,"column":8},"end":{"line":32,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = LicenseValidatorClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/licenseValidator'"," *"," * @param {JiraClient} jiraClient"," * @constructor LicenseValidatorClient"," */","function LicenseValidatorClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     *","     * @method validateLicense","     * @memberOf LicenseValidatorClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.license The license to validate.","     * @param [callback] Called when the license has been validated, or fails to validate.","     * @return {Promise} Resolved when the license has been validated, or fails to validate.","     */","    this.validateLicense = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/licenseValidator'),","            method: 'POST',","            json: true,","            followAllRedirects: true,","            body: opts.license","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"11":1,"12":0,"23":0,"24":0,"32":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/myPermissions.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/myPermissions.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"MyPermissionsClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}}},"2":{"name":"(anonymous_2)","line":39,"loc":{"start":{"line":39,"column":28},"end":{"line":39,"column":54}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":37}},"2":{"start":{"line":11,"column":0},"end":{"line":49,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":39,"column":4},"end":{"line":48,"column":5}},"5":{"start":{"line":40,"column":8},"end":{"line":45,"column":10}},"6":{"start":{"line":47,"column":8},"end":{"line":47,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = MyPermissionsClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/mypermissions'"," *"," * @param {JiraClient} jiraClient"," * @constructor MyPermissionsClient"," */","function MyPermissionsClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns all permissions in the system and whether the currently logged in user has them. You can optionally","     * provide a specific context to get permissions for (projectKey OR projectId OR issueKey OR issueId)","     *","     * * When no context supplied the project related permissions will return true if the user has that permission in","     * ANY project","     * * If a project context is provided, project related permissions will return true if the user has the permissions","     * in the specified project. For permissions that are determined using issue data (e.g Current Assignee), true will","     * be returned if the user meets the permission criteria in ANY issue in that project","     * * If an issue context is provided, it will return whether or not the user has each permission in that specific","     * issue","     *","     * NB: The above means that for issue-level permissions (EDIT_ISSUE for example), hasPermission may be true when no","     * context is provided, or when a project context is provided, but may be false for any given (or all) issues. This","     * would occur (for example) if Reporters were given the EDIT_ISSUE permission. This is because any user could be a","     * reporter, except in the context of a concrete issue, where the reporter is known.","     *","     * Global permissions will still be returned for all scopes.","     *","     * @method getMyPermissions","     * @memberOf MyPermissionsClient#","     * @param opts The request options sent to the Jira API","     * @param [callback] Called when the permissions have been returned.","     * @return {Promise} Resolved when the permissions have been returned.","     */","    this.getMyPermissions = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/mypermissions'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"11":1,"12":0,"39":0,"40":0,"47":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/myPreferences.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/myPreferences.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"MyPreferencesClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}}},"2":{"name":"(anonymous_2)","line":25,"loc":{"start":{"line":25,"column":25},"end":{"line":25,"column":51}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":26},"end":{"line":50,"column":52}}},"4":{"name":"(anonymous_4)","line":75,"loc":{"start":{"line":75,"column":28},"end":{"line":75,"column":54}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":37}},"2":{"start":{"line":11,"column":0},"end":{"line":88,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":25,"column":4},"end":{"line":37,"column":6}},"5":{"start":{"line":26,"column":8},"end":{"line":34,"column":10}},"6":{"start":{"line":36,"column":8},"end":{"line":36,"column":62}},"7":{"start":{"line":50,"column":4},"end":{"line":63,"column":6}},"8":{"start":{"line":51,"column":8},"end":{"line":60,"column":10}},"9":{"start":{"line":62,"column":8},"end":{"line":62,"column":62}},"10":{"start":{"line":75,"column":4},"end":{"line":87,"column":5}},"11":{"start":{"line":76,"column":8},"end":{"line":84,"column":10}},"12":{"start":{"line":86,"column":8},"end":{"line":86,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = MyPreferencesClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/mypreferences'"," *"," * @param {JiraClient} jiraClient"," * @constructor MyPreferencesClient"," */","function MyPreferencesClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Gets preference of the currently logged in user. Preference key must be provided as input parameter (key).","     * The value is returned exactly as it is.","     *","     * @method getPreference","     * @memberOf MyPreferencesClient#","     * @param opts The request options send to the Jira API.","     * @param opts.key Key of the preference to be returned.","     * @param [callback] Called when the preference has been retrieved.","     * @return {Promise} Resolved when the preference has been retrieved.","     */","    this.getPreference = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/mypreferences'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                key: opts.key","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Sets preference of the currently logged in user. Preference key must be provided as input parameters (key).","     *","     * @method editPreference","     * @memberOf MyPreferencesClient#","     * @param opts The request options send to the Jira API.","     * @param opts.key Key of the preference to be edited.","     * @param opts.value The new value to set for the preference.","     * @param [callback] Called when the preference has been edited.","     * @return {Promise} Resolved when the preference has been edited.","     */","    this.editPreference = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/mypreferences'),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            qs: {","                key: opts.key","            },","            body: opts.value","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Removes preference of the currently logged in user. Preference key must be provided as input parameters (key).","     *","     * @method deletePreference","     * @memberOf MyPreferencesClient#","     * @param opts The request options send to the Jira API.","     * @param opts.key Key of the preference to be deleted.","     * @param [callback] Called when the preference has been deleted.","     * @return {Promise} Resolved when the preference has been deleted.","     */","    this.deletePreference = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/mypreferences'),","            method: 'DELETE',","            json: true,","            followAllRedirects: true,","            qs: {","                key: opts.key","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"11":1,"12":0,"25":0,"26":0,"36":0,"50":0,"51":0,"62":0,"75":0,"76":0,"86":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/myself.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/myself.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"MyselfClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":21},"end":{"line":23,"column":47}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":22},"end":{"line":45,"column":48}}},"4":{"name":"(anonymous_4)","line":67,"loc":{"start":{"line":67,"column":26},"end":{"line":67,"column":52}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":11,"column":0},"end":{"line":78,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":32,"column":6}},"5":{"start":{"line":24,"column":8},"end":{"line":29,"column":10}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":62}},"7":{"start":{"line":45,"column":4},"end":{"line":55,"column":6}},"8":{"start":{"line":46,"column":8},"end":{"line":52,"column":10}},"9":{"start":{"line":54,"column":8},"end":{"line":54,"column":62}},"10":{"start":{"line":67,"column":4},"end":{"line":77,"column":5}},"11":{"start":{"line":68,"column":8},"end":{"line":74,"column":10}},"12":{"start":{"line":76,"column":8},"end":{"line":76,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = MyselfClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/myself'"," *"," * @param {JiraClient} jiraClient"," * @constructor MyselfClient"," */","function MyselfClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns currently logged user. This resource cannot be accessed anonymously.","     *","     * @method getMyself","     * @memberOf MyselfClient#","     * @param opts Ignored","     * @param [callback] Called when the current user is retrieved.","     * @return {Promise} Resolved when the current user is retrieved.","     */","    this.getMyself = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/myself'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Modify currently logged user. The \"value\" fields present will override the existing value. Fields skipped in","     * request will not be changed. Only email and display name can be change that way.","     *","     * @method editMyself","     * @memberOf MyselfClient#","     * @param opts The request options send to the Jira API.","     * @param opts.newData The new data.  See {@link https://docs.atlassian.com/jira/REST/latest/#d2e1242}","     * @param [callback] Called when the user's data has been modified","     * @return {Promise} Resolved when the user's data has been modified","     */","    this.editMyself = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/myself'),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            body: opts.newData","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Modify caller password.","     *","     * @method changePassword","     * @memberOf MyselfClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.newData The new data","     * @param [callback] Called when the password has been changed.","     * @return {Promise} Resolved when the password has been changed.","     */","    this.changePassword = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/myself/password'),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            body: opts.newData","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"11":1,"12":0,"23":0,"24":0,"31":0,"45":0,"46":0,"54":0,"67":0,"68":0,"76":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/lib/oauth_util.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/lib/oauth_util.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"(anonymous_1)","line":35,"loc":{"start":{"line":35,"column":26},"end":{"line":35,"column":54}}},"2":{"name":"(anonymous_2)","line":49,"loc":{"start":{"line":49,"column":31},"end":{"line":49,"column":67}}},"3":{"name":"(anonymous_3)","line":76,"loc":{"start":{"line":76,"column":42},"end":{"line":76,"column":69}}},"4":{"name":"generateOAuthObject","line":110,"loc":{"start":{"line":110,"column":0},"end":{"line":110,"column":37}}}},"statementMap":{"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":29}},"2":{"start":{"line":7,"column":0},"end":{"line":7,"column":25}},"3":{"start":{"line":10,"column":0},"end":{"line":10,"column":38}},"4":{"start":{"line":35,"column":0},"end":{"line":55,"column":2}},"5":{"start":{"line":36,"column":4},"end":{"line":36,"column":62}},"6":{"start":{"line":37,"column":4},"end":{"line":37,"column":47}},"7":{"start":{"line":38,"column":4},"end":{"line":38,"column":55}},"8":{"start":{"line":40,"column":4},"end":{"line":45,"column":7}},"9":{"start":{"line":47,"column":4},"end":{"line":47,"column":44}},"10":{"start":{"line":49,"column":4},"end":{"line":54,"column":7}},"11":{"start":{"line":50,"column":8},"end":{"line":52,"column":9}},"12":{"start":{"line":51,"column":12},"end":{"line":51,"column":33}},"13":{"start":{"line":53,"column":8},"end":{"line":53,"column":114}},"14":{"start":{"line":76,"column":0},"end":{"line":88,"column":2}},"15":{"start":{"line":77,"column":4},"end":{"line":79,"column":5}},"16":{"start":{"line":78,"column":8},"end":{"line":78,"column":56}},"17":{"start":{"line":81,"column":4},"end":{"line":81,"column":44}},"18":{"start":{"line":83,"column":4},"end":{"line":83,"column":35}},"19":{"start":{"line":84,"column":4},"end":{"line":84,"column":43}},"20":{"start":{"line":85,"column":4},"end":{"line":85,"column":47}},"21":{"start":{"line":87,"column":4},"end":{"line":87,"column":65}},"22":{"start":{"line":110,"column":0},"end":{"line":146,"column":1}},"23":{"start":{"line":111,"column":4},"end":{"line":111,"column":62}},"24":{"start":{"line":112,"column":4},"end":{"line":112,"column":55}},"25":{"start":{"line":113,"column":4},"end":{"line":113,"column":50}},"26":{"start":{"line":115,"column":4},"end":{"line":115,"column":52}},"27":{"start":{"line":116,"column":4},"end":{"line":116,"column":25}},"28":{"start":{"line":118,"column":4},"end":{"line":124,"column":5}},"29":{"start":{"line":119,"column":8},"end":{"line":119,"column":52}},"30":{"start":{"line":120,"column":11},"end":{"line":124,"column":5}},"31":{"start":{"line":121,"column":8},"end":{"line":121,"column":60}},"32":{"start":{"line":122,"column":11},"end":{"line":124,"column":5}},"33":{"start":{"line":123,"column":8},"end":{"line":123,"column":59}},"34":{"start":{"line":126,"column":4},"end":{"line":126,"column":49}},"35":{"start":{"line":127,"column":4},"end":{"line":127,"column":47}},"36":{"start":{"line":129,"column":4},"end":{"line":134,"column":7}},"37":{"start":{"line":136,"column":4},"end":{"line":141,"column":7}},"38":{"start":{"line":143,"column":4},"end":{"line":143,"column":75}},"39":{"start":{"line":145,"column":4},"end":{"line":145,"column":89}}},"branchMap":{"1":{"line":36,"type":"cond-expr","locations":[{"start":{"line":36,"column":38},"end":{"line":36,"column":56}},{"start":{"line":36,"column":59},"end":{"line":36,"column":61}}]},"2":{"line":41,"type":"cond-expr","locations":[{"start":{"line":41,"column":36},"end":{"line":41,"column":51}},{"start":{"line":41,"column":54},"end":{"line":41,"column":61}}]},"3":{"line":43,"type":"cond-expr","locations":[{"start":{"line":43,"column":28},"end":{"line":43,"column":39}},{"start":{"line":43,"column":42},"end":{"line":43,"column":46}}]},"4":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":50,"column":8}},{"start":{"line":50,"column":8},"end":{"line":50,"column":8}}]},"5":{"line":77,"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":77,"column":4}},{"start":{"line":77,"column":4},"end":{"line":77,"column":4}}]},"6":{"line":111,"type":"cond-expr","locations":[{"start":{"line":111,"column":38},"end":{"line":111,"column":56}},{"start":{"line":111,"column":59},"end":{"line":111,"column":61}}]},"7":{"line":118,"type":"if","locations":[{"start":{"line":118,"column":4},"end":{"line":118,"column":4}},{"start":{"line":118,"column":4},"end":{"line":118,"column":4}}]},"8":{"line":120,"type":"if","locations":[{"start":{"line":120,"column":11},"end":{"line":120,"column":11}},{"start":{"line":120,"column":11},"end":{"line":120,"column":11}}]},"9":{"line":122,"type":"if","locations":[{"start":{"line":122,"column":11},"end":{"line":122,"column":11}},{"start":{"line":122,"column":11},"end":{"line":122,"column":11}}]},"10":{"line":130,"type":"cond-expr","locations":[{"start":{"line":130,"column":36},"end":{"line":130,"column":51}},{"start":{"line":130,"column":54},"end":{"line":130,"column":61}}]},"11":{"line":132,"type":"cond-expr","locations":[{"start":{"line":132,"column":28},"end":{"line":132,"column":39}},{"start":{"line":132,"column":42},"end":{"line":132,"column":46}}]},"12":{"line":137,"type":"cond-expr","locations":[{"start":{"line":137,"column":36},"end":{"line":137,"column":51}},{"start":{"line":137,"column":54},"end":{"line":137,"column":61}}]},"13":{"line":139,"type":"cond-expr","locations":[{"start":{"line":139,"column":28},"end":{"line":139,"column":39}},{"start":{"line":139,"column":42},"end":{"line":139,"column":46}}]},"14":{"line":143,"type":"cond-expr","locations":[{"start":{"line":143,"column":41},"end":{"line":143,"column":66}},{"start":{"line":143,"column":69},"end":{"line":143,"column":74}}]}},"code":["\"use strict\";","","// npm packages","var Oauth = require('oauth');","","// Core packages","var url = require('url');","","// Custom Packages","var errorStrings = require('./error');","","/**"," * @namespace OauthUtil"," */","","/**"," * Attempts to get an OAuth verification URL using the given API configuration."," *"," * @memberOf OauthUtil"," * @param {Object} config The information needed to access the Jira API"," * @param {string} config.host The hostname of the Jira API."," * @param {string} [config.protocol=https] - The protocol used to accses the Jira API."," * @param {number} [config.port=443] - The port number used to connect to Jira."," * @param {string} [config.path_prefix=\"/\"] The prefix to use in front of the path, if Jira isn't at \"/\""," * @param {string} [config.version=2] - The version of the Jira API to which you will be connecting.  Currently, only"," *     version 2 is supported."," * @param {Object} config.oauth The oauth information"," * @param {string} config.oauth.consumer_key The consumer key of the application accessing Jira."," * @param {string} config.oauth.private_key The private key of the application accessing Jira."," * @param {string} [config.oauth.callback_url] The callback URL to be called after the token is generated.  If this is"," *     not included, the user will be given a verification code after authorizing the token, instead of Jira making a"," *     callback to the application."," * @param {OauthUtil~getOauthUrlCallback} callback The function called when the URL has been retrieved."," */","exports.getAuthorizeURL = function (config, callback) {","    var prefix = config.path_prefix ? config.path_prefix : '';","    var AUTH_TOKEN_APPEND = '/oauth/authorize';","    var SERVLET_BASE_URL = prefix + '/plugins/servlet';","","    var authURL = url.format({","        protocol: config.protocol ? config.protocol : 'https',","        hostname: config.host,","        port: config.port ? config.port : null,","        pathname: SERVLET_BASE_URL + AUTH_TOKEN_APPEND","    });","","    var oauth = generateOAuthObject(config);","","    oauth.getOAuthRequestToken(function (err, token, token_secret) {","        if (err) {","            return callback(err);","        }","        return callback(null, {url: authURL + \"?oauth_token=\" + token, token: token, token_secret: token_secret});","    });","};","","/**"," * Given an OAuth token, the token secret, and an access verification code (provided by Jira), swap an OAuth request"," * token with an OAuth access token."," *"," * @memberOf OauthUtil"," * @param {Object} config The information needed to access the Jira API"," * @param {string} config.host The hostname of the Jira API."," * @param {string} [config.protocol=https] - The protocol used to accses the Jira API."," * @param {number} [config.port=443] - The port number used to connect to Jira."," * @param {string} [config.version=2] - The version of the Jira API to which you will be connecting.  Currently, only"," *     version 2 is supported."," * @param {Object} config.oauth The oauth information"," * @param {string} config.oauth.consumer_key The consumer key of the application accessing Jira."," * @param {string} config.oauth.private_key The private key of the application accessing Jira."," * @param {string} config.oauth.token The OAuth Token supplied by Jira."," * @param {string} config.oauth.token_secret The OAuth Token secret supplied by Jira."," * @param {string} config.oauth.oauth_verifier The verified code given to the user after authorizing the OAuth token."," * @param {OauthUtil~swapRequestTokenCallback} callback The function called when the token has been swapped."," */","exports.swapRequestTokenWithAccessToken = function(config, callback) {","    if(!config.oauth.oauth_verifier) {","        throw new Error(errorStrings.NO_VERIFIER_ERROR);","    }","","    var oauth = generateOAuthObject(config);","","    var token = config.oauth.token;","    var secret = config.oauth.token_secret;","    var verifier = config.oauth.oauth_verifier;","","    oauth.getOAuthAccessToken(token, secret, verifier, callback);","};","","/**"," * Utility function to generate an OAuth object."," *"," * @memberOf OauthUtil"," * @param {Object} config The information needed to access the Jira API"," * @param {string} config.host The hostname of the Jira API."," * @param {string} [config.protocol=https] - The protocol used to accses the Jira API."," * @param {number} [config.port=443] - The port number used to connect to Jira."," * @param {string} [config.path_prefix=\"/\"] The prefix to use in front of the path, if Jira isn't at \"/\""," * @param {string} [config.version=2] - The version of the Jira API to which you will be connecting.  Currently, only"," *     version 2 is supported."," * @param {Object} config.oauth The oauth information"," * @param {string} config.oauth.consumer_key The consumer key of the application accessing Jira."," * @param {string} config.oauth.private_key The private key of the application accessing Jira."," * @param {string} [config.oauth.callback_url] The callback URL to be called after the token is generated.  If this is"," *     not included, the user will be given a verification code after authorizing the token, instead of Jira making a"," *     callback to the application."," *"," * @returns {exports.OAuth} The generated object."," */","function generateOAuthObject(config) {","    var prefix = config.path_prefix ? config.path_prefix : '';","    var SERVLET_BASE_URL = prefix + '/plugins/servlet';","    var REQ_TOKEN_APPEND = '/oauth/request-token';","","    var ACCESS_TOKEN_APPEND = '/oauth/access-token';","    var sig = 'RSA-SHA1';","","    if (!config.host) {","        throw new Error(errorStrings.NO_HOST_ERROR);","    } else if (!config.oauth.consumer_key) {","        throw new Error(errorStrings.NO_CONSUMER_KEY_ERROR);","    } else if (!config.oauth.private_key) {","        throw new Error(errorStrings.NO_PRIVATE_KEY_ERROR);","    }","","    var consumer_key = config.oauth.consumer_key;","    var private_key = config.oauth.private_key;","","    var reqURL = url.format({","        protocol: config.protocol ? config.protocol : 'https',","        hostname: config.host,","        port: config.port ? config.port : null,","        pathname: SERVLET_BASE_URL + REQ_TOKEN_APPEND","    });","","    var accessURL = url.format({","        protocol: config.protocol ? config.protocol : 'https',","        hostname: config.host,","        port: config.port ? config.port : null,","        pathname: SERVLET_BASE_URL + ACCESS_TOKEN_APPEND","    });","","    var cb = config.oauth.callback_url ? config.oauth.callback_url : 'oob';","","    return new Oauth.OAuth(reqURL, accessURL, consumer_key, private_key, '1.0', cb, sig);","}","","/**"," * Callback used by getOauthUrl."," * @callback OauthUtil~getOauthUrlCallback"," * @param {*} error The error which occurred, if any."," * @param {Object} oauth The OAuth information retrieved from the Jira API."," * @param {String} oauth.url The URL that should be visited by the user to verify the OAuth access."," * @param {String} oauth.token The OAuth Token retrieved from the Jira API."," * @param {String} oauth.token_secret The OAuth Token Secret retrieved from the Jira API."," */","","/**"," * Callback used by swapRequestTokenWithAccessToken"," * @callback OauthUtil~swapRequestTokenCallback"," * @param {*} error The error which occurred, if any."," * @param {string} access_token The access token retrieved from Jira."," */",""],"l":{"4":1,"7":1,"10":1,"35":1,"36":0,"37":0,"38":0,"40":0,"47":0,"49":0,"50":0,"51":0,"53":0,"76":1,"77":0,"78":0,"81":0,"83":0,"84":0,"85":0,"87":0,"110":1,"111":0,"112":0,"113":0,"115":0,"116":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"126":0,"127":0,"129":0,"136":0,"143":0,"145":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/password.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/password.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"PasswordClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":36}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":29},"end":{"line":26,"column":55}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":11,"column":0},"end":{"line":39,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":26,"column":4},"end":{"line":38,"column":5}},"5":{"start":{"line":27,"column":8},"end":{"line":35,"column":10}},"6":{"start":{"line":37,"column":8},"end":{"line":37,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = PasswordClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/password'"," *"," * @param {JiraClient} jiraClient"," * @constructor PasswordClient"," */","function PasswordClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns user-friendly statements governing the system's password policy.","     *","     * @method getPasswordPolicy","     * @memberOf PasswordClient#","     * @param opts The request options to send to the Jira API","     * @param {boolean} [opts.hasOldPassword=false] Whether or not the user will be required to enter their current","     *     password. Use false (the default) if this is a new user or if an administrator is forcibly changing another","     *     user's password.","     * @param [callback] Called when the password policy has been retrieved.","     * @return {Promise} Resolved when the password policy has been retrieved.","     */","    this.getPasswordPolicy = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/password/policy'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                hasOldPassword: opts.hasOldPassword","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"11":1,"12":0,"26":0,"27":0,"37":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/priority.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/priority.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"PriorityClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":36}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":28},"end":{"line":23,"column":54}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":23},"end":{"line":44,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":11,"column":0},"end":{"line":54,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":32,"column":6}},"5":{"start":{"line":24,"column":8},"end":{"line":29,"column":10}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":62}},"7":{"start":{"line":44,"column":4},"end":{"line":53,"column":6}},"8":{"start":{"line":45,"column":8},"end":{"line":50,"column":10}},"9":{"start":{"line":52,"column":8},"end":{"line":52,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = PriorityClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/priority'"," *"," * @param {JiraClient} jiraClient"," * @constructor PriorityClient"," */","function PriorityClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns a list of all priorities visible to the user","     *","     * @method getAllPriorities","     * @memberOf PriorityClient#","     * @param opts Ignored","     * @param [callback] Called when the priorities have been retrieved.","     * @return {Promise} Resolved when the priorities have been retrieved.","     */","    this.getAllPriorities = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/priority'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get a full representation of the priority that has the given id.","     *","     * @method getPriority","     * @memberOf PriorityClient#","     * @param opts The options sent to the Jira API","     * @param opts.priorityId A String containing a priority id","     * @param [callback] Called when the priority has been retrieved.","     * @return {Promise} Resolved when the priority has been retrieved.","     */","    this.getPriority = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/priority/' + opts.priorityId),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}"],"l":{"3":1,"11":1,"12":0,"23":0,"24":0,"31":0,"44":0,"45":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/project.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/project.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},"fnMap":{"1":{"name":"ProjectClient","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":35}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":26},"end":{"line":23,"column":52}}},"3":{"name":"(anonymous_3)","line":43,"loc":{"start":{"line":43,"column":25},"end":{"line":43,"column":50}}},"4":{"name":"(anonymous_4)","line":57,"loc":{"start":{"line":57,"column":25},"end":{"line":57,"column":54}}},"5":{"name":"(anonymous_5)","line":79,"loc":{"start":{"line":79,"column":32},"end":{"line":79,"column":58}}},"6":{"name":"(anonymous_6)","line":99,"loc":{"start":{"line":99,"column":22},"end":{"line":99,"column":48}}},"7":{"name":"(anonymous_7)","line":114,"loc":{"start":{"line":114,"column":25},"end":{"line":114,"column":51}}},"8":{"name":"(anonymous_8)","line":129,"loc":{"start":{"line":129,"column":23},"end":{"line":129,"column":49}}},"9":{"name":"(anonymous_9)","line":144,"loc":{"start":{"line":144,"column":23},"end":{"line":144,"column":49}}},"10":{"name":"(anonymous_10)","line":159,"loc":{"start":{"line":159,"column":20},"end":{"line":159,"column":46}}},"11":{"name":"(anonymous_11)","line":175,"loc":{"start":{"line":175,"column":19},"end":{"line":175,"column":45}}},"12":{"name":"(anonymous_12)","line":192,"loc":{"start":{"line":192,"column":22},"end":{"line":192,"column":48}}},"13":{"name":"(anonymous_13)","line":209,"loc":{"start":{"line":209,"column":21},"end":{"line":209,"column":47}}},"14":{"name":"(anonymous_14)","line":230,"loc":{"start":{"line":230,"column":31},"end":{"line":230,"column":71}}},"15":{"name":"(anonymous_15)","line":237,"loc":{"start":{"line":237,"column":32},"end":{"line":237,"column":49}}},"16":{"name":"(anonymous_16)","line":245,"loc":{"start":{"line":245,"column":32},"end":{"line":245,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":10,"column":0},"end":{"line":260,"column":1}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":31,"column":6}},"5":{"start":{"line":24,"column":8},"end":{"line":29,"column":10}},"6":{"start":{"line":30,"column":8},"end":{"line":30,"column":62}},"7":{"start":{"line":43,"column":4},"end":{"line":46,"column":6}},"8":{"start":{"line":44,"column":8},"end":{"line":44,"column":67}},"9":{"start":{"line":45,"column":8},"end":{"line":45,"column":81}},"10":{"start":{"line":57,"column":4},"end":{"line":67,"column":6}},"11":{"start":{"line":58,"column":8},"end":{"line":64,"column":10}},"12":{"start":{"line":66,"column":8},"end":{"line":66,"column":62}},"13":{"start":{"line":79,"column":4},"end":{"line":82,"column":6}},"14":{"start":{"line":80,"column":8},"end":{"line":80,"column":75}},"15":{"start":{"line":81,"column":8},"end":{"line":81,"column":62}},"16":{"start":{"line":99,"column":4},"end":{"line":102,"column":6}},"17":{"start":{"line":100,"column":8},"end":{"line":100,"column":64}},"18":{"start":{"line":101,"column":8},"end":{"line":101,"column":62}},"19":{"start":{"line":114,"column":4},"end":{"line":117,"column":6}},"20":{"start":{"line":115,"column":8},"end":{"line":115,"column":75}},"21":{"start":{"line":116,"column":8},"end":{"line":116,"column":62}},"22":{"start":{"line":129,"column":4},"end":{"line":132,"column":6}},"23":{"start":{"line":130,"column":8},"end":{"line":130,"column":73}},"24":{"start":{"line":131,"column":8},"end":{"line":131,"column":62}},"25":{"start":{"line":144,"column":4},"end":{"line":147,"column":6}},"26":{"start":{"line":145,"column":8},"end":{"line":145,"column":73}},"27":{"start":{"line":146,"column":8},"end":{"line":146,"column":62}},"28":{"start":{"line":159,"column":4},"end":{"line":162,"column":6}},"29":{"start":{"line":160,"column":8},"end":{"line":160,"column":69}},"30":{"start":{"line":161,"column":8},"end":{"line":161,"column":62}},"31":{"start":{"line":175,"column":4},"end":{"line":178,"column":6}},"32":{"start":{"line":176,"column":8},"end":{"line":176,"column":84}},"33":{"start":{"line":177,"column":8},"end":{"line":177,"column":62}},"34":{"start":{"line":192,"column":4},"end":{"line":195,"column":6}},"35":{"start":{"line":193,"column":8},"end":{"line":193,"column":98}},"36":{"start":{"line":194,"column":8},"end":{"line":194,"column":62}},"37":{"start":{"line":209,"column":4},"end":{"line":212,"column":6}},"38":{"start":{"line":210,"column":8},"end":{"line":210,"column":99}},"39":{"start":{"line":211,"column":8},"end":{"line":211,"column":62}},"40":{"start":{"line":230,"column":4},"end":{"line":259,"column":6}},"41":{"start":{"line":231,"column":8},"end":{"line":231,"column":57}},"42":{"start":{"line":232,"column":8},"end":{"line":232,"column":25}},"43":{"start":{"line":232,"column":17},"end":{"line":232,"column":25}},"44":{"start":{"line":233,"column":8},"end":{"line":233,"column":29}},"45":{"start":{"line":233,"column":19},"end":{"line":233,"column":29}},"46":{"start":{"line":235,"column":8},"end":{"line":241,"column":9}},"47":{"start":{"line":236,"column":12},"end":{"line":236,"column":27}},"48":{"start":{"line":237,"column":12},"end":{"line":239,"column":15}},"49":{"start":{"line":238,"column":16},"end":{"line":238,"column":40}},"50":{"start":{"line":240,"column":12},"end":{"line":240,"column":47}},"51":{"start":{"line":243,"column":8},"end":{"line":249,"column":9}},"52":{"start":{"line":244,"column":12},"end":{"line":244,"column":27}},"53":{"start":{"line":245,"column":12},"end":{"line":247,"column":15}},"54":{"start":{"line":246,"column":16},"end":{"line":246,"column":37}},"55":{"start":{"line":248,"column":12},"end":{"line":248,"column":47}},"56":{"start":{"line":251,"column":8},"end":{"line":258,"column":10}}},"branchMap":{"1":{"line":232,"type":"if","locations":[{"start":{"line":232,"column":8},"end":{"line":232,"column":8}},{"start":{"line":232,"column":8},"end":{"line":232,"column":8}}]},"2":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":8},"end":{"line":233,"column":8}},{"start":{"line":233,"column":8},"end":{"line":233,"column":8}}]},"3":{"line":235,"type":"if","locations":[{"start":{"line":235,"column":8},"end":{"line":235,"column":8}},{"start":{"line":235,"column":8},"end":{"line":235,"column":8}}]},"4":{"line":243,"type":"if","locations":[{"start":{"line":243,"column":8},"end":{"line":243,"column":8}},{"start":{"line":243,"column":8},"end":{"line":243,"column":8}}]}},"code":["\"use strict\";","","module.exports = ProjectClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/project'"," * @param {JiraClient} jiraClient"," * @constructor ProjectClient"," */","function ProjectClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns all projects which are visible for the currently logged in user. If no user is logged in, it returns the","     * list of projects that are visible when using anonymous access.","     *","     * @method getAllProjects","     * @memberOf ProjectClient#","     * @param opts Ignored","     * @param [callback] Called when the projects have been retrieved.","     * @return {Promise} Resolved when the projects have been retrieved.","     */","    this.getAllProjects = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/project'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Deletes a project ","     *","     * @method deleteProject","     * @memberOf ProjectClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.projectIdOrKey The project id or project key","     * @param [callback] Called when the project has been deleted.","     * @return {Promise} Resolved when the project has been deleted.","     */","    this.deleteProject = function(opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'DELETE');","        return this.jiraClient.makeRequest(options, callback, 'Project Deleted');","    };","","    /**","     * Creates a project.","     *","     * @method createProject","     * @memberOf ProjectClient#","     * @param project The project properties. See {@link https://docs.atlassian.com/jira/REST/latest/#api/2/project}","     * @param [callback] Called when the project has been created.","     * @return {Promise} Resolved when the project has been created.","     */","    this.createProject = function (project, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/project'),","            method: 'POST',","            followAllRedirects: true,","            json: true,","            body: project","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Gets project propertes.","     *","     * @method getProjectProperties","     * @memberOf ProjectClient#","     * @param opts Options","     * @param opts.projectIdOrKey The project id or project key","     * @param [callback] Called when properties has been retrieved.","     * @return {Promise} Resolved when properties has been retrieved.","     */","    this.getProjectProperties = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/properties', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","","","","    /**","     * Contains a full representation of a project in JSON format.","     *","     * All project keys associated with the project will only be returned if expand=projectKeys.","     *","     * @method getProject","     * @memberOf ProjectClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.projectIdOrKey The project id or project key","     * @param [callback] Called when the project is retrieved.","     * @return {Promise} Resolved when the project is retrieved.","     */","    this.getProject = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Contains a full representation of a the specified project's components.","     *","     * @method getComponents","     * @memberOf ProjectClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.projectIdOrKey The project id or project key","     * @param [callback] Called when the components are retrieved.","     * @return {Promise} Resolved when the components are retrieved.","     */","    this.getComponents = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/components', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get all issue types with valid status values for a project","     *","     * @method getStatuses","     * @memberOf ProjectClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.projectIdOrKey The project id or project key","     * @param [callback] Called when the statuses have been retrieved.","     * @return {Promise} Resolved when the statuses have been retrieved.","     */","    this.getStatuses = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/statuses', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Contains a full representation of a the specified project's versions.","     *","     * @method getVersions","     * @memberOf ProjectClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.projectIdOrKey The project id or project key","     * @param [callback] Called when the versions have been retrieved.","     * @return {Promise} Resolved when the versions have been retrieved.","     */","    this.getVersions = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/versions', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Contains a list of roles in this project with links to full details.","     *","     * @method getRoles","     * @memberOf ProjectClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.projectIdOrKey The project id or project key","     * @param [callback] Called when the roles have been retrieved.","     * @return {Promise} Resolved when the roles have been retrieved.","     */","    this.getRoles = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/role', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Details on a given project role.","     *","     * @method getRole","     * @memberOf ProjectClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.projectIdOrKey The project id or project key","     * @param opts.roleId The id of the role to retrieve.","     * @param [callback] Called when the roles have been retrieved.","     * @return {Promise} Resolved when the roles have been retrieved.","     */","    this.getRole = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/role/' + opts.roleId, 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Updates a project role to contain the sent actors.","     *","     * @method updateRole","     * @memberOf ProjectClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.projectIdOrKey The project id or project key","     * @param opts.roleId The id of the role to retrieve.","     * @param opts.newRole See {@link https://docs.atlassian.com/jira/REST/latest/#d2e108}","     * @param [callback] Called when the roles have been retrieved.","     * @return {Promise} Resolved when the roles have been retrieved.","     */","    this.updateRole = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/role/' + opts.roleId, 'PUT', opts.newRole);","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Add an actor to a project role.","     *","     * @method addToRole","     * @memberOf ProjectClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.projectIdOrKey The project id or project key","     * @param opts.roleId The id of the role to retrieve.","     * @param opts.newRole See {@link https://docs.atlassian.com/jira/REST/latest/#d2e134}","     * @param [callback] Called when the roles have been retrieved.","     * @return {Promise} Resolved when the roles have been retrieved.","     */","    this.addToRole = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/role/' + opts.roleId, 'POST', opts.newRole);","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Build out the request options necessary to make a particular API call.","     *","     * @private","     * @method buildRequestOptions","     * @memberOf ProjectClient#","     * @param {Object} opts The arguments passed to the method.","     * @param {number} opts.projectIdOrKey The id of the project to use in the path.","     * @param {Array} [opts.fields] The fields to include","     * @param {Array} [opts.expand] The fields to expand","     * @param {string} path The path of the endpoint following /project/{id}","     * @param {string} method The request method.","     * @param {Object} [body] The request body, if any.","     * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.","     * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}","     */","    this.buildRequestOptions = function (opts, path, method, body, qs) {","        var basePath = '/project/' + opts.projectIdOrKey;","        if (!qs) qs = {};","        if (!body) body = {};","","        if (opts.fields) {","            qs.fields = '';","            opts.fields.forEach(function (field) {","                qs.fields += field + ','","            });","            qs.fields = qs.fields.slice(0, -1);","        }","","        if (opts.expand) {","            qs.expand = '';","            opts.expand.forEach(function (ex) {","                qs.expand += ex + ','","            });","            qs.expand = qs.expand.slice(0, -1);","        }","","        return {","            uri: this.jiraClient.buildURL(basePath + path),","            method: method,","            body: body,","            qs: qs,","            followAllRedirects: true,","            json: true","        };","    };","}",""],"l":{"3":1,"10":1,"11":0,"23":0,"24":0,"30":0,"43":0,"44":0,"45":0,"57":0,"58":0,"66":0,"79":0,"80":0,"81":0,"99":0,"100":0,"101":0,"114":0,"115":0,"116":0,"129":0,"130":0,"131":0,"144":0,"145":0,"146":0,"159":0,"160":0,"161":0,"175":0,"176":0,"177":0,"192":0,"193":0,"194":0,"209":0,"210":0,"211":0,"230":0,"231":0,"232":0,"233":0,"235":0,"236":0,"237":0,"238":0,"240":0,"243":0,"244":0,"245":0,"246":0,"248":0,"251":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/projectCategory.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/projectCategory.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"ProjectCategoryClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":43}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":35},"end":{"line":23,"column":61}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":30},"end":{"line":44,"column":56}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"2":{"start":{"line":11,"column":0},"end":{"line":54,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":32,"column":6}},"5":{"start":{"line":24,"column":8},"end":{"line":29,"column":10}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":62}},"7":{"start":{"line":44,"column":4},"end":{"line":53,"column":6}},"8":{"start":{"line":45,"column":8},"end":{"line":50,"column":10}},"9":{"start":{"line":52,"column":8},"end":{"line":52,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = ProjectCategoryClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/projectCategory'"," *"," * @param {JiraClient} jiraClient"," * @constructor ProjectCategoryClient"," */","function ProjectCategoryClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns a list of all projectCategories visible to the user","     *","     * @method getAllProjectCategories","     * @memberOf ProjectCategoryClient#","     * @param opts Ignored","     * @param [callback] Called when the statusCategories have been retrieved.","     * @return {Promise} Resolved when the statusCategories have been retrieved.","     */","    this.getAllProjectCategories = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/projectCategory'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get a full representation of the projectCategory that has the given id.","     *","     * @method getProjectCategory","     * @memberOf ProjectCategoryClient#","     * @param opts The options sent to the Jira API","     * @param opts.projectCategoryId A String containing a projectCategory id","     * @param [callback] Called when the projectCategory has been retrieved.","     * @return {Promise} Resolved when the projectCategory has been retrieved.","     */","    this.getProjectCategory = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/projectCategory/' + opts.projectCategoryId),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}",""],"l":{"3":1,"11":1,"12":0,"23":0,"24":0,"31":0,"44":0,"45":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/projectValidate.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/projectValidate.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"ProjectValidateClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":43}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":30},"end":{"line":26,"column":56}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":39}},"2":{"start":{"line":11,"column":0},"end":{"line":39,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":26,"column":4},"end":{"line":38,"column":5}},"5":{"start":{"line":27,"column":8},"end":{"line":35,"column":10}},"6":{"start":{"line":37,"column":8},"end":{"line":37,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = ProjectValidateClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/projectvalidate'"," *"," * @param {JiraClient} jiraClient"," * @constructor ProjectValidateClient"," */","function ProjectValidateClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Validates a project key.  This endpoint is a little wonky, as it returns a list of errors as a valid response;","     * even if the key is invalid, it still returns a 200 response.","     * See {@link https://docs.atlassian.com/jira/REST/latest/#d2e297}","     *","     * @method validateProjectKey","     * @memberOf ProjectValidateClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.projectKey The key of the project.","     * @param [callback] Called when the key has been validated.","     * @return {Promise} Resolved when the key has been validated.","     */","    this.validateProjectKey = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/projectvalidate/key'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                key: opts.projectKey","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"11":1,"12":0,"26":0,"27":0,"37":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/reindex.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/reindex.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"ReindexClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":21},"end":{"line":29,"column":47}}},"3":{"name":"(anonymous_3)","line":59,"loc":{"start":{"line":59,"column":22},"end":{"line":59,"column":48}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":11,"column":0},"end":{"line":72,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":29,"column":4},"end":{"line":43,"column":6}},"5":{"start":{"line":30,"column":8},"end":{"line":40,"column":10}},"6":{"start":{"line":42,"column":8},"end":{"line":42,"column":62}},"7":{"start":{"line":59,"column":4},"end":{"line":71,"column":5}},"8":{"start":{"line":60,"column":8},"end":{"line":68,"column":10}},"9":{"start":{"line":70,"column":8},"end":{"line":70,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = ReindexClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/reindex'"," *"," * @param {JiraClient} jiraClient"," * @constructor ReindexClient"," */","function ReindexClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Kicks off a reindex. Need Admin permissions to perform this reindex.","     *","     * @method doReindex","     * @memberOf ReindexClient#","     * @param opts The request options sent to the Jira API.","     * @param {string} [opts.type] Case insensitive String indicating type of reindex. If omitted, then defaults to","     *     BACKGROUND_PREFERRED","     * @param {boolean} [opts.indexComments=false] Indicates that comments should also be reindexed. Not relevant for","     *     foreground reindex, where comments are always reindexed.","     * @param {boolean} [opts.indexChangeHistory=false] Indicates that changeHistory should also be reindexed. Not","     *     relevant for foreground reindex, where changeHistory is always reindexed.","     * @param [callback] Called when the reindex has been started.","     * @return {Promise} Resolved when the reindex has been started.","     */","    this.doReindex = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/reindex'),","            method: 'POST',","            json: true,","            followAllRedirects: true,","            qs: {","                type: opts.type,","                indexComments: opts.indexComments,","                indexChangeHistory: opts.indexChangeHistory","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Gets information on the system reindexes. If a reindex is currently taking place then information about this","     * reindex is returned. If there is no active index task, then returns information about the latest reindex task","     * run, otherwise returns a 404 indicating that no reindex has taken place.","     *","     * @method getReindex","     * @memberOf ReindexClient#","     * @param opts The request options sent to the Jira API.","     * @param [opts.taskId] The id of an indexing task you wish to obtain details on. If omitted, then defaults to the","     *     standard behaviour and returns information on the active reindex task, or the last task to run if no reindex","     *     is taking place. . If there is no reindexing task with that id then a 404 is returned.","     * @param [callback] Called when the reindex data has been retrieved.","     * @return {Promise} Resolved when the reindex data has been retrieved.","     */","    this.getReindex = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/reindex'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                taskId: opts.taskId","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"11":1,"12":0,"29":0,"30":0,"42":0,"59":0,"60":0,"70":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/resolution.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/resolution.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"ResolutionClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":38}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":29},"end":{"line":23,"column":55}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":25},"end":{"line":44,"column":51}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"2":{"start":{"line":11,"column":0},"end":{"line":54,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":32,"column":6}},"5":{"start":{"line":24,"column":8},"end":{"line":29,"column":10}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":62}},"7":{"start":{"line":44,"column":4},"end":{"line":53,"column":6}},"8":{"start":{"line":45,"column":8},"end":{"line":50,"column":10}},"9":{"start":{"line":52,"column":8},"end":{"line":52,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = ResolutionClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/resolution'"," *"," * @param {JiraClient} jiraClient"," * @constructor ResolutionClient"," */","function ResolutionClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns a list of all resolutions visible to the user","     *","     * @method getAllResolutions","     * @memberOf ResolutionClient#","     * @param opts Ignored","     * @param [callback] Called when the resolutions have been retrieved.","     * @return {Promise} Resolved when the resolutions have been retrieved.","     */","    this.getAllResolutions = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/resolution'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get a full representation of the resolution that has the given id.","     *","     * @method getResolution","     * @memberOf ResolutionClient#","     * @param opts The options sent to the Jira API","     * @param opts.resolutionId A String containing a resolution id","     * @param [callback] Called when the resolution has been retrieved.","     * @return {Promise} Resolved when the resolution has been retrieved.","     */","    this.getResolution = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/resolution/' + opts.resolutionId),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}"],"l":{"3":1,"11":1,"12":0,"23":0,"24":0,"31":0,"44":0,"45":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/screens.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/screens.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"ScreensClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}}},"2":{"name":"(anonymous_2)","line":24,"loc":{"start":{"line":24,"column":30},"end":{"line":24,"column":56}}},"3":{"name":"(anonymous_3)","line":39,"loc":{"start":{"line":39,"column":19},"end":{"line":39,"column":45}}},"4":{"name":"(anonymous_4)","line":55,"loc":{"start":{"line":55,"column":21},"end":{"line":55,"column":47}}},"5":{"name":"(anonymous_5)","line":72,"loc":{"start":{"line":72,"column":21},"end":{"line":72,"column":47}}},"6":{"name":"(anonymous_6)","line":88,"loc":{"start":{"line":88,"column":21},"end":{"line":88,"column":47}}},"7":{"name":"(anonymous_7)","line":105,"loc":{"start":{"line":105,"column":25},"end":{"line":105,"column":51}}},"8":{"name":"(anonymous_8)","line":121,"loc":{"start":{"line":121,"column":26},"end":{"line":121,"column":52}}},"9":{"name":"(anonymous_9)","line":138,"loc":{"start":{"line":138,"column":30},"end":{"line":138,"column":56}}},"10":{"name":"(anonymous_10)","line":160,"loc":{"start":{"line":160,"column":26},"end":{"line":160,"column":52}}},"11":{"name":"(anonymous_11)","line":178,"loc":{"start":{"line":178,"column":27},"end":{"line":178,"column":53}}},"12":{"name":"(anonymous_12)","line":193,"loc":{"start":{"line":193,"column":32},"end":{"line":193,"column":58}}},"13":{"name":"(anonymous_13)","line":220,"loc":{"start":{"line":220,"column":31},"end":{"line":220,"column":71}}},"14":{"name":"(anonymous_14)","line":227,"loc":{"start":{"line":227,"column":32},"end":{"line":227,"column":49}}},"15":{"name":"(anonymous_15)","line":235,"loc":{"start":{"line":235,"column":32},"end":{"line":235,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":11,"column":0},"end":{"line":250,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":24,"column":4},"end":{"line":27,"column":6}},"5":{"start":{"line":25,"column":8},"end":{"line":25,"column":80}},"6":{"start":{"line":26,"column":8},"end":{"line":26,"column":62}},"7":{"start":{"line":39,"column":4},"end":{"line":42,"column":6}},"8":{"start":{"line":40,"column":8},"end":{"line":40,"column":69}},"9":{"start":{"line":41,"column":8},"end":{"line":41,"column":62}},"10":{"start":{"line":55,"column":4},"end":{"line":58,"column":6}},"11":{"start":{"line":56,"column":8},"end":{"line":56,"column":89}},"12":{"start":{"line":57,"column":8},"end":{"line":57,"column":62}},"13":{"start":{"line":72,"column":4},"end":{"line":75,"column":6}},"14":{"start":{"line":73,"column":8},"end":{"line":73,"column":102}},"15":{"start":{"line":74,"column":8},"end":{"line":74,"column":62}},"16":{"start":{"line":88,"column":4},"end":{"line":91,"column":6}},"17":{"start":{"line":89,"column":8},"end":{"line":89,"column":86}},"18":{"start":{"line":90,"column":8},"end":{"line":90,"column":77}},"19":{"start":{"line":105,"column":4},"end":{"line":108,"column":6}},"20":{"start":{"line":106,"column":8},"end":{"line":106,"column":110}},"21":{"start":{"line":107,"column":8},"end":{"line":107,"column":62}},"22":{"start":{"line":121,"column":4},"end":{"line":124,"column":6}},"23":{"start":{"line":122,"column":8},"end":{"line":122,"column":95}},"24":{"start":{"line":123,"column":8},"end":{"line":123,"column":62}},"25":{"start":{"line":138,"column":4},"end":{"line":141,"column":6}},"26":{"start":{"line":139,"column":8},"end":{"line":139,"column":114}},"27":{"start":{"line":140,"column":8},"end":{"line":140,"column":88}},"28":{"start":{"line":160,"column":4},"end":{"line":164,"column":6}},"29":{"start":{"line":161,"column":8},"end":{"line":162,"column":50}},"30":{"start":{"line":163,"column":8},"end":{"line":163,"column":77}},"31":{"start":{"line":178,"column":4},"end":{"line":181,"column":6}},"32":{"start":{"line":179,"column":8},"end":{"line":179,"column":114}},"33":{"start":{"line":180,"column":8},"end":{"line":180,"column":75}},"34":{"start":{"line":193,"column":4},"end":{"line":202,"column":6}},"35":{"start":{"line":194,"column":8},"end":{"line":199,"column":10}},"36":{"start":{"line":201,"column":8},"end":{"line":201,"column":62}},"37":{"start":{"line":220,"column":4},"end":{"line":249,"column":6}},"38":{"start":{"line":221,"column":8},"end":{"line":221,"column":51}},"39":{"start":{"line":222,"column":8},"end":{"line":222,"column":25}},"40":{"start":{"line":222,"column":17},"end":{"line":222,"column":25}},"41":{"start":{"line":223,"column":8},"end":{"line":223,"column":29}},"42":{"start":{"line":223,"column":19},"end":{"line":223,"column":29}},"43":{"start":{"line":225,"column":8},"end":{"line":231,"column":9}},"44":{"start":{"line":226,"column":12},"end":{"line":226,"column":27}},"45":{"start":{"line":227,"column":12},"end":{"line":229,"column":15}},"46":{"start":{"line":228,"column":16},"end":{"line":228,"column":40}},"47":{"start":{"line":230,"column":12},"end":{"line":230,"column":47}},"48":{"start":{"line":233,"column":8},"end":{"line":239,"column":9}},"49":{"start":{"line":234,"column":12},"end":{"line":234,"column":27}},"50":{"start":{"line":235,"column":12},"end":{"line":237,"column":15}},"51":{"start":{"line":236,"column":16},"end":{"line":236,"column":37}},"52":{"start":{"line":238,"column":12},"end":{"line":238,"column":47}},"53":{"start":{"line":241,"column":8},"end":{"line":248,"column":10}}},"branchMap":{"1":{"line":222,"type":"if","locations":[{"start":{"line":222,"column":8},"end":{"line":222,"column":8}},{"start":{"line":222,"column":8},"end":{"line":222,"column":8}}]},"2":{"line":223,"type":"if","locations":[{"start":{"line":223,"column":8},"end":{"line":223,"column":8}},{"start":{"line":223,"column":8},"end":{"line":223,"column":8}}]},"3":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":8},"end":{"line":225,"column":8}},{"start":{"line":225,"column":8},"end":{"line":225,"column":8}}]},"4":{"line":233,"type":"if","locations":[{"start":{"line":233,"column":8},"end":{"line":233,"column":8}},{"start":{"line":233,"column":8},"end":{"line":233,"column":8}}]}},"code":["\"use strict\";","","module.exports = ScreensClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/screens'"," *"," * @param {JiraClient} jiraClient"," * @constructor ScreensClient"," */","function ScreensClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Gets available fields for screen. i.e ones that haven't already been added.","     *","     * @method getAvailableFields","     * @memberOf ScreensClient#","     * @param {Object} opts The request options sent to Jira","     * @param {number} opts.screenId The id of the screen to retrieve.","     * @param [callback] Called when the available fields have been retrieved","     * @return {Promise} Resolved when the available fields have been retrieved","     */","    this.getAvailableFields = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/availableFields', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns a list of all tabs for the given screen.","     *","     * @method getTabs","     * @memberOf ScreensClient#","     * @param {Object} opts The request options sent to Jira","     * @param {number} opts.screenId The id of the screen to retrieve.","     * @param [callback] Called when the tabs have been retrieved.","     * @return {Promise} Resolved when the tabs have been retrieved.","     */","    this.getTabs = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/tabs', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Creates tab for given screen","     *","     * @method createTab","     * @memberOf ScreensClient#","     * @param {Object} opts The request options sent to Jira","     * @param {number} opts.screenId The id of the screen in which to create a tab.","     * @param {string} opts.name The name of the tab to add.  Minimum required to create a tab.","     * @param [callback] Called when the tab has been created.","     * @return {Promise} Resolved when the tab has been created.","     */","    this.createTab = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/tabs', 'POST', {name: opts.name});","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Renames the given tab on the given screen.","     *","     * @method renameTab","     * @memberOf ScreensClient#","     * @param {Object} opts The request options sent to the jira API","     * @param {number} opts.screenId The id of the screen containing the tab to rename.","     * @param {number} opts.tabId The id of the tab to rename","     * @param {string} opts.name The new name of the tab.","     * @param [callback] Called when data has been retrieved","     * @return {Promise} Resolved when data has been retrieved","     */","    this.renameTab = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId, 'PUT', {name: opts.name});","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Deletes the given tab from the given screen.","     *","     * @method deleteTab","     * @memberOf ScreensClient#","     * @param {Object} opts The request options sent to the jira API","     * @param {number} opts.screenId The id of the screen containing the tab to delete.","     * @param {number} opts.tabId The id of the tab to delete","     * @param [callback] Called when data has been retrieved","     * @return {Promise} Resolved when data has been retrieved","     */","    this.deleteTab = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId, 'DELETE');","        return this.jiraClient.makeRequest(options, callback, 'Tab Deleted');","    };","","    /**","     * Adds field to the given tab","     *","     * @method addFieldToTab","     * @memberOf ScreensClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.screenId The id of the screen containing the tab.","     * @param {number} opts.tabId the id of the tab to which the fields will be added.","     * @param {string} opts.fieldId The field to add","     * @param [callback] Called when the fields have been added to the tab.","     * @return {Promise} Resolved when the fields have been added to the tab.","     */","    this.addFieldToTab = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId + '/fields', 'POST', opts.fieldId);","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Gets all fields for a given tab.","     *","     * @method getFieldsInTab","     * @memberOf ScreensClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.screenId The id of the screen containing the tab.","     * @param {number} opts.tabId the id of the tab for which to retrieve fields.","     * @param [callback] Called when the fields have been retrieved.","     * @return {Promise} Resolved when the fields have been retrieved.","     */","    this.getFieldsInTab = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId + '/fields', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Remove the given field from the given tab.","     *","     * @method removeFieldFromTab","     * @memberOf ScreensClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.screenId The id of the screen containing the tab.","     * @param {number} opts.tabId the id of the tab from which to remove the field.","     * @param {string} opts.fieldId The id of the field to remove from the tab.","     * @param [callback] Called when the field has been removed.","     * @return {Promise} Resolved when the field has been removed.","     */","    this.removeFieldFromTab = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId + '/fields/' + opts.fieldId, 'DELETE');","        return this.jiraClient.makeRequest(options, callback, 'Field Removed From Tab');","    };","","    /**","     * Move the given field on the given tab","     *","     * @method moveFieldOnTab","     * @memberOf ScreensClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.screenId The id of the screen containing the tab.","     * @param {number} opts.tabId the id of the tab containing the field.","     * @param {string} opts.fieldId The id of the field to remove from the tab.","     * @param {number} opts.newPosition The position to which the field should be moved.  May be one of:","     *  * Earlier","     *  * Later","     *  * First","     *  * Last","     * @param [callback] Called when the field has been removed.","     * @return {Promise} Resolved when the field has been removed.","     */","    this.moveFieldOnTab = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId + '/fields/' + opts.fieldId + '/move',","            'POST', {position: opts.newPosition});","        return this.jiraClient.makeRequest(options, callback, 'Field Moved');","    };","","    /**","     * Moves tab position","     *","     * @method moveTabPosition","     * @memberOf ScreensClient#","     * @param {Object} opts The request options sent to the Jira API.","     * @param {number} opts.screenId The id of the screen containing the tab.","     * @param {number} opts.tabId the id of the tab to move.","     * @param {number} opts.newPosition The new (zero-indexed) position of the tab.","     * @param [callback] Called when the tab has been moved.","     * @return {Promise} Resolved when the tab has been moved.","     */","    this.moveTabPosition = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/tabs/' + opts.tabId + '/move/' + opts.newPosition, 'POST');","        return this.jiraClient.makeRequest(options, callback, 'Tab Moved');","    };","","    /**","     * Adds field or custom field to the default tab","     *","     * @method addFieldToDefaultTab","     * @memberOf ScreensClient#","     * @param {Object} opts The request options sent to the Jira API.","     * @param {string} opts.fieldId The id of the field to add to the default tab.","     * @param [callback] Called when the tab has been moved.","     * @return {Promise} Resolved when the tab has been moved.","     */","    this.addFieldToDefaultTab = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/screens/addToDefault/' + opts.fieldId),","            method: 'POST',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Build out the request options necessary to make a particular API call.","     *","     * @private","     * @method buildRequestOptions","     * @memberOf FilterClient#","     * @param {Object} opts The arguments passed to the method.","     * @param {number} opts.screenId The id of the screen to use in the path.","     * @param {Array} [opts.fields] The fields to include","     * @param {Array} [opts.expand] The fields to expand","     * @param {string} path The path of the endpoint following /screen/{id}","     * @param {string} method The request method.","     * @param {Object} [body] The request body, if any.","     * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.","     * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}","     */","    this.buildRequestOptions = function (opts, path, method, body, qs) {","        var basePath = '/screens/' + opts.screenId;","        if (!qs) qs = {};","        if (!body) body = {};","","        if (opts.fields) {","            qs.fields = '';","            opts.fields.forEach(function (field) {","                qs.fields += field + ','","            });","            qs.fields = qs.fields.slice(0, -1);","        }","","        if (opts.expand) {","            qs.expand = '';","            opts.expand.forEach(function (ex) {","                qs.expand += ex + ','","            });","            qs.expand = qs.expand.slice(0, -1);","        }","","        return {","            uri: this.jiraClient.buildURL(basePath + path),","            method: method,","            body: body,","            qs: qs,","            followAllRedirects: true,","            json: true","        };","    };","}"],"l":{"3":1,"11":1,"12":0,"24":0,"25":0,"26":0,"39":0,"40":0,"41":0,"55":0,"56":0,"57":0,"72":0,"73":0,"74":0,"88":0,"89":0,"90":0,"105":0,"106":0,"107":0,"121":0,"122":0,"123":0,"138":0,"139":0,"140":0,"160":0,"161":0,"163":0,"178":0,"179":0,"180":0,"193":0,"194":0,"201":0,"220":0,"221":0,"222":0,"223":0,"225":0,"226":0,"227":0,"228":0,"230":0,"233":0,"234":0,"235":0,"236":0,"238":0,"241":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/search.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/search.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"SearchClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}}},"2":{"name":"(anonymous_2)","line":53,"loc":{"start":{"line":53,"column":18},"end":{"line":53,"column":44}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":11,"column":0},"end":{"line":82,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":53,"column":4},"end":{"line":81,"column":5}},"5":{"start":{"line":54,"column":8},"end":{"line":54,"column":44}},"6":{"start":{"line":56,"column":8},"end":{"line":62,"column":10}},"7":{"start":{"line":64,"column":8},"end":{"line":71,"column":10}},"8":{"start":{"line":73,"column":8},"end":{"line":77,"column":9}},"9":{"start":{"line":74,"column":12},"end":{"line":74,"column":42}},"10":{"start":{"line":76,"column":12},"end":{"line":76,"column":40}},"11":{"start":{"line":80,"column":8},"end":{"line":80,"column":62}}},"branchMap":{"1":{"line":54,"type":"binary-expr","locations":[{"start":{"line":54,"column":22},"end":{"line":54,"column":33}},{"start":{"line":54,"column":37},"end":{"line":54,"column":43}}]},"2":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":73,"column":8}},{"start":{"line":73,"column":8},"end":{"line":73,"column":8}}]}},"code":["\"use strict\";","","module.exports = SearchClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/search'"," *"," * @param {JiraClient} jiraClient"," * @constructor SearchClient"," */","function SearchClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Searches for issues using JQL.","     *","     * Sorting the jql parameter is a full JQL expression, and includes an ORDER BY clause.","     *","     * The fields param (which can be specified multiple times) gives a comma-separated list of fields to include in","     * the response. This can be used to retrieve a subset of fields. A particular field can be excluded by prefixing","     * it with a minus.","     *","     * By default, only navigable (*navigable) fields are returned in this search resource. Note: the default is","     * different in the get-issue resource -- the default there all fields (*all).","     *","     * * *all - include all fields","     * * navigable - include just navigable fields","     * * summary,comment - include just the summary and comments","     * * -description - include navigable fields except the description (the default is *navigable for search)","     * * *all,-comment - include everything except comments","     *","     * Expanding Issues in the Search Result: It is possible to expand the issues returned by directly specifying the","     * expansion on the expand parameter passed in to this resources.","     *","     * For instance, to expand the \"changelog\" for all the issues on the search result, it is neccesary to specify","     * \"changelog\" as one of the values to expand.","     *","     * @method search","     * @memberOf SearchClient#","     * @param opts The options for the search.","     * @param {string} opts.jql The JQL query string","     * @param {number} [opts.startAt] The index of the first issue to return (0-based)","     * @param {number} [opts.maxResults] The maximum number of issues to return (defaults to 50). The maximum allowable","     *     value is dictated by the JIRA property 'jira.search.views.default.max'. If you specify a value that is","     *     higher than this number, your search results will be truncated.","     * @param {boolean} [opts.validateQuery=true] Whether to validate the JQL query","     * @param {array} [opts.fields] The list of fields to return for each issue. By default, all navigable fields are","     *     returned.","     * @param {array} [opts.expand] A list of the parameters to expand.","     * @param [callback] Called with the search results.","     * @return {Promise} Resolved with the search results.","     */","    this.search = function (opts, callback) {","        opts.method = opts.method || 'POST';","","        var options = {","            uri: this.jiraClient.buildURL('/search'),","            method: opts.method, ","            json: true,","            followAllRedirects: true","","        };","","        var search_options = {","            jql: opts.jql,","            startAt: opts.startAt,","            maxResults: opts.maxResults,","            validateQuery: opts.validateQuery,","            fields: opts.fields,","            expand: opts.expand","        };","","        if (opts.method === 'POST') {","            options.body = search_options;","        } else {","            options.qs = search_options;","        }","","","        return this.jiraClient.makeRequest(options, callback);","    }","}",""],"l":{"3":1,"11":1,"12":0,"53":0,"54":0,"56":0,"64":0,"73":0,"74":0,"76":0,"80":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/securityLevel.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/securityLevel.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"SecurityLevelClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":41}}},"2":{"name":"(anonymous_2)","line":24,"loc":{"start":{"line":24,"column":28},"end":{"line":24,"column":54}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":37}},"2":{"start":{"line":11,"column":0},"end":{"line":34,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":24,"column":4},"end":{"line":33,"column":5}},"5":{"start":{"line":25,"column":8},"end":{"line":30,"column":10}},"6":{"start":{"line":32,"column":8},"end":{"line":32,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = SecurityLevelClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/securitylevel'"," *"," * @param {JiraClient} jiraClient"," * @constructor SecurityLevelClient"," */","function SecurityLevelClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Get a full representation of the security level that has the given id.","     *","     * @method getSecurityLevel","     * @memberOf SecurityLevelClient#","     * @param opts The request options to send to the Jira API.","     * @param opts.securityLevelId The id of the security level to retrieve","     * @param [callback] Called when the security level has been retrieved.","     * @return {Promise} Resolved when the security level has been retrieved.","     */","    this.getSecurityLevel = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/securitylevel/' + opts.securityLevelId),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"11":1,"12":0,"24":0,"25":0,"32":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/serverInfo.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/serverInfo.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0},"b":{},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"ServerInfoClient","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":38}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":25},"end":{"line":23,"column":51}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":34}},"2":{"start":{"line":10,"column":0},"end":{"line":36,"column":1}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":35,"column":5}},"5":{"start":{"line":24,"column":8},"end":{"line":32,"column":10}},"6":{"start":{"line":34,"column":8},"end":{"line":34,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = ServerInfoClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/serverInfo'"," * @param {JiraClient} jiraClient"," * @constructor ServerInfoClient"," */","function ServerInfoClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns general information about the current JIRA server.","     *","     * @method getServerInfo","     * @memberOf ServerInfoClient#","     * @param opts The request options sent to the Jira API.","     * @param {boolean} [opts.doHealthCheck] Whether to perform a health check on the server.","     * @param [callback] Called when the server info has been retrieved.","     * @return {Promise} Resolved when the server info has been retrieved.","     */","    this.getServerInfo = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/serverInfo'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                doHealthCheck: opts.doHealthCheck","            }","        };","","        return this.jiraClient.makeRequest(options, callback);","    }","}"],"l":{"3":1,"10":1,"11":0,"23":0,"24":0,"34":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/settings.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/settings.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"SettingsClient","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":36}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":22},"end":{"line":23,"column":48}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":30},"end":{"line":44,"column":56}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":10,"column":0},"end":{"line":54,"column":1}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":33,"column":6}},"5":{"start":{"line":24,"column":8},"end":{"line":30,"column":10}},"6":{"start":{"line":32,"column":8},"end":{"line":32,"column":62}},"7":{"start":{"line":44,"column":4},"end":{"line":53,"column":6}},"8":{"start":{"line":45,"column":8},"end":{"line":50,"column":10}},"9":{"start":{"line":52,"column":8},"end":{"line":52,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = SettingsClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/settings'"," * @param {JiraClient} jiraClient"," * @constructor SettingsClient"," */","function SettingsClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Sets the base URL that is configured for this JIRA instance.","     *","     * @method setBaseUrl","     * @memberOf SettingsClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.newUrl The new base url.","     * @param [callback] Called when the base url has been set.","     * @return {Promise} Resolved when the base url has been set.","     */","    this.setBaseUrl = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/settings/baseUrl'),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            body: opts.newUrl","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns the default system columns for issue navigator. Admin permission will be required.","     *","     * @method getIssueNavColumns","     * @memberOf SettingsClient#","     * @param opts Ignored","     * @param [callback] Called when the columns have been retrieved","     * @return {Promise} Resolved when the columns have been retrieved","     */","    this.getIssueNavColumns = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/settings/columns'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}"],"l":{"3":1,"10":1,"11":0,"23":0,"24":0,"32":0,"44":0,"45":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/sprint.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/sprint.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"fnMap":{"1":{"name":"AgileSprintClient","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":39}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":22},"end":{"line":23,"column":50}}},"3":{"name":"(anonymous_3)","line":45,"loc":{"start":{"line":45,"column":19},"end":{"line":45,"column":45}}},"4":{"name":"(anonymous_4)","line":72,"loc":{"start":{"line":72,"column":22},"end":{"line":72,"column":50}}},"5":{"name":"(anonymous_5)","line":98,"loc":{"start":{"line":98,"column":31},"end":{"line":98,"column":59}}},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":22},"end":{"line":123,"column":48}}},"7":{"name":"(anonymous_7)","line":153,"loc":{"start":{"line":153,"column":25},"end":{"line":153,"column":51}}},"8":{"name":"(anonymous_8)","line":183,"loc":{"start":{"line":183,"column":26},"end":{"line":183,"column":52}}},"9":{"name":"(anonymous_9)","line":209,"loc":{"start":{"line":209,"column":20},"end":{"line":209,"column":49}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":35}},"2":{"start":{"line":10,"column":0},"end":{"line":224,"column":1}},"3":{"start":{"line":11,"column":2},"end":{"line":11,"column":31}},"4":{"start":{"line":23,"column":2},"end":{"line":33,"column":4}},"5":{"start":{"line":24,"column":4},"end":{"line":30,"column":6}},"6":{"start":{"line":32,"column":4},"end":{"line":32,"column":58}},"7":{"start":{"line":45,"column":2},"end":{"line":59,"column":4}},"8":{"start":{"line":46,"column":4},"end":{"line":56,"column":6}},"9":{"start":{"line":58,"column":4},"end":{"line":58,"column":58}},"10":{"start":{"line":72,"column":2},"end":{"line":85,"column":4}},"11":{"start":{"line":73,"column":4},"end":{"line":73,"column":35}},"12":{"start":{"line":74,"column":4},"end":{"line":74,"column":27}},"13":{"start":{"line":76,"column":4},"end":{"line":82,"column":6}},"14":{"start":{"line":84,"column":4},"end":{"line":84,"column":58}},"15":{"start":{"line":98,"column":2},"end":{"line":111,"column":4}},"16":{"start":{"line":99,"column":4},"end":{"line":99,"column":35}},"17":{"start":{"line":100,"column":4},"end":{"line":100,"column":27}},"18":{"start":{"line":102,"column":4},"end":{"line":108,"column":6}},"19":{"start":{"line":110,"column":4},"end":{"line":110,"column":58}},"20":{"start":{"line":123,"column":2},"end":{"line":137,"column":4}},"21":{"start":{"line":124,"column":4},"end":{"line":134,"column":6}},"22":{"start":{"line":136,"column":4},"end":{"line":136,"column":58}},"23":{"start":{"line":153,"column":2},"end":{"line":170,"column":4}},"24":{"start":{"line":154,"column":4},"end":{"line":167,"column":6}},"25":{"start":{"line":169,"column":4},"end":{"line":169,"column":58}},"26":{"start":{"line":183,"column":2},"end":{"line":196,"column":4}},"27":{"start":{"line":184,"column":4},"end":{"line":184,"column":33}},"28":{"start":{"line":185,"column":4},"end":{"line":185,"column":25}},"29":{"start":{"line":187,"column":4},"end":{"line":193,"column":6}},"30":{"start":{"line":195,"column":4},"end":{"line":195,"column":58}},"31":{"start":{"line":209,"column":2},"end":{"line":222,"column":4}},"32":{"start":{"line":210,"column":4},"end":{"line":210,"column":36}},"33":{"start":{"line":211,"column":4},"end":{"line":211,"column":28}},"34":{"start":{"line":213,"column":4},"end":{"line":219,"column":6}},"35":{"start":{"line":221,"column":4},"end":{"line":221,"column":58}}},"branchMap":{},"code":["\"use strict\";","","module.exports = AgileSprintClient;","","/**"," * Used to access Jira REST endpoints in '/rest/agile/1.0/sprint'"," * @param {JiraClient} jiraClient"," * @constructor AgileSprintClient"," */","function AgileSprintClient(jiraClient) {","  this.jiraClient = jiraClient;","","  /**","   * Creates a sprint from a JSON representation.","   *","   * @method createSprint","   * @memberOf AgileSprintClient#","   * @param {Object} sprint The sprint data in the form of POST body to the","   *   Jira API.","   * @param [callback] Called when the sprint has been created.","   * @return {Promise} Resolved when the sprint has been created.","   */","  this.createSprint = function (sprint, callback) {","    var options = {","      uri: this.jiraClient.buildAgileURL('/sprint'),","      method: 'POST',","      followAllRedirects: true,","      json: true,","      body: sprint","    };","","    return this.jiraClient.makeRequest(options, callback);","  };","","  /**","   * Get a single sprint.","   *","   * @method getSprint","   * @memberOf AgileSprintClient#","   * @param {object} opts The request options sent to the Jira API.","   * @param opts.sprintId The sprint id.","   * @param [callback] Called when the sprint has been retrieved.","   * @return {Promise} Resolved when the sprint has been retrieved.","   */","  this.getSprint = function (opts, callback) {","    var options = {","      uri: this.jiraClient.buildAgileURL('/sprint/' + opts.sprintId),","      method: 'GET',","      json: true,","      followAllRedirects: true,","      qs: {","        filter: opts.filter,","        startAt: opts.startAt,","        maxResults: opts.maxResults","      }","    };","","    return this.jiraClient.makeRequest(options, callback);","  };","","  /**","   * Perform a full update of a sprint.","   *","   * @method updateSprint","   * @memberOf AgileSprintClient#","   * @param {Object} sprint The sprint data in the form of PUT body to the","   *   Jira API.","   * @param {string} [sprint.sprintId] The id of the sprint.  EX: 331","   * @param [callback] Called when the sprint has been updated.","   * @return {Promise} Resolved when the sprint has been updated.","   */","  this.updateSprint = function (sprint, callback) {","    var sprintId = sprint.sprintId;","    delete sprint.sprintId;","","    var options = {","      uri: this.jiraClient.buildAgileURL('/sprint/' + sprintId),","      method: 'PUT',","      followAllRedirects: true,","      json: true,","      body: sprint","    };","","    return this.jiraClient.makeRequest(options, callback);","  };","","  /**","   * Perform a partial update of a sprint.","   *","   * @method partiallyUpdateSprint","   * @memberOf AgileSprintClient#","   * @param {Object} sprint The sprint data in the form of POST body to the","   *   Jira API.","   * @param {string} [sprint.sprintId] The id of the sprint.  EX: 331.","   * @param callback Called when the sprint has been updated.","   * @return {Promise} Resolved when the sprint has been updated.","   */","  this.partiallyUpdateSprint = function (sprint, callback) {","    var sprintId = sprint.sprintId;","    delete sprint.sprintId;","","    var options = {","      uri: this.jiraClient.buildAgileURL('/sprint/' + sprintId),","      method: 'POST',","      followAllRedirects: true,","      json: true,","      body: sprint","    };","","    return this.jiraClient.makeRequest(options, callback);","  };","","  /**","   * Delete an existing sprint.","   *","   * @method deleteSprint","   * @memberOf AgileSprintClient#","   * @param {Object} opts The request options sent to the Jira API.","   * @param {string} opts.sprintId The id of the sprint.  EX: 331","   * @param [callback] Called when the sprint is deleted.","   * @return {Promise} Resolved when the sprint is deleted.","   */","  this.deleteSprint = function (opts, callback) {","    var options = {","      uri: this.jiraClient.buildAgileURL('/sprint/' + opts.sprintId),","      method: 'DELETE',","      json: true,","      followAllRedirects: true,","      qs: {","        filter: opts.filter,","        startAt: opts.startAt,","        maxResults: opts.maxResults","      }","    };","","    return this.jiraClient.makeRequest(options, callback);","  };","","  /**","   * Return all issues in a sprint, for a given sprint id.","   *","   * @method getSprintIssues","   * @memberOf AgileSprintClient#","   * @param {Object} opts The request options sent to the Jira API.","   * @param opts.sprintId The sprint id.","   * @param {string} jql Filters results using a JQL query.","   * @param {boolean} validateQuery Specifies whether to valide the JQL query.","   * @param {string} fields The list of fields to return for each issue.","   * @param {string} expand A comma-separated list of the parameters to expand.","   * @param [callback] Called when the issues are returned.","   * @return {Promise} Resolved when the issues are returned.","   */","  this.getSprintIssues = function (opts, callback) {","    var options = {","      uri: this.jiraClient.buildAgileURL('/sprint/' + opts.sprintId + '/issue'),","      method: 'GET',","      json: true,","      followAllRedirects: true,","      qs: {","        startAt: opts.startAt,","        maxResults: opts.maxResults,","        jql: opts.jql,","        validateQuery: opts.validateQuery,","        fields: opts.fields,","        expand: opts.expand","      }","    };","","    return this.jiraClient.makeRequest(options, callback);","  };","","  /**","   * Move issues to a sprint, for a given sprint id.","   *","   * @method moveSprintIssues","   * @memberOf AgileSprintClient#","   * @param {Object} opts The issue data in the form of POST body to the","   *   Jira API.","   * @param {string} [opts.sprintId] The sprint id.","   * @param [callback] Called when the sprint has been retrieved.","   * @return {Promise} Resolved when the sprint has been retrieved.","   */","  this.moveSprintIssues = function (opts, callback) {","    var sprintId = opts.sprintId;","    delete opts.sprintId;","","    var options = {","      uri: this.jiraClient.buildAgileURL('/sprint/' + sprintId + '/issue'),","      method: 'POST',","      followAllRedirects: true,","      json: true,","      body: opts","    };","","    return this.jiraClient.makeRequest(options, callback);","  };","","  /**","   * Swap the position of the sprint (given by sprint id) with the second","   * sprint.","   *","   * @method swapSprint","   * @memberOf AgileSprintClient#","   * @param {Object} swapped The data in the form of POST body to the Jira API.","   * @param {string} [swapped.sprintId] The id of the sprint.  EX: 311","   * @param [callback] Called when the sprint has been retrived.","   * @return {Promise} Resolved when the sprint has been retrived.","   */","  this.swapSprint = function (swapped, callback) {","    var sprintId = swapped.sprintId;","    delete swapped.sprintId;","","    var options = {","      uri: this.jiraClient.buildAgileURL('/sprint/' + sprintId + '/swap'),","      method: 'POST',","      followAllRedirects: true,","      json: true,","      body: swapped","    };","","    return this.jiraClient.makeRequest(options, callback);","  };","","}",""],"l":{"3":1,"10":1,"11":0,"23":0,"24":0,"32":0,"45":0,"46":0,"58":0,"72":0,"73":0,"74":0,"76":0,"84":0,"98":0,"99":0,"100":0,"102":0,"110":0,"123":0,"124":0,"136":0,"153":0,"154":0,"169":0,"183":0,"184":0,"185":0,"187":0,"195":0,"209":0,"210":0,"211":0,"213":0,"221":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/status.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/status.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"StatusClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":34}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":26},"end":{"line":23,"column":52}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":21},"end":{"line":44,"column":47}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":11,"column":0},"end":{"line":54,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":32,"column":6}},"5":{"start":{"line":24,"column":8},"end":{"line":29,"column":10}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":62}},"7":{"start":{"line":44,"column":4},"end":{"line":53,"column":6}},"8":{"start":{"line":45,"column":8},"end":{"line":50,"column":10}},"9":{"start":{"line":52,"column":8},"end":{"line":52,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = StatusClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/status'"," *"," * @param {JiraClient} jiraClient"," * @constructor StatusClient"," */","function StatusClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns a list of all statuses visible to the user","     *","     * @method getAllStatuses","     * @memberOf StatusClient#","     * @param opts Ignored","     * @param [callback] Called when statuses have been retrieved.","     * @return {Promise} Resolved when statuses have been retrieved.","     */","    this.getAllStatuses = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/status'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get a full representation of the status that has the given id.","     *","     * @method getStatus","     * @memberOf StatusClient#","     * @param opts The options sent to the Jira API","     * @param opts.statusId A String containing a status id","     * @param [callback] Called when the status has been retrieved.","     * @return {Promise} Resolved when the status has been retrieved.","     */","    this.getStatus = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/status/' + opts.statusId),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}"],"l":{"3":1,"11":1,"12":0,"23":0,"24":0,"31":0,"44":0,"45":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/statusCategory.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/statusCategory.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"StatusCategoryClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":42}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":34},"end":{"line":23,"column":60}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":29},"end":{"line":44,"column":55}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":38}},"2":{"start":{"line":11,"column":0},"end":{"line":54,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":32,"column":6}},"5":{"start":{"line":24,"column":8},"end":{"line":29,"column":10}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":62}},"7":{"start":{"line":44,"column":4},"end":{"line":53,"column":6}},"8":{"start":{"line":45,"column":8},"end":{"line":50,"column":10}},"9":{"start":{"line":52,"column":8},"end":{"line":52,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = StatusCategoryClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/statuscategory'"," *"," * @param {JiraClient} jiraClient"," * @constructor StatusCategoryClient"," */","function StatusCategoryClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns a list of all statusCategories visible to the user","     *","     * @method getAllStatusCategories","     * @memberOf StatusCategoryClient#","     * @param opts Ignored","     * @param [callback] Called when the statusCategories have been retrieved.","     * @return {Promise} Resolved when the statusCategories have been retrieved.","     */","    this.getAllStatusCategories = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/statuscategory'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get a full representation of the statusCategory that has the given id or key.","     *","     * @method getStatusCategory","     * @memberOf StatusCategoryClient#","     * @param opts The options sent to the Jira API","     * @param opts.statusCategoryIdOrKey A String containing a statusCategory id","     * @param [callback] Called when the statusCategory has been retrieved.","     * @return {Promise} Resolved when the statusCategory has been retrieved.","     */","    this.getStatusCategory = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/statuscategory/' + opts.statusCategoryIdOrKey),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}"],"l":{"3":1,"11":1,"12":0,"23":0,"24":0,"31":0,"44":0,"45":0,"52":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/user.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/user.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"fnMap":{"1":{"name":"UserClient","line":14,"loc":{"start":{"line":14,"column":0},"end":{"line":14,"column":32}}},"2":{"name":"(anonymous_2)","line":29,"loc":{"start":{"line":29,"column":19},"end":{"line":29,"column":45}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":32},"end":{"line":44,"column":46}}},"4":{"name":"(anonymous_4)","line":63,"loc":{"start":{"line":63,"column":22},"end":{"line":63,"column":48}}},"5":{"name":"(anonymous_5)","line":89,"loc":{"start":{"line":89,"column":22},"end":{"line":89,"column":48}}},"6":{"name":"(anonymous_6)","line":114,"loc":{"start":{"line":114,"column":20},"end":{"line":114,"column":46}}},"7":{"name":"(anonymous_7)","line":146,"loc":{"start":{"line":146,"column":40},"end":{"line":146,"column":66}}},"8":{"name":"(anonymous_8)","line":149,"loc":{"start":{"line":149,"column":37},"end":{"line":149,"column":52}}},"9":{"name":"(anonymous_9)","line":189,"loc":{"start":{"line":189,"column":28},"end":{"line":189,"column":54}}},"10":{"name":"(anonymous_10)","line":219,"loc":{"start":{"line":219,"column":33},"end":{"line":219,"column":59}}},"11":{"name":"(anonymous_11)","line":255,"loc":{"start":{"line":255,"column":34},"end":{"line":255,"column":60}}},"12":{"name":"(anonymous_12)","line":283,"loc":{"start":{"line":283,"column":24},"end":{"line":283,"column":50}}},"13":{"name":"(anonymous_13)","line":306,"loc":{"start":{"line":306,"column":22},"end":{"line":306,"column":48}}},"14":{"name":"(anonymous_14)","line":330,"loc":{"start":{"line":330,"column":29},"end":{"line":330,"column":55}}},"15":{"name":"(anonymous_15)","line":356,"loc":{"start":{"line":356,"column":29},"end":{"line":356,"column":55}}},"16":{"name":"(anonymous_16)","line":383,"loc":{"start":{"line":383,"column":31},"end":{"line":383,"column":57}}},"17":{"name":"(anonymous_17)","line":408,"loc":{"start":{"line":408,"column":26},"end":{"line":408,"column":52}}},"18":{"name":"(anonymous_18)","line":449,"loc":{"start":{"line":449,"column":29},"end":{"line":449,"column":55}}},"19":{"name":"(anonymous_19)","line":452,"loc":{"start":{"line":452,"column":37},"end":{"line":452,"column":50}}},"20":{"name":"(anonymous_20)","line":487,"loc":{"start":{"line":487,"column":24},"end":{"line":487,"column":50}}},"21":{"name":"(anonymous_21)","line":520,"loc":{"start":{"line":520,"column":18},"end":{"line":520,"column":44}}},"22":{"name":"(anonymous_22)","line":553,"loc":{"start":{"line":553,"column":27},"end":{"line":553,"column":53}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":23}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":27}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":28}},"4":{"start":{"line":14,"column":0},"end":{"line":569,"column":1}},"5":{"start":{"line":15,"column":4},"end":{"line":15,"column":33}},"6":{"start":{"line":29,"column":4},"end":{"line":50,"column":6}},"7":{"start":{"line":30,"column":8},"end":{"line":40,"column":10}},"8":{"start":{"line":42,"column":8},"end":{"line":47,"column":9}},"9":{"start":{"line":43,"column":12},"end":{"line":43,"column":35}},"10":{"start":{"line":44,"column":12},"end":{"line":46,"column":15}},"11":{"start":{"line":45,"column":16},"end":{"line":45,"column":45}},"12":{"start":{"line":49,"column":8},"end":{"line":49,"column":62}},"13":{"start":{"line":63,"column":4},"end":{"line":76,"column":6}},"14":{"start":{"line":64,"column":8},"end":{"line":73,"column":10}},"15":{"start":{"line":75,"column":8},"end":{"line":75,"column":79}},"16":{"start":{"line":89,"column":4},"end":{"line":99,"column":6}},"17":{"start":{"line":90,"column":8},"end":{"line":96,"column":10}},"18":{"start":{"line":98,"column":8},"end":{"line":98,"column":62}},"19":{"start":{"line":114,"column":4},"end":{"line":128,"column":6}},"20":{"start":{"line":115,"column":8},"end":{"line":125,"column":10}},"21":{"start":{"line":127,"column":8},"end":{"line":127,"column":62}},"22":{"start":{"line":146,"column":4},"end":{"line":167,"column":6}},"23":{"start":{"line":147,"column":8},"end":{"line":147,"column":34}},"24":{"start":{"line":148,"column":8},"end":{"line":153,"column":9}},"25":{"start":{"line":149,"column":12},"end":{"line":151,"column":15}},"26":{"start":{"line":150,"column":16},"end":{"line":150,"column":46}},"27":{"start":{"line":152,"column":12},"end":{"line":152,"column":61}},"28":{"start":{"line":154,"column":8},"end":{"line":165,"column":10}},"29":{"start":{"line":166,"column":8},"end":{"line":166,"column":62}},"30":{"start":{"line":189,"column":4},"end":{"line":205,"column":6}},"31":{"start":{"line":190,"column":8},"end":{"line":203,"column":10}},"32":{"start":{"line":204,"column":8},"end":{"line":204,"column":62}},"33":{"start":{"line":219,"column":4},"end":{"line":242,"column":6}},"34":{"start":{"line":220,"column":8},"end":{"line":220,"column":61}},"35":{"start":{"line":221,"column":8},"end":{"line":221,"column":52}},"36":{"start":{"line":222,"column":8},"end":{"line":222,"column":55}},"37":{"start":{"line":224,"column":8},"end":{"line":224,"column":60}},"38":{"start":{"line":226,"column":8},"end":{"line":240,"column":10}},"39":{"start":{"line":241,"column":8},"end":{"line":241,"column":62}},"40":{"start":{"line":255,"column":4},"end":{"line":270,"column":6}},"41":{"start":{"line":256,"column":8},"end":{"line":268,"column":10}},"42":{"start":{"line":269,"column":8},"end":{"line":269,"column":82}},"43":{"start":{"line":283,"column":4},"end":{"line":294,"column":6}},"44":{"start":{"line":284,"column":8},"end":{"line":292,"column":10}},"45":{"start":{"line":293,"column":8},"end":{"line":293,"column":80}},"46":{"start":{"line":306,"column":4},"end":{"line":317,"column":6}},"47":{"start":{"line":307,"column":8},"end":{"line":315,"column":10}},"48":{"start":{"line":316,"column":8},"end":{"line":316,"column":62}},"49":{"start":{"line":330,"column":4},"end":{"line":341,"column":6}},"50":{"start":{"line":331,"column":8},"end":{"line":339,"column":10}},"51":{"start":{"line":340,"column":8},"end":{"line":340,"column":62}},"52":{"start":{"line":356,"column":4},"end":{"line":370,"column":6}},"53":{"start":{"line":357,"column":8},"end":{"line":368,"column":10}},"54":{"start":{"line":369,"column":8},"end":{"line":369,"column":85}},"55":{"start":{"line":383,"column":4},"end":{"line":394,"column":6}},"56":{"start":{"line":384,"column":8},"end":{"line":392,"column":10}},"57":{"start":{"line":393,"column":8},"end":{"line":393,"column":87}},"58":{"start":{"line":408,"column":4},"end":{"line":423,"column":6}},"59":{"start":{"line":409,"column":8},"end":{"line":421,"column":10}},"60":{"start":{"line":422,"column":8},"end":{"line":422,"column":82}},"61":{"start":{"line":449,"column":4},"end":{"line":472,"column":6}},"62":{"start":{"line":450,"column":8},"end":{"line":450,"column":29}},"63":{"start":{"line":451,"column":8},"end":{"line":456,"column":9}},"64":{"start":{"line":452,"column":12},"end":{"line":454,"column":15}},"65":{"start":{"line":453,"column":16},"end":{"line":453,"column":38}},"66":{"start":{"line":455,"column":12},"end":{"line":455,"column":51}},"67":{"start":{"line":457,"column":8},"end":{"line":470,"column":10}},"68":{"start":{"line":471,"column":8},"end":{"line":471,"column":62}},"69":{"start":{"line":487,"column":4},"end":{"line":501,"column":6}},"70":{"start":{"line":488,"column":8},"end":{"line":499,"column":10}},"71":{"start":{"line":500,"column":8},"end":{"line":500,"column":62}},"72":{"start":{"line":520,"column":4},"end":{"line":535,"column":6}},"73":{"start":{"line":521,"column":8},"end":{"line":533,"column":10}},"74":{"start":{"line":534,"column":8},"end":{"line":534,"column":62}},"75":{"start":{"line":553,"column":4},"end":{"line":568,"column":6}},"76":{"start":{"line":554,"column":8},"end":{"line":566,"column":10}},"77":{"start":{"line":567,"column":8},"end":{"line":567,"column":62}}},"branchMap":{"1":{"line":42,"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":42,"column":8}},{"start":{"line":42,"column":8},"end":{"line":42,"column":8}}]},"2":{"line":148,"type":"if","locations":[{"start":{"line":148,"column":8},"end":{"line":148,"column":8}},{"start":{"line":148,"column":8},"end":{"line":148,"column":8}}]},"3":{"line":224,"type":"cond-expr","locations":[{"start":{"line":224,"column":41},"end":{"line":224,"column":47}},{"start":{"line":224,"column":50},"end":{"line":224,"column":59}}]},"4":{"line":451,"type":"if","locations":[{"start":{"line":451,"column":8},"end":{"line":451,"column":8}},{"start":{"line":451,"column":8},"end":{"line":451,"column":8}}]}},"code":["\"use strict\";","","var fs = require('fs');","var path = require('path');","","module.exports = UserClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/user'"," *"," * @param {JiraClient} jiraClient"," * @constructor UserClient"," */","function UserClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Get a user. This resource cannot be accessed anonymously.","     *","     * @method getUser","     * @memberOf UserClient#","     * @param opts The request options sent to the Jira API","     * @param opts.username The name of the user to retrieve.","     * @param opts.userKey The key of the user to retrieve.","     * @param {Object} opts.expand The fields to be expanded.","     * @param [callback] Called when the user has been retrieved.","     * @return {Promise} Resolved when the user has been retrieved.","     */","    this.getUser = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username,","                key: opts.userKey,","                expand: opts.expand","            }","        };","","        if (opts.expand) {","            options.qs.expand = '';","            opts.expand.forEach(function (ex) {","                options.qs.expand += ex + ','","            });","        }","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Removes user.","     *","     * @method deleteUser","     * @memberOf UserClient#","     * @param opts The request options sent to the Jira API","     * @param opts.username The name of the user to delete.","     * @param opts.userKey The key of the user to delete.","     * @param [callback] Called when the user has been deleted.","     * @return {Promise} Resolved when the user has been deleted.","     */","    this.deleteUser = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user'),","            method: 'DELETE',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username,","                key: opts.userKey","            }","        };","","        return this.jiraClient.makeRequest(options, callback, 'User removed.');","    };","","    /**","     * Create user. By default created user will not be notified with email. If password field is not set then password","     * will be randomly generated.","     *","     * @method createUser","     * @memberOf UserClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.user See {@link https://docs.atlassian.com/jira/REST/latest/#d2e4049}","     * @param [callback] Called when the user has been created.","     * @return {Promise} Resolved when the user has been created.","     */","    this.createUser = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user'),","            method: 'POST',","            json: true,","            followAllRedirects: true,","            body: opts.user","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Modify user. The \"value\" fields present will override the existing value. Fields skipped in request will not be","     * changed.","     *","     * @method editUser","     * @memberOf UserClient#","     * @param opts The request options sent to the Jira API","     * @param opts.user See {@link https://docs.atlassian.com/jira/REST/latest/#d2e4081}","     * @param opts.username The name of the user to edit.","     * @param opts.userKey The key of the user to edit.","     * @param [callback] Called when the user has been edited.","     * @return {Promise} Resolved when the user has been edited.","     */","    this.editUser = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user'),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username,","                key: opts.userKey","            },","            body: opts.user","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns a list of users that match the search string and can be assigned issues for all the given projects. This","     * resource cannot be accessed anonymously.","     *","     * @method multiProjectSearchAssignable","     * @memberOf UserClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.username The name of the user to search.","     * @param {Array} opts.projectKeys The keys of the projects we are finding assignable users for","     * @param {number} [opts.startAt] The index of the first user to return (0-based)","     * @param {number} [opts.maxResults] The maximum number of users to return (defaults to 50). The maximum allowed","     *     value is 1000. If you specify a value that is higher than this number, your search results will be","     *     truncated.","     * @param [callback] Called when the search results have been retrieved.","     * @return {Promise} Resolved when the search results have been retrieved.","     */","    this.multiProjectSearchAssignable = function (opts, callback) {","        var projectKeyString = '';","        if (opts.projectKeys) {","            opts.projectKeys.forEach(function (key) {","                projectKeyString += key + ',';","            });","            projectKeyString = projectKeyString.slice(0, -1);","        }","        var options = {","            uri: this.jiraClient.buildURL('/user/assignable/multiProjectSearch'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username,","                projectKeys: projectKeyString,","                startAt: opts.startAt,","                maxResults: opts.maxResults","            }","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns a list of users that match the search string. This resource cannot be accessed anonymously. Please note","     * that this resource should be called with an issue key when a list of assignable users is retrieved for editing.","     * For create only a project key should be supplied. The list of assignable users may be incorrect if it's called","     * with the project key for editing.","     *","     * @method searchAssignable","     * @memberOf UserClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.username The username","     * @param {string} opts.project The key of the project we are finding assignable users for","     * @param {string} [opts.issueKey] The issue key for the issue being edited we need to find assignable users for.","     * @param {number} [opts.startAt] The index of the first user to return (0-based)","     * @param {number} [opts.maxResults] The maximum number of users to return (defaults to 50). The maximum allowed","     *     value is 1000. If you specify a value that is higher than this number, your search results will be","     *     truncated.","     * @param {number} [opts.actionDescriptorId]","     * @param [callback] Called when the search results have been retrieved.","     * @return {Promise} Resolved when the search results have been retrieved.","     */","    this.searchAssignable = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user/assignable/search'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username,","                project: opts.project,","                issueKey: opts.issueKey,","                startAt: opts.startAt,","                maxResults: opts.maxResults,","                actionDescriptorId: opts.actionDescriptorId","            }","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Creates temporary avatar. Creating a temporary avatar is part of a 3-step process in uploading a new avatar for","     * a user: upload, crop, confirm.","     *","     * @method createTemporaryAvatar","     * @memberOf UserClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.username The username","     * @param {string} opts.filepath The path to the file to upload.","     * @param [callback] Called when the temporary avatar has been uploaded.","     * @return {Promise} Resolved when the temporary avatar has been uploaded.","     */","    this.createTemporaryAvatar = function (opts, callback) {","        var extension = path.extname(opts.filepath).slice(1);","        var baseName = path.basename(opts.filepath);","        var fileSize = fs.statSync(opts.filepath).size;","","        extension = extension == 'jpg' ? 'jpeg' : extension;","","        var options = {","            uri: this.jiraClient.buildURL('/user/avatar/temporary'),","            method: 'POST',","            followAllRedirects: true,","            qs: {","                username: opts.username,","                filename: baseName,","                size: fileSize","            },","            body: fs.readFileSync(opts.filepath),","            headers: {","                \"X-Atlassian-Token\": 'no-check',","                \"Content-Type\": 'image/' + extension","            }","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Converts temporary avatar into a real avatar","     *","     * @method convertTemporaryAvatar","     * @memberOf UserClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.username The username","     * @param {Object} opts.avatarId The id of the temporary avatar to convert.","     * @param [callback] Called when the avatar has been converted","     * @return {Promise} Resolved when the avatar has been converted","     */","    this.convertTemporaryAvatar = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user/avatar/'),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username","            },","            body: {id: opts.avatarId},","            headers: {","                \"X-Atlassian-Token\": 'no-check'","            }","        };","        return this.jiraClient.makeRequest(options, callback, 'Avatar Converted');","    };","","    /**","     * Deletes avatar","     *","     * @method deleteAvatar","     * @memberOf UserClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.username The username","     * @param {Object} opts.avatarId The id of the temporary avatar to delete.","     * @param [callback] Called when the avatar has been deleted.","     * @return {Promise} Resolved when the avatar has been deleted.","     */","    this.deleteAvatar = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user/avatar/' + opts.avatarId),","            method: 'DELETE',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username","            }","        };","        return this.jiraClient.makeRequest(options, callback, 'Avatar Deleted');","    };","","    /**","     * Returns all avatars which are visible for the currently logged in user.","     *","     * @method getAvatars","     * @memberOf UserClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.username The username","     * @param [callback] Called when the avatars have been retrieved.","     * @return {Promise} Resolved when the avatars have been retrieved.","     */","    this.getAvatars = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user/avatars'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username","            }","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns the default columns for the given user. Admin permission will be required to get columns for a user","     * other than the currently logged in user.","     *","     * @method getDefaultColumns","     * @memberOf UserClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.username The username","     * @param [callback] Called when the columns have been retrieved.","     * @return {Promise} Resolved when the columns have been retrieved.","     */","    this.getDefaultColumns = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user/columns'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username","            }","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Sets the default columns for the given user. Admin permission will be required to get columns for a user other","     * than the currently logged in user.","     *","     * @method setDefaultColumns","     * @memberOf UserClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.username The username","     * @param {Array} opts.columns The names of the new columns.  See {@link","        *     https://docs.atlassian.com/jira/REST/latest/#d2e4566}","     * @param [callback] Called when the columns have been set.","     * @return {Promise} Resolved when the columns have been set.","     */","    this.setDefaultColumns = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user/columns'),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username","            },","            body: {","                columns: opts.columns","            }","        };","        return this.jiraClient.makeRequest(options, callback, 'Default Columns Set');","    };","","    /**","     * Reset the default columns for the given user to the system default. Admin permission will be required to get","     * columns for a user other than the currently logged in user.","     *","     * @method resetDefaultColumns","     * @memberOf UserClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} opts.username The username","     * @param [callback] Called when the columns have been reset.","     * @return {Promise} Resolved when the columns have been reset.","     */","    this.resetDefaultColumns = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user/columns'),","            method: 'DELETE',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username","            }","        };","        return this.jiraClient.makeRequest(options, callback, 'Default Columns Reset');","    };","","    /**","     * Modify user password.","     *","     * @method changePassword","     * @memberOf UserClient#","     * @param opts The request options sent to the Jira API","     * @param opts.username The name of the user for which to change the password.","     * @param opts.userKey The key of the user for which to change the password.","     * @param opts.password The new password.","     * @param [callback] Called when the password has been set.","     * @return {Promise} Resolved when the password has been set.","     */","    this.changePassword = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user/password'),","            method: 'PUT',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username,","                key: opts.userKey","            },","            body: {","                password: opts.password","            }","        };","        return this.jiraClient.makeRequest(options, callback, 'Password Changed');","    };","","    /**","     * Returns a list of active users that match the search string and have all specified permissions for the project","     * or issue.","     *","     * This resource can be accessed by users with ADMINISTER_PROJECT permission for the project or global","     * ADMIN or SYSADMIN rights.","     *","     * @method searchPermissions","     * @memberOf UserClient#","     * @param {Object} opts The request options sent to the jira API","     * @param {string} opts.username The username filter, list includes all users if unspecified","     * @param {Array} opts.permissions Array of permissions for project or issue returned users must have, see","     *     [Permissions]{@link","        *     https://developer.atlassian.com/static/javadoc/jira/6.0/reference/com/atlassian/jira/security/Permissions.Permission.html}","        *     JavaDoc for the list of all possible permissions.","     * @param {string} [opts.issueKey] the issue key for the issue for which returned users have specified permissions.","     * @param {string} [opts.projectKey] the optional project key to search for users with if no issueKey is supplied.","     * @param {number} [opts.startAt] the index of the first user to return (0-based)","     * @param {number} [opts.maxResults] the maximum number of users to return (defaults to 50). The maximum allowed","     *     value is 1000. If you specify a value that is higher than this number, your search results will be","     *     truncated.","     * @param [callback] Called when the search results are retrieved.","     * @return {Promise} Resolved when the search results are retrieved.","     */","    this.searchPermissions = function (opts, callback) {","        var permissions = '';","        if (opts.permissions) {","            opts.permissions.forEach(function (s) {","                permissions += s + ','","            });","            permissions = permissions.slice(0, -1);","        }","        var options = {","            uri: this.jiraClient.buildURL('/user/permission/search'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username,","                permissions: permissions,","                issueKey: opts.issueKey,","                projectKey: opts.projectKey,","                startAt: opts.startAt,","                maxResults: opts.maxResults","            }","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns a list of users matching query with highlighting. This resource cannot be accessed anonymously.","     *","     * @method searchPicker","     * @memberOf UserClient#","     * @param opts The request options sent to the Jira API.","     * @param {string} opts.query","     * @param {number} [opts.maxResults=50]","     * @param {boolean} [opts.showAvatar=false]","     * @param {string} [opts.exclude]","     * @param [callback] Called when the search results are retrieved.","     * @return {Promise} Resolved when the search results are retrieved.","     */","    this.searchPicker = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user/picker'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                query: opts.query,","                maxResults: opts.maxResults,","                showAvatar: opts.showAvatar,","                exclude: opts.exclude","            }","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns a list of users that match the search string. This resource cannot be accessed anonymously.","     *","     * @method search","     * @memberOf UserClient#","     * @param {Object} opts The request options sent to the Jira API.","     * @param {string} opts.username A query string used to search username, name or e-mail address","     * @param {number} [opts.startAt=0] the index of the first user to return (0-based)","     * @param {number} [opts.maxResults=50] the maximum number of users to return (defaults to 50). The maximum allowed","     *     value is 1000. If you specify a value that is higher than this number, your search results will be","     *     truncated.","     * @param {boolean} [opts.includeActive=true] If true, then active users are included in the results (default true)","     * @param {boolean} [opts.includeInactive=false] If true, then inactive users are included in the results (default","     *     false)","     * @param [callback] Called when the search results are retrieved.","     * @return {Promise} Resolved when the search results are retrieved.","     */","    this.search = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user/search'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username,","                maxResults: opts.maxResults,","                startAt: opts.startAt,","                includeActive: opts.includeActive,","                includeInactive: opts.includeInactive","            }","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns a list of active users that match the search string. This resource cannot be accessed anonymously. Given","     * an issue key this resource will provide a list of users that match the search string and have the browse issue","     * permission for the issue provided.","     *","     * @method viewIssueSearch","     * @memberOf UserClient#","     * @param {Object} opts The request options sent to the Jira API.","     * @param {string} opts.username A query string used to search username, name or e-mail address","     * @param {string} [opts.issueKey] the issue key for the issue being edited we need to find viewable users for.","     * @param {string} [opts.projectKey] the optional project key to search for users with if no issueKey is supplied.","     * @param {number} [opts.startAt=0] the index of the first user to return (0-based)","     * @param {number} [opts.maxResults=50] the maximum number of users to return (defaults to 50). The maximum allowed","     * @param [callback] Called when data has been retrieved","     * @return {Promise} Resolved when data has been retrieved","     */","    this.viewIssueSearch = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/user/viewissue/search'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                username: opts.username,","                issueKey: opts.issueKey,","                projectKey: opts.projectKey,","                startAt: opts.startAt,","                maxResults: opts.maxResults","            }","        };","        return this.jiraClient.makeRequest(options, callback);","    };","}",""],"l":{"3":1,"4":1,"6":1,"14":1,"15":0,"29":0,"30":0,"42":0,"43":0,"44":0,"45":0,"49":0,"63":0,"64":0,"75":0,"89":0,"90":0,"98":0,"114":0,"115":0,"127":0,"146":0,"147":0,"148":0,"149":0,"150":0,"152":0,"154":0,"166":0,"189":0,"190":0,"204":0,"219":0,"220":0,"221":0,"222":0,"224":0,"226":0,"241":0,"255":0,"256":0,"269":0,"283":0,"284":0,"293":0,"306":0,"307":0,"316":0,"330":0,"331":0,"340":0,"356":0,"357":0,"369":0,"383":0,"384":0,"393":0,"408":0,"409":0,"422":0,"449":0,"450":0,"451":0,"452":0,"453":0,"455":0,"457":0,"471":0,"487":0,"488":0,"500":0,"520":0,"521":0,"534":0,"553":0,"554":0,"567":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/version.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/version.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},"fnMap":{"1":{"name":"VersionClient","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":35}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":25},"end":{"line":23,"column":51}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":23},"end":{"line":50,"column":49}}},"4":{"name":"(anonymous_4)","line":65,"loc":{"start":{"line":65,"column":22},"end":{"line":65,"column":48}}},"5":{"name":"(anonymous_5)","line":81,"loc":{"start":{"line":81,"column":23},"end":{"line":81,"column":49}}},"6":{"name":"(anonymous_6)","line":96,"loc":{"start":{"line":96,"column":33},"end":{"line":96,"column":59}}},"7":{"name":"(anonymous_7)","line":111,"loc":{"start":{"line":111,"column":35},"end":{"line":111,"column":61}}},"8":{"name":"(anonymous_8)","line":126,"loc":{"start":{"line":126,"column":26},"end":{"line":126,"column":52}}},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":28},"end":{"line":143,"column":54}}},"10":{"name":"(anonymous_10)","line":159,"loc":{"start":{"line":159,"column":25},"end":{"line":159,"column":51}}},"11":{"name":"(anonymous_11)","line":175,"loc":{"start":{"line":175,"column":28},"end":{"line":175,"column":54}}},"12":{"name":"(anonymous_12)","line":190,"loc":{"start":{"line":190,"column":25},"end":{"line":190,"column":51}}},"13":{"name":"(anonymous_13)","line":205,"loc":{"start":{"line":205,"column":32},"end":{"line":205,"column":58}}},"14":{"name":"(anonymous_14)","line":220,"loc":{"start":{"line":220,"column":31},"end":{"line":220,"column":57}}},"15":{"name":"(anonymous_15)","line":247,"loc":{"start":{"line":247,"column":31},"end":{"line":247,"column":71}}},"16":{"name":"(anonymous_16)","line":254,"loc":{"start":{"line":254,"column":32},"end":{"line":254,"column":49}}},"17":{"name":"(anonymous_17)","line":262,"loc":{"start":{"line":262,"column":32},"end":{"line":262,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":10,"column":0},"end":{"line":277,"column":1}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":33,"column":6}},"5":{"start":{"line":24,"column":8},"end":{"line":30,"column":10}},"6":{"start":{"line":32,"column":8},"end":{"line":32,"column":62}},"7":{"start":{"line":50,"column":4},"end":{"line":53,"column":6}},"8":{"start":{"line":51,"column":8},"end":{"line":51,"column":116}},"9":{"start":{"line":52,"column":8},"end":{"line":52,"column":62}},"10":{"start":{"line":65,"column":4},"end":{"line":68,"column":6}},"11":{"start":{"line":66,"column":8},"end":{"line":66,"column":64}},"12":{"start":{"line":67,"column":8},"end":{"line":67,"column":62}},"13":{"start":{"line":81,"column":4},"end":{"line":84,"column":6}},"14":{"start":{"line":82,"column":8},"end":{"line":82,"column":78}},"15":{"start":{"line":83,"column":8},"end":{"line":83,"column":62}},"16":{"start":{"line":96,"column":4},"end":{"line":99,"column":6}},"17":{"start":{"line":97,"column":8},"end":{"line":97,"column":83}},"18":{"start":{"line":98,"column":8},"end":{"line":98,"column":62}},"19":{"start":{"line":111,"column":4},"end":{"line":114,"column":6}},"20":{"start":{"line":112,"column":8},"end":{"line":112,"column":85}},"21":{"start":{"line":113,"column":8},"end":{"line":113,"column":62}},"22":{"start":{"line":126,"column":4},"end":{"line":129,"column":6}},"23":{"start":{"line":127,"column":8},"end":{"line":127,"column":75}},"24":{"start":{"line":128,"column":8},"end":{"line":128,"column":62}},"25":{"start":{"line":143,"column":4},"end":{"line":146,"column":6}},"26":{"start":{"line":144,"column":8},"end":{"line":144,"column":93}},"27":{"start":{"line":145,"column":8},"end":{"line":145,"column":84}},"28":{"start":{"line":159,"column":4},"end":{"line":162,"column":6}},"29":{"start":{"line":160,"column":8},"end":{"line":160,"column":96}},"30":{"start":{"line":161,"column":8},"end":{"line":161,"column":62}},"31":{"start":{"line":175,"column":4},"end":{"line":178,"column":6}},"32":{"start":{"line":176,"column":8},"end":{"line":176,"column":99}},"33":{"start":{"line":177,"column":8},"end":{"line":177,"column":85}},"34":{"start":{"line":190,"column":4},"end":{"line":193,"column":6}},"35":{"start":{"line":191,"column":8},"end":{"line":191,"column":67}},"36":{"start":{"line":192,"column":8},"end":{"line":192,"column":81}},"37":{"start":{"line":205,"column":4},"end":{"line":208,"column":6}},"38":{"start":{"line":206,"column":8},"end":{"line":206,"column":78}},"39":{"start":{"line":207,"column":8},"end":{"line":207,"column":86}},"40":{"start":{"line":220,"column":4},"end":{"line":229,"column":6}},"41":{"start":{"line":221,"column":8},"end":{"line":227,"column":10}},"42":{"start":{"line":228,"column":8},"end":{"line":228,"column":62}},"43":{"start":{"line":247,"column":4},"end":{"line":276,"column":6}},"44":{"start":{"line":248,"column":8},"end":{"line":248,"column":52}},"45":{"start":{"line":249,"column":8},"end":{"line":249,"column":25}},"46":{"start":{"line":249,"column":17},"end":{"line":249,"column":25}},"47":{"start":{"line":250,"column":8},"end":{"line":250,"column":29}},"48":{"start":{"line":250,"column":19},"end":{"line":250,"column":29}},"49":{"start":{"line":252,"column":8},"end":{"line":258,"column":9}},"50":{"start":{"line":253,"column":12},"end":{"line":253,"column":27}},"51":{"start":{"line":254,"column":12},"end":{"line":256,"column":15}},"52":{"start":{"line":255,"column":16},"end":{"line":255,"column":40}},"53":{"start":{"line":257,"column":12},"end":{"line":257,"column":47}},"54":{"start":{"line":260,"column":8},"end":{"line":266,"column":9}},"55":{"start":{"line":261,"column":12},"end":{"line":261,"column":27}},"56":{"start":{"line":262,"column":12},"end":{"line":264,"column":15}},"57":{"start":{"line":263,"column":16},"end":{"line":263,"column":37}},"58":{"start":{"line":265,"column":12},"end":{"line":265,"column":47}},"59":{"start":{"line":268,"column":8},"end":{"line":275,"column":10}}},"branchMap":{"1":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":8},"end":{"line":249,"column":8}},{"start":{"line":249,"column":8},"end":{"line":249,"column":8}}]},"2":{"line":250,"type":"if","locations":[{"start":{"line":250,"column":8},"end":{"line":250,"column":8}},{"start":{"line":250,"column":8},"end":{"line":250,"column":8}}]},"3":{"line":252,"type":"if","locations":[{"start":{"line":252,"column":8},"end":{"line":252,"column":8}},{"start":{"line":252,"column":8},"end":{"line":252,"column":8}}]},"4":{"line":260,"type":"if","locations":[{"start":{"line":260,"column":8},"end":{"line":260,"column":8}},{"start":{"line":260,"column":8},"end":{"line":260,"column":8}}]}},"code":["\"use strict\";","","module.exports = VersionClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/version'"," * @param {JiraClient} jiraClient"," * @constructor VersionClient"," */","function VersionClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Creates a version","     *","     * @method createVersion","     * @memberOf VersionClient#","     * @param {Object} opts The request options sent to Jira.","     * @param {Object} opts.version See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3549}","     * @param [callback] Called when the version has been created.","     * @return {Promise} Resolved when the version has been created.","     */","    this.createVersion = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/version'),","            method: 'POST',","            json: true,","            followAllRedirects: true,","            body: opts.version","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Modify a version's sequence within a project. The move version bean has 2 alternative field value pairs","     * (opts.position or opts.after).  One and only one of these two must be provided.","     *","     * @method moveVersion","     * @memberOf VersionClient#","     * @param {Object} opts The request options sent to the Jira API.","     * @param {string} opts.versionId The id of the version to move.","     * @param {string} [opts.position] An absolute position, which may have a value of 'First', 'Last', 'Earlier' or","     *     'Later'. Must be provided if opts.after is missing.","     * @param {string} [opts.after] A version to place this version after. The value should be the self link of another","     *     version. Must be provided if opts.position is missing","     * @param [callback] Called when the version has been moved.","     * @return {Promise} Resolved when the version has been moved.","     */","    this.moveVersion = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/move', 'POST', {position: opts.position, after: opts.after});","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get a project version.","     *","     * @method getVersion","     * @memberOf VersionClient#","     * @param {Object} opts The request options sent to the Jira API.","     * @param {string|number} opts.versionId The id of the version to retrieve.","     * @param [callback] Called when the version is retrieved.","     * @return {Promise} Resolved when the version is retrieved.","     */","    this.getVersion = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Modify an existing version; any omitted fields will be ignored.","     *","     * @method editVersion","     * @memberOf VersionClient#","     * @param {Object} opts The request options sent to Jira.","     * @param {string} opts.versionId The id of the version to edit.","     * @param {Object} opts.version See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3619}","     * @param [callback] Called when the version has been modified.","     * @return {Promise} Resolved when the version has been modified.","     */","    this.editVersion = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'PUT', opts.version);","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get a bean containing the number of fixed in and affected issues for the given version.","     *","     * @method getRelatedIssueCounts","     * @memberOf VersionClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.versionId The version for which to retrieve related issues.","     * @param [callback] Called when the count has been retrieved.","     * @return {Promise} Resolved when the count has been retrieved.","     */","    this.getRelatedIssueCounts = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/relatedIssueCounts', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get the number of unresolved issues for the given version","     *","     * @method getUnresolvedIssueCount","     * @memberOf VersionClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.versionId The version for which to retrieve unresolved issues.","     * @param [callback] Called when the count has been retrieved.","     * @return {Promise} Resolved when the count has been retrieved.","     */","    this.getUnresolvedIssueCount = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/unresolvedIssueCount', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get the remote version links associated with the given version id.","     *","     * @method getRemoteLinks","     * @memberOf VersionClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.versionId The version for which to retrieve remote links.","     * @param [callback] Called when the links have been retrieved.","     * @return {Promise} Resolved when the links have been retrieved.","     */","    this.getRemoteLinks = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/remotelink', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Create a remote version link via POST. The link's global id will be taken from the JSON payload if provided;","     * otherwise, it will be generated.","     *","     * @method createRemoteLink","     * @memberOf VersionClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.versionId The version for which to retrieve unresolved issues.","     * @param opts.remoteLink See {@link https://docs.atlassian.com/jira/REST/latest/#d2e3753}","     * @param [callback] Called when the remote link has been created.","     * @return {Promise} Resolved when the remote link has been created.","     */","    this.createRemoteLink = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/remotelink', 'POST', opts.remoteLink);","        return this.jiraClient.makeRequest(options, callback, 'Remotelink Created');","    };","","    /**","     * Get a REST sub-resource representing a remote version link.","     *","     * @method getRemoteLinks","     * @memberOf VersionClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.versionId The version for which to retrieve the remote link","     * @param opts.remoteLinkId The global id of the remote link","     * @param [callback] Called when the link has been retrieved.","     * @return {Promise} Resolved when the link has been retrieved.","     */","    this.getRemoteLink = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/remotelink/' + opts.remoteLinkId, 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Delete a remote version link.","     *","     * @method deleteRemoteLink","     * @memberOf VersionClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.versionId The version id","     * @param opts.remoteLinkId The global id of the remote link","     * @param [callback] Called when the link has been deleted.","     * @return {Promise} Resolved when the link has been deleted.","     */","    this.deleteRemoteLink = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/remotelink/' + opts.remoteLinkId, 'DELETE');","        return this.jiraClient.makeRequest(options, callback, 'Remote Link Deleted');","    };","","    /**","     * Delete a project version.","     *","     * @method deleteVersion","     * @memberOf VersionClient#","     * @param {Object} opts The request options sent to the Jira API.","     * @param {string|number} opts.versionId The id of the version to delete.","     * @param [callback] Called when the version is deleted.","     * @return {Promise} Resolved when the version is deleted.","     */","    this.deleteVersion = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'DELETE');","        return this.jiraClient.makeRequest(options, callback, 'Version Deleted');","    };","","    /**","     * Delete all remote version links for a given version id.","     *","     * @method deleteAllRemoteLinks","     * @memberOf VersionClient#","     * @param {Object} opts The request options sent to the Jira API.","     * @param {string|number} opts.versionId The id of the version to delete.","     * @param [callback] Called when the version is deleted.","     * @return {Promise} Resolved when the version is deleted.","     */","    this.deleteAllRemoteLinks = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/remotelink', 'DELETE');","        return this.jiraClient.makeRequest(options, callback, 'Remote Links Deleted');","    };","","    /**","     * Returns the remote version links for a given global id.","     *","     * @method getGlobalRemoteLink","     * @memberOf VersionClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.globalId The global id of the remote resource that is linked to the versions","     * @param [callback] Called when the remote link is returned.","     * @return {Promise} Resolved when the remote link is returned.","     */","    this.getGlobalRemoteLink = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/version/remotelink'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {globalId: opts.globalId}","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Build out the request options necessary to make a particular API call.","     *","     * @private","     * @method buildRequestOptions","     * @memberOf FilterClient#","     * @param {Object} opts The arguments passed to the method.","     * @param {number} opts.versionId The id of the screen to use in the path.","     * @param {Array} [opts.fields] The fields to include","     * @param {Array} [opts.expand] The fields to expand","     * @param {string} path The path of the endpoint following /version/{id}","     * @param {string} method The request method.","     * @param {Object} [body] The request body, if any.","     * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.","     * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}","     */","    this.buildRequestOptions = function (opts, path, method, body, qs) {","        var basePath = '/version/' + opts.versionId;","        if (!qs) qs = {};","        if (!body) body = {};","","        if (opts.fields) {","            qs.fields = '';","            opts.fields.forEach(function (field) {","                qs.fields += field + ','","            });","            qs.fields = qs.fields.slice(0, -1);","        }","","        if (opts.expand) {","            qs.expand = '';","            opts.expand.forEach(function (ex) {","                qs.expand += ex + ','","            });","            qs.expand = qs.expand.slice(0, -1);","        }","","        return {","            uri: this.jiraClient.buildURL(basePath + path),","            method: method,","            body: body,","            qs: qs,","            followAllRedirects: true,","            json: true","        };","    };","}"],"l":{"3":1,"10":1,"11":0,"23":0,"24":0,"32":0,"50":0,"51":0,"52":0,"65":0,"66":0,"67":0,"81":0,"82":0,"83":0,"96":0,"97":0,"98":0,"111":0,"112":0,"113":0,"126":0,"127":0,"128":0,"143":0,"144":0,"145":0,"159":0,"160":0,"161":0,"175":0,"176":0,"177":0,"190":0,"191":0,"192":0,"205":0,"206":0,"207":0,"220":0,"221":0,"228":0,"247":0,"248":0,"249":0,"250":0,"252":0,"253":0,"254":0,"255":0,"257":0,"260":0,"261":0,"262":0,"263":0,"265":0,"268":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/webhook.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/webhook.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"WebhookClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}}},"2":{"name":"(anonymous_2)","line":23,"loc":{"start":{"line":23,"column":26},"end":{"line":23,"column":52}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":22},"end":{"line":44,"column":48}}},"4":{"name":"(anonymous_4)","line":72,"loc":{"start":{"line":72,"column":25},"end":{"line":72,"column":51}}},"5":{"name":"(anonymous_5)","line":94,"loc":{"start":{"line":94,"column":25},"end":{"line":94,"column":51}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":11,"column":0},"end":{"line":104,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":23,"column":4},"end":{"line":32,"column":6}},"5":{"start":{"line":24,"column":8},"end":{"line":29,"column":10}},"6":{"start":{"line":31,"column":8},"end":{"line":31,"column":62}},"7":{"start":{"line":44,"column":4},"end":{"line":53,"column":6}},"8":{"start":{"line":45,"column":8},"end":{"line":50,"column":10}},"9":{"start":{"line":52,"column":8},"end":{"line":52,"column":62}},"10":{"start":{"line":72,"column":4},"end":{"line":82,"column":6}},"11":{"start":{"line":73,"column":8},"end":{"line":79,"column":10}},"12":{"start":{"line":81,"column":8},"end":{"line":81,"column":62}},"13":{"start":{"line":94,"column":4},"end":{"line":103,"column":6}},"14":{"start":{"line":95,"column":8},"end":{"line":100,"column":10}},"15":{"start":{"line":102,"column":8},"end":{"line":102,"column":62}}},"branchMap":{},"code":["\"use strict\";","","module.exports = WebhookClient;","","/**"," * Used to access Jira REST endpoints in '/rest/webhook/1.0/webhook'"," *"," * @param {JiraClient} jiraClient"," * @constructor WebhookClient"," */","function WebhookClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns a list of all registered webhooks.","     *","     * @method getAllWebhooks","     * @memberOf WebhookClient#","     * @param opts Ignored","     * @param [callback] Called when the webhooks have been retrieved.","     * @return {Promise} Resolved when the webhooks have been retrieved.","     */","    this.getAllWebhooks = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildWebhookURL('/webhook'),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns a webhook with a specific ID.","     *","     * @method getWebhook","     * @memberOf WebhookClient#","     * @param opts The options sent to the JIRA API.","     * @param opts.webhookId The numerical webhook ID.","     * @param [callback] Called when the webhook has been retrieved.","     * @return {Promise} Resolved when the webhook has been retrieved.","     */","    this.getWebhook = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildWebhookURL('/webhook/' + opts.webhookId),","            method: 'GET',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Registers a new webhook.","     *","     * @method createWebhook","     * @memberOf WebhookClient#","     * @param opts The options sent to the JIRA API.","     * @param opts.name The name of the webhook.","     * @param opts.url The URL of the webhook.","     * @param opts.events An array of events with which the webhook should be registered. See","     *   {@link https://developer.atlassian.com/jiradev/jira-apis/webhooks#Webhooks-configureConfiguringawebhook}.","     * @param opts.enabled Whether the webhook is enabled.","     * @param opts.filter An object containing filter configuration.","     * @param opts.filter.issue-related-events-section A filter for issues, written in JQL.","     * @param opts.excludeBody Whether to send an empty body to the webhook URL.","     * @param [callback] Called when the webhook has been retrieved.","     * @return {Promise} Resolved when the webhook has been retrieved.","     */","    this.createWebhook = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildWebhookURL('/webhook'),","            method: 'POST',","            json: true,","            body: opts,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Deletes a registered webhook.","     *","     * @method deleteWebhook","     * @memberOf WebhookClient#","     * @param opts The options sent to the JIRA API.","     * @param opts.webhookId The numerical webhook ID.","     * @param [callback] Called when the webhook has been retrieved.","     * @return {Promise} Resolved when the webhook has been retrieved.","     */","    this.deleteWebhook = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildWebhookURL('/webhook/' + opts.webhookId),","            method: 'DELETE',","            json: true,","            followAllRedirects: true","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}",""],"l":{"3":1,"11":1,"12":0,"23":0,"24":0,"31":0,"44":0,"45":0,"52":0,"72":0,"73":0,"81":0,"94":0,"95":0,"102":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/workflow.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/workflow.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"WorkflowClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":36}}},"2":{"name":"(anonymous_2)","line":24,"loc":{"start":{"line":24,"column":24},"end":{"line":24,"column":50}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":11,"column":0},"end":{"line":39,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":24,"column":4},"end":{"line":38,"column":6}},"5":{"start":{"line":25,"column":8},"end":{"line":25,"column":20}},"6":{"start":{"line":26,"column":8},"end":{"line":28,"column":9}},"7":{"start":{"line":27,"column":12},"end":{"line":27,"column":48}},"8":{"start":{"line":29,"column":8},"end":{"line":35,"column":10}},"9":{"start":{"line":37,"column":8},"end":{"line":37,"column":62}}},"branchMap":{"1":{"line":26,"type":"if","locations":[{"start":{"line":26,"column":8},"end":{"line":26,"column":8}},{"start":{"line":26,"column":8},"end":{"line":26,"column":8}}]},"2":{"line":26,"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":16}},{"start":{"line":26,"column":20},"end":{"line":26,"column":44}},{"start":{"line":26,"column":48},"end":{"line":26,"column":83}}]}},"code":["\"use strict\";","","module.exports = WorkflowClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/workflow'"," *"," * @param {JiraClient} jiraClient"," * @constructor WorkflowClient"," */","function WorkflowClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns all workflows.","     *","     * @method getWorkflows","     * @memberOf WorkflowClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {string} [opts.workflowName] The name of the workflow to retrieve.","     * @param [callback] Called when the workflow(s) have been retrieved.","     * @return {Promise} Resolved when the workflow(s) have been retrieved.","     */","    this.getWorkflows = function (opts, callback) {","        var qs = {};","        if (opts && typeof opts === 'object' && opts.hasOwnProperty('workflowName')) {","            qs.workflowName = opts.workflowName;","        }","        var options = {","            uri: this.jiraClient.buildURL('/workflow'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: qs","        };","","        return this.jiraClient.makeRequest(options, callback);","    };","}",""],"l":{"3":1,"11":1,"12":0,"24":0,"25":0,"26":0,"27":0,"29":0,"37":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/workflowScheme.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/workflowScheme.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"fnMap":{"1":{"name":"WorkflowSchemeClient","line":10,"loc":{"start":{"line":10,"column":0},"end":{"line":10,"column":42}}},"2":{"name":"(anonymous_2)","line":24,"loc":{"start":{"line":24,"column":32},"end":{"line":24,"column":58}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":30},"end":{"line":50,"column":56}}},"4":{"name":"(anonymous_4)","line":67,"loc":{"start":{"line":67,"column":29},"end":{"line":67,"column":55}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":32},"end":{"line":82,"column":58}}},"6":{"name":"(anonymous_6)","line":97,"loc":{"start":{"line":97,"column":23},"end":{"line":97,"column":49}}},"7":{"name":"(anonymous_7)","line":114,"loc":{"start":{"line":114,"column":30},"end":{"line":114,"column":56}}},"8":{"name":"(anonymous_8)","line":131,"loc":{"start":{"line":131,"column":33},"end":{"line":131,"column":59}}},"9":{"name":"(anonymous_9)","line":149,"loc":{"start":{"line":149,"column":30},"end":{"line":149,"column":56}}},"10":{"name":"(anonymous_10)","line":167,"loc":{"start":{"line":167,"column":20},"end":{"line":167,"column":46}}},"11":{"name":"(anonymous_11)","line":184,"loc":{"start":{"line":184,"column":21},"end":{"line":184,"column":47}}},"12":{"name":"(anonymous_12)","line":199,"loc":{"start":{"line":199,"column":23},"end":{"line":199,"column":49}}},"13":{"name":"(anonymous_13)","line":214,"loc":{"start":{"line":214,"column":35},"end":{"line":214,"column":61}}},"14":{"name":"(anonymous_14)","line":230,"loc":{"start":{"line":230,"column":35},"end":{"line":230,"column":61}}},"15":{"name":"(anonymous_15)","line":248,"loc":{"start":{"line":248,"column":38},"end":{"line":248,"column":64}}},"16":{"name":"(anonymous_16)","line":266,"loc":{"start":{"line":266,"column":24},"end":{"line":266,"column":50}}},"17":{"name":"(anonymous_17)","line":287,"loc":{"start":{"line":287,"column":25},"end":{"line":287,"column":51}}},"18":{"name":"(anonymous_18)","line":306,"loc":{"start":{"line":306,"column":27},"end":{"line":306,"column":53}}},"19":{"name":"(anonymous_19)","line":324,"loc":{"start":{"line":324,"column":29},"end":{"line":324,"column":55}}},"20":{"name":"(anonymous_20)","line":341,"loc":{"start":{"line":341,"column":30},"end":{"line":341,"column":56}}},"21":{"name":"(anonymous_21)","line":357,"loc":{"start":{"line":357,"column":32},"end":{"line":357,"column":58}}},"22":{"name":"(anonymous_22)","line":373,"loc":{"start":{"line":373,"column":23},"end":{"line":373,"column":49}}},"23":{"name":"(anonymous_23)","line":391,"loc":{"start":{"line":391,"column":28},"end":{"line":391,"column":54}}},"24":{"name":"(anonymous_24)","line":412,"loc":{"start":{"line":412,"column":24},"end":{"line":412,"column":50}}},"25":{"name":"(anonymous_25)","line":434,"loc":{"start":{"line":434,"column":29},"end":{"line":434,"column":55}}},"26":{"name":"(anonymous_26)","line":453,"loc":{"start":{"line":453,"column":26},"end":{"line":453,"column":52}}},"27":{"name":"(anonymous_27)","line":469,"loc":{"start":{"line":469,"column":31},"end":{"line":469,"column":57}}},"28":{"name":"(anonymous_28)","line":490,"loc":{"start":{"line":490,"column":31},"end":{"line":490,"column":71}}},"29":{"name":"(anonymous_29)","line":497,"loc":{"start":{"line":497,"column":32},"end":{"line":497,"column":49}}},"30":{"name":"(anonymous_30)","line":505,"loc":{"start":{"line":505,"column":32},"end":{"line":505,"column":46}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":38}},"2":{"start":{"line":10,"column":0},"end":{"line":520,"column":1}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":33}},"4":{"start":{"line":24,"column":4},"end":{"line":33,"column":6}},"5":{"start":{"line":25,"column":8},"end":{"line":31,"column":10}},"6":{"start":{"line":32,"column":8},"end":{"line":32,"column":62}},"7":{"start":{"line":50,"column":4},"end":{"line":53,"column":6}},"8":{"start":{"line":51,"column":8},"end":{"line":51,"column":85}},"9":{"start":{"line":52,"column":8},"end":{"line":52,"column":62}},"10":{"start":{"line":67,"column":4},"end":{"line":70,"column":6}},"11":{"start":{"line":68,"column":8},"end":{"line":68,"column":119}},"12":{"start":{"line":69,"column":8},"end":{"line":69,"column":62}},"13":{"start":{"line":82,"column":4},"end":{"line":85,"column":6}},"14":{"start":{"line":83,"column":8},"end":{"line":83,"column":67}},"15":{"start":{"line":84,"column":8},"end":{"line":84,"column":89}},"16":{"start":{"line":97,"column":4},"end":{"line":100,"column":6}},"17":{"start":{"line":98,"column":8},"end":{"line":98,"column":77}},"18":{"start":{"line":99,"column":8},"end":{"line":99,"column":62}},"19":{"start":{"line":114,"column":4},"end":{"line":117,"column":6}},"20":{"start":{"line":115,"column":8},"end":{"line":115,"column":127}},"21":{"start":{"line":116,"column":8},"end":{"line":116,"column":62}},"22":{"start":{"line":131,"column":4},"end":{"line":134,"column":6}},"23":{"start":{"line":132,"column":8},"end":{"line":132,"column":130}},"24":{"start":{"line":133,"column":8},"end":{"line":133,"column":62}},"25":{"start":{"line":149,"column":4},"end":{"line":155,"column":6}},"26":{"start":{"line":150,"column":8},"end":{"line":153,"column":11}},"27":{"start":{"line":154,"column":8},"end":{"line":154,"column":62}},"28":{"start":{"line":167,"column":4},"end":{"line":170,"column":6}},"29":{"start":{"line":168,"column":8},"end":{"line":168,"column":70}},"30":{"start":{"line":169,"column":8},"end":{"line":169,"column":62}},"31":{"start":{"line":184,"column":4},"end":{"line":187,"column":6}},"32":{"start":{"line":185,"column":8},"end":{"line":185,"column":82}},"33":{"start":{"line":186,"column":8},"end":{"line":186,"column":62}},"34":{"start":{"line":199,"column":4},"end":{"line":202,"column":6}},"35":{"start":{"line":200,"column":8},"end":{"line":200,"column":73}},"36":{"start":{"line":201,"column":8},"end":{"line":201,"column":62}},"37":{"start":{"line":214,"column":4},"end":{"line":217,"column":6}},"38":{"start":{"line":215,"column":8},"end":{"line":215,"column":78}},"39":{"start":{"line":216,"column":8},"end":{"line":216,"column":62}},"40":{"start":{"line":230,"column":4},"end":{"line":236,"column":6}},"41":{"start":{"line":231,"column":8},"end":{"line":234,"column":11}},"42":{"start":{"line":235,"column":8},"end":{"line":235,"column":62}},"43":{"start":{"line":248,"column":4},"end":{"line":251,"column":6}},"44":{"start":{"line":249,"column":8},"end":{"line":249,"column":81}},"45":{"start":{"line":250,"column":8},"end":{"line":250,"column":62}},"46":{"start":{"line":266,"column":4},"end":{"line":270,"column":6}},"47":{"start":{"line":267,"column":8},"end":{"line":268,"column":61}},"48":{"start":{"line":269,"column":8},"end":{"line":269,"column":62}},"49":{"start":{"line":287,"column":4},"end":{"line":293,"column":6}},"50":{"start":{"line":288,"column":8},"end":{"line":291,"column":11}},"51":{"start":{"line":292,"column":8},"end":{"line":292,"column":62}},"52":{"start":{"line":306,"column":4},"end":{"line":311,"column":6}},"53":{"start":{"line":307,"column":8},"end":{"line":309,"column":11}},"54":{"start":{"line":310,"column":8},"end":{"line":310,"column":62}},"55":{"start":{"line":324,"column":4},"end":{"line":327,"column":6}},"56":{"start":{"line":325,"column":8},"end":{"line":325,"column":98}},"57":{"start":{"line":326,"column":8},"end":{"line":326,"column":62}},"58":{"start":{"line":341,"column":4},"end":{"line":344,"column":6}},"59":{"start":{"line":342,"column":8},"end":{"line":342,"column":125}},"60":{"start":{"line":343,"column":8},"end":{"line":343,"column":62}},"61":{"start":{"line":357,"column":4},"end":{"line":360,"column":6}},"62":{"start":{"line":358,"column":8},"end":{"line":358,"column":101}},"63":{"start":{"line":359,"column":8},"end":{"line":359,"column":62}},"64":{"start":{"line":373,"column":4},"end":{"line":378,"column":6}},"65":{"start":{"line":374,"column":8},"end":{"line":376,"column":11}},"66":{"start":{"line":377,"column":8},"end":{"line":377,"column":62}},"67":{"start":{"line":391,"column":4},"end":{"line":396,"column":6}},"68":{"start":{"line":392,"column":8},"end":{"line":394,"column":11}},"69":{"start":{"line":395,"column":8},"end":{"line":395,"column":62}},"70":{"start":{"line":412,"column":4},"end":{"line":418,"column":6}},"71":{"start":{"line":413,"column":8},"end":{"line":416,"column":46}},"72":{"start":{"line":417,"column":8},"end":{"line":417,"column":62}},"73":{"start":{"line":434,"column":4},"end":{"line":440,"column":6}},"74":{"start":{"line":435,"column":8},"end":{"line":438,"column":46}},"75":{"start":{"line":439,"column":8},"end":{"line":439,"column":62}},"76":{"start":{"line":453,"column":4},"end":{"line":456,"column":6}},"77":{"start":{"line":454,"column":8},"end":{"line":454,"column":117}},"78":{"start":{"line":455,"column":8},"end":{"line":455,"column":62}},"79":{"start":{"line":469,"column":4},"end":{"line":472,"column":6}},"80":{"start":{"line":470,"column":8},"end":{"line":470,"column":123}},"81":{"start":{"line":471,"column":8},"end":{"line":471,"column":62}},"82":{"start":{"line":490,"column":4},"end":{"line":519,"column":6}},"83":{"start":{"line":491,"column":8},"end":{"line":491,"column":66}},"84":{"start":{"line":492,"column":8},"end":{"line":492,"column":25}},"85":{"start":{"line":492,"column":17},"end":{"line":492,"column":25}},"86":{"start":{"line":493,"column":8},"end":{"line":493,"column":29}},"87":{"start":{"line":493,"column":19},"end":{"line":493,"column":29}},"88":{"start":{"line":495,"column":8},"end":{"line":501,"column":9}},"89":{"start":{"line":496,"column":12},"end":{"line":496,"column":27}},"90":{"start":{"line":497,"column":12},"end":{"line":499,"column":15}},"91":{"start":{"line":498,"column":16},"end":{"line":498,"column":40}},"92":{"start":{"line":500,"column":12},"end":{"line":500,"column":47}},"93":{"start":{"line":503,"column":8},"end":{"line":509,"column":9}},"94":{"start":{"line":504,"column":12},"end":{"line":504,"column":27}},"95":{"start":{"line":505,"column":12},"end":{"line":507,"column":15}},"96":{"start":{"line":506,"column":16},"end":{"line":506,"column":37}},"97":{"start":{"line":508,"column":12},"end":{"line":508,"column":47}},"98":{"start":{"line":511,"column":8},"end":{"line":518,"column":10}}},"branchMap":{"1":{"line":492,"type":"if","locations":[{"start":{"line":492,"column":8},"end":{"line":492,"column":8}},{"start":{"line":492,"column":8},"end":{"line":492,"column":8}}]},"2":{"line":493,"type":"if","locations":[{"start":{"line":493,"column":8},"end":{"line":493,"column":8}},{"start":{"line":493,"column":8},"end":{"line":493,"column":8}}]},"3":{"line":495,"type":"if","locations":[{"start":{"line":495,"column":8},"end":{"line":495,"column":8}},{"start":{"line":495,"column":8},"end":{"line":495,"column":8}}]},"4":{"line":503,"type":"if","locations":[{"start":{"line":503,"column":8},"end":{"line":503,"column":8}},{"start":{"line":503,"column":8},"end":{"line":503,"column":8}}]}},"code":["\"use strict\";","","module.exports = WorkflowSchemeClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/workflowscheme'"," * @param {JiraClient} jiraClient"," * @constructor WorkflowSchemeClient"," */","function WorkflowSchemeClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Create a new workflow scheme. The body contains a representation of the new scheme. Values not passed are","     * assumed to be set to their defaults.","     *","     * @method createWorkflowScheme","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowScheme See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2196}","     * @param [callback] Called when the workflow scheme has been created.","     * @return {Promise} Resolved when the workflow scheme has been created.","     */","    this.createWorkflowScheme = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/workflowscheme'),","            method: 'POST',","            json: true,","            followAllRedirects: true,","            body: opts.workflowScheme","        };","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Update the passed workflow scheme. The body of the request is a representation of the workflow scheme. Values","     * not passed are assumed to indicate no change for that field. The passed representation can have its","     * updateDraftIfNeeded flag set to true to indicate that the draft should be created and/or updated when the actual","     * scheme cannot be edited (e.g. when the scheme is being used by a project). Values not appearing the body will","     * not be touched.","     *","     * @method editWorkflowScheme","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.workflowScheme See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2305}","     * @param [callback] Called when the workflow scheme has been edited.","     * @return {Promise} Resolved when the workflow scheme has been edited.","     */","    this.editWorkflowScheme = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'PUT', opts.workflowScheme);","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get the requested workflow scheme","     *","     * @method getWorkflowScheme","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param [opts.returnDraftIfExists=false] when true indicates that a scheme's draft, if it exists, should be","     *     queried instead of the scheme itself.","     * @param [callback] Called when the workflow scheme has been retrieved.","     * @return {Promise} Resolved when the workflow scheme has been retrieved.","     */","    this.getWorkflowScheme = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'GET', null, {returnDraftIfExists: opts.returnDraftIfExists});","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Delete the passed workflow scheme.","     *","     * @method deleteWorkflowScheme","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param [callback] Called when the workflow scheme has been deleted.","     * @return {Promise} Resolved when the workflow scheme has been deleted.","     */","    this.deleteWorkflowScheme = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '', 'DELETE');","        return this.jiraClient.makeRequest(options, callback, 'Workflow Scheme Deleted');","    };","","    /**","     * Create a draft for the passed scheme. The draft will be a copy of the state of the parent.","     *","     * @method createDraft","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param [callback] Called when the draft has been created.","     * @return {Promise} Resolved when the draft has been created.","     */","    this.createDraft = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/createdraft', 'POST');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get the default workflow from the passed workflow scheme.","     *","     * @method getDefaultWorkflow","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.returnDraftIfExists when true indicates that a scheme's draft, if it exists, should be queried","     *     instead of the scheme itself.","     * @param [callback] Called when the default workflow is returned.","     * @return {Promise} Resolved when the default workflow is returned.","     */","    this.getDefaultWorkflow = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/default', 'GET', null, {returnDraftIfExists: opts.returnDraftIfExists});","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Remove the default workflow from the passed workflow scheme.","     *","     * @method removeDefaultWorkflow","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.updateDraftIfNeeded when true will create and return a draft when the workflow scheme cannot be","     *     edited (e.g. when it is being used by a project).","     * @param [callback] Called when the defaul workflow has been removed.","     * @return {Promise} Resolved when the defaul workflow has been removed.","     */","    this.removeDefaultWorkflow = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/default', 'DELETE', null, {updateDraftIfNeeded: opts.updateDraftIfNeeded});","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Remove the default workflow from the passed workflow scheme.","     *","     * @method setDefaultWorkflow","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.workflowName The name of the new deafault workflow","     * @param opts.updateDraftIfNeeded when true will create and return a draft when the workflow scheme cannot be","     *     edited (e.g. when it is being used by a project).","     * @param [callback] Called when the default workflow has been updated.","     * @return {Promise} Resolved when the default workflow has been updated.","     */","    this.setDefaultWorkflow = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/default', 'PUT', {","            workflow: opts.workflowName,","            updateDraftIfNeeded: opts.updateDraftIfNeeded","        });","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get the requested draft workflow scheme","     *","     * @method getDraft","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param [callback] Called when the draft has been retrieved.","     * @return {Promise} Resolved when the draft has been retrieved.","     */","    this.getDraft = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/draft', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Update a draft workflow scheme. The draft will created if necessary. The body is a representation of the","     * workflow scheme. Values not passed are assumed to indicate no change for that field.","     *","     * @method editDraft","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.draft See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2575}","     * @param [callback] Called when the draft has been edited.","     * @return {Promise} Resolved when the draft has been edited.","     */","    this.editDraft = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/draft', 'PUT', opts.draft);","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Delete the passed draft workflow scheme.","     *","     * @method deleteDraft","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param [callback] Called when the draft has been deleted.","     * @return {Promise} Resolved when the draft has been deleted.","     */","    this.deleteDraft = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/draft', 'DELETE');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Get the default workflow from the passed draft workflow scheme","     *","     * @method getDraftDefaultWorkflow","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param [callback] Called when the default workflow is returned.","     * @return {Promise} Resolved when the default workflow is returned.","     */","    this.getDraftDefaultWorkflow = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/draft/default', 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Remove the default workflow from the passed workflow scheme.","     *","     * @method setDraftDefaultWorkflow","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.workflowName The name of the new default workflow","     * @param [callback] Called when the default workflow has been updated.","     * @return {Promise} Resolved when the default workflow has been updated.","     */","    this.setDraftDefaultWorkflow = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/draft/default', 'PUT', {","            workflow: opts.workflowName,","            updateDraftIfNeeded: opts.updateDraftIfNeeded","        });","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Remove the default workflow from the passed draft workflow scheme.","     *","     * @method removeDraftDefaultWorkflow","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param [callback] Called when the defaul workflow has been removed.","     * @return {Promise} Resolved when the defaul workflow has been removed.","     */","    this.removeDraftDefaultWorkflow = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/draft/default', 'DELETE');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns the issue type mapping for the passed workflow scheme.","     *","     * @method getIssueType","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.issueType The issue type","     * @param opts.returnDraftIfExists when true indicates that a scheme's draft, if it exists, should be queried","     *     instead of the scheme itself.","     * @param [callback] Called when the issue type has been retrieved.","     * @return {Promise} Resolved when the issue type has been retrieved.","     */","    this.getIssueType = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/issuetype/' + opts.issueType, 'GET', null,","            {returnDraftIfExists: opts.returnDraftIfExists});","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Set the issue type mapping for the passed scheme. The passed representation can have its updateDraftIfNeeded","     * flag set to true to indicate that the draft should be created/updated when the actual scheme cannot be edited.","     *","     * @method editIssueType","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.issueType The issue type","     * @param opts.workflow The new workflow","     * @param opts.updateDraftIfNeeded when true will create and return a draft when the workflow scheme cannot be","     *     edited (e.g. when it is being used by a project).","     * @param [callback] Called when the issue type has been edited","     * @return {Promise} Resolved when the issue type has been edited","     */","    this.editIssueType = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/issuetype/' + opts.issueType, 'PUT', {","            workflow: opts.workflow,","            updateDraftIfNeeded: opts.updateDraftIfNeeded","        });","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Remove the specified issue type mapping from the scheme.","     *","     * @method removeIssueType","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.issueType The issue type","     * @param [callback] Called when the issue type mapping has been removed.","     * @return {Promise} Resolved when the issue type mapping has been removed.","     */","    this.removeIssueType = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/issuetype/' + opts.issueType, 'DELETE', null, {","            updateDraftIfNeeded: opts.updateDraftIfNeeded","        });","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns the issue type mapping for the passed draft workflow scheme.","     *","     * @method getDraftIssueType","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API.","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.issueType The issue type","     * @param [callback] Called when the issue type has been retrieved.","     * @return {Promise} Resolved when the issue type has been retrieved.","     */","    this.getDraftIssueType = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/draft/issuetype/' + opts.issueType, 'GET');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Set the issue type mapping for the passed draft scheme.","     *","     * @method editDraftIssueType","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.issueType The issue type","     * @param opts.workflow The new workflow","     * @param [callback] Called when the issue type has been edited","     * @return {Promise} Resolved when the issue type has been edited","     */","    this.editDraftIssueType = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/draft/issuetype/' + opts.issueType, 'PUT', {workflow: opts.workflow});","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Remove the specified issue type mapping from the scheme.","     *","     * @method removeDraftIssueType","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.issueType The issue type","     * @param [callback] Called when the issue type mapping has been removed.","     * @return {Promise} Resolved when the issue type mapping has been removed.","     */","    this.removeDraftIssueType = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/draft/issuetype/' + opts.issueType, 'DELETE');","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns the workflow mappings or requested mapping to the caller for the passed scheme.","     *","     * @method getWorkflow","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.workflowName The name of the workflow.","     * @param [callback] Called when the workflow has been retrieved.","     * @return {Promise} Resolved when the workflow has been retrieved.","     */","    this.getWorkflow = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/workflow', 'GET', null, {","            workflowName: opts.workflowName","        });","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Returns the workflow mappings or requested mapping to the caller for the passed draft scheme.","     *","     * @method getDraftWorkflow","     * @memberOf WorkflowSchemeClient#","     * @param opts The request options sent to the Jira API","     * @param opts.workflowSchemeId The id of the workflow scheme.","     * @param opts.workflowName The name of the workflow.","     * @param [callback] Called when the workflow has been retrieved.","     * @return {Promise} Resolved when the workflow has been retrieved.","     */","    this.getDraftWorkflow = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/draft/workflow', 'GET', null, {","            workflowName: opts.workflowName","        });","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Update the scheme to include the passed mapping. The body is a representation of the workflow mapping. Values","     * not passed are assumed to indicate no change for that field.","     *","     * @method editWorkflow","     * @memberOf WorkflowSchemeClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.workflowSchemeId The id of the workflow scheme.","     * @param {string} opts.workflowName The name of the workflow.","     * @param {Array} opts.issueTypes The new issue types to inclue in the workflow.","     *      See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2509}","     * @param [callback] Called when the workflow has been edited.","     * @return {Promise} Resolved when the workflow has been edited.","     */","    this.editWorkflow = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/workflow', 'PUT', {","            workflow: opts.workflowName,","            issueTypes: opts.issueTypes","        }, {workflowName: opts.workflowName});","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Update the draft scheme to include the passed mapping. The body is a representation of the workflow mapping.","     * Values not passed are assumed to indicate no change for that field.","     *","     * @method editDraftWorkflow","     * @memberOf WorkflowSchemeClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.workflowSchemeId The id of the workflow scheme.","     * @param {string} opts.workflowName The name of the workflow.","     * @param {Array} opts.issueTypes The new issue types to inclue in the workflow.","     *      See {@link https://docs.atlassian.com/jira/REST/latest/#d2e2670 }","     * @param [callback] Called when the workflow has been edited.","     * @return {Promise} Resolved when the workflow has been edited.","     */","    this.editDraftWorkflow = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/draft/workflow', 'PUT', {","            workflow: opts.workflowName,","            issueTypes: opts.issueTypes","        }, {workflowName: opts.workflowName});","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Delete the passed workflow from the workflow scheme.","     *","     * @method deleteWorkflow","     * @memberOf WorkflowSchemeClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.workflowSchemeId The id of the workflow scheme.","     * @param {string} opts.workflowName The name of the workflow.","     * @param [callback] Called when the workflow has been edited.","     * @return {Promise} Resolved when the workflow has been edited.","     */","    this.deleteWorkflow = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/workflow', 'DELETE', null, {workflowName: opts.workflowName});","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Delete the passed workflow from the workflow draft scheme.","     *","     * @method deleteDraftWorkflow","     * @memberOf WorkflowSchemeClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.workflowSchemeId The id of the workflow scheme.","     * @param {string} opts.workflowName The name of the workflow.","     * @param [callback] Called when the workflow has been edited.","     * @return {Promise} Resolved when the workflow has been edited.","     */","    this.deleteDraftWorkflow = function (opts, callback) {","        var options = this.buildRequestOptions(opts, '/draft/workflow', 'DELETE', null, {workflowName: opts.workflowName});","        return this.jiraClient.makeRequest(options, callback);","    };","","    /**","     * Build out the request options necessary to make a particular API call.","     *","     * @private","     * @method buildRequestOptions","     * @memberOf WorkflowSchemeClient#","     * @param {Object} opts The arguments passed to the method.","     * @param {number} opts.workflowSchemeId The id of the workflowScheme to use in the path.","     * @param {Array} [opts.fields] The fields to include","     * @param {Array} [opts.expand] The fields to expand","     * @param {string} path The path of the endpoint following /workflowScheme/{id}","     * @param {string} method The request method.","     * @param {Object} [body] The request body, if any.","     * @param {Object} [qs] The querystring, if any.  opts.expand and opts.fields arrays will be automagically added.","     * @returns {{uri: string, method: string, body: Object, qs: Object, followAllRedirects: boolean, json: boolean}}","     */","    this.buildRequestOptions = function (opts, path, method, body, qs) {","        var basePath = '/workflowscheme/' + opts.workflowSchemeId;","        if (!qs) qs = {};","        if (!body) body = {};","","        if (opts.fields) {","            qs.fields = '';","            opts.fields.forEach(function (field) {","                qs.fields += field + ','","            });","            qs.fields = qs.fields.slice(0, -1);","        }","","        if (opts.expand) {","            qs.expand = '';","            opts.expand.forEach(function (ex) {","                qs.expand += ex + ','","            });","            qs.expand = qs.expand.slice(0, -1);","        }","","        return {","            uri: this.jiraClient.buildURL(basePath + path),","            method: method,","            body: body,","            qs: qs,","            followAllRedirects: true,","            json: true","        };","    };","}"],"l":{"3":1,"10":1,"11":0,"24":0,"25":0,"32":0,"50":0,"51":0,"52":0,"67":0,"68":0,"69":0,"82":0,"83":0,"84":0,"97":0,"98":0,"99":0,"114":0,"115":0,"116":0,"131":0,"132":0,"133":0,"149":0,"150":0,"154":0,"167":0,"168":0,"169":0,"184":0,"185":0,"186":0,"199":0,"200":0,"201":0,"214":0,"215":0,"216":0,"230":0,"231":0,"235":0,"248":0,"249":0,"250":0,"266":0,"267":0,"269":0,"287":0,"288":0,"292":0,"306":0,"307":0,"310":0,"324":0,"325":0,"326":0,"341":0,"342":0,"343":0,"357":0,"358":0,"359":0,"373":0,"374":0,"377":0,"391":0,"392":0,"395":0,"412":0,"413":0,"417":0,"434":0,"435":0,"439":0,"453":0,"454":0,"455":0,"469":0,"470":0,"471":0,"490":0,"491":0,"492":0,"493":0,"495":0,"496":0,"497":0,"498":0,"500":0,"503":0,"504":0,"505":0,"506":0,"508":0,"511":0}},"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/worklog.js":{"path":"/home/travis/build/npmtest/node-npmtest-jira-connector/node_modules/jira-connector/api/worklog.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0},"fnMap":{"1":{"name":"WorklogClient","line":11,"loc":{"start":{"line":11,"column":0},"end":{"line":11,"column":35}}},"2":{"name":"(anonymous_2)","line":26,"loc":{"start":{"line":26,"column":29},"end":{"line":26,"column":55}}},"3":{"name":"(anonymous_3)","line":50,"loc":{"start":{"line":50,"column":23},"end":{"line":50,"column":49}}},"4":{"name":"(anonymous_4)","line":75,"loc":{"start":{"line":75,"column":29},"end":{"line":75,"column":55}}}},"statementMap":{"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":31}},"2":{"start":{"line":11,"column":0},"end":{"line":87,"column":1}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":33}},"4":{"start":{"line":26,"column":4},"end":{"line":37,"column":6}},"5":{"start":{"line":27,"column":8},"end":{"line":35,"column":10}},"6":{"start":{"line":36,"column":8},"end":{"line":36,"column":61}},"7":{"start":{"line":50,"column":4},"end":{"line":61,"column":6}},"8":{"start":{"line":51,"column":8},"end":{"line":59,"column":10}},"9":{"start":{"line":60,"column":8},"end":{"line":60,"column":61}},"10":{"start":{"line":75,"column":4},"end":{"line":86,"column":5}},"11":{"start":{"line":76,"column":8},"end":{"line":84,"column":10}},"12":{"start":{"line":85,"column":8},"end":{"line":85,"column":61}}},"branchMap":{},"code":["\"use strict\";","","module.exports = WorklogClient;","","/**"," * Used to access Jira REST endpoints in '/rest/api/2/worklog'"," *"," * @param {JiraClient} jiraClient"," * @constructor WorkLogClient"," */","function WorklogClient(jiraClient) {","    this.jiraClient = jiraClient;","","    /**","     * Returns worklogs id and delete time of worklogs that were deleted since given time. The returns set of worklogs is ","     * limited to 1000 elements. This API will not return worklogs deleted during last minute.","     *","     * @method getWorklogDeleted","     * @memberOf WorklogClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.since A date time in unix timestamp format since when deleted worklogs will be returned.","     *      Default: 0","     * @param [callback] Called when the search results are retrieved.","     * @return {Promise} Resolved when the search results are retrieved.","     */ ","    this.getWorklogDeleted = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/worklog/deleted'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                since: opts.since","            }","        };","        return this.jiraClient.makeRequest(options, callback)","    };","","    /**","     * Returns Returns worklogs for given worklog ids. Only worklogs to which the calling user has permissions, ","     * will be included in the result. The returns set of worklogs is limited to 1000 elements.","     *","     * @method worklogList","     * @memberOf WorklogClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {array} [opts.ids] a JSON array named ids which contains a list of issue IDs","     * @param [callback] Called when the search results are retrieved.","     * @return {Promise} Resolved when the search results are retrieved.","     */ ","    this.worklogList = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/worklog/list'),","            method: 'POST',","            json: true,","            followAllRedirects: true,","            body: {","                ids: opts.ids","            }","        };","        return this.jiraClient.makeRequest(options, callback)","    };","","    /**","     * Returns worklogs id and update time of worklogs that were updated since given time. The returns set of worklogs is ","     * limited to 1000 elements. This API will not return worklogs deleted during last minute.","     *","     * @method getWorklogDeleted","     * @memberOf WorklogClient#","     * @param {Object} opts The request options sent to the Jira API","     * @param {number} opts.since A date time in unix timestamp format since when updated worklogs will be returned.","     *      Default: 0","     * @param [callback] Called when the search results are retrieved.","     * @return {Promise} Resolved when the search results are retrieved.","     */ ","    this.getWorklogUpdated = function (opts, callback) {","        var options = {","            uri: this.jiraClient.buildURL('/worklog/updated'),","            method: 'GET',","            json: true,","            followAllRedirects: true,","            qs: {","                since: opts.since","            }","        };","        return this.jiraClient.makeRequest(options, callback)","    }","}",""],"l":{"3":1,"11":1,"12":0,"26":0,"27":0,"36":0,"50":0,"51":0,"60":0,"75":0,"76":0,"85":0}}}